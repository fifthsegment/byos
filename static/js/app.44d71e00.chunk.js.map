{"version":3,"sources":["src/contexts/routing/RoutingContext.ts","src/contexts/application/ApplicationContext.ts","src/components/Header/index.tsx","src/services/s3/index.ts","src/components/Input/InputField.tsx","src/components/SaveCredentialsForm/index.tsx","src/components/ApiConfiguration/index.tsx","src/adapters/s3.ts","src/components/ContextMenu/index.tsx","src/components/DataGrid/dataGridColumns.tsx","src/components/DataGrid/index.tsx","src/services/rn-responsive-design/components/Block.tsx","src/components/Modal/index.tsx","src/components/ListAssets/index.tsx","src/hooks/useS3Client.ts","src/hooks/useGetAssets.ts","src/pages/dashboard/index.tsx","src/components/MobileNavigation/index.tsx","src/services/localstorage/index.ts","src/theme/index.ts","src/App.tsx","src/hooks/useGetApplicationStateFromLS.ts","src/routes/index.tsx","src/pages/credentials/index.tsx","src/pages/home/index.tsx","src/providers/BasicProvider.tsx","src/providers/QueryProvider.tsx","src/providers/Provider.tsx","src/ExportApp.tsx","App.js","index.js"],"names":["RoutingContext","createContext","Object","create","initialData","s3credentials","apiKey","undefined","apiSecret","region","endpoint","bucket","s3client","otherStuff","ApplicationContext","Header","props","Appbar","mode","elevated","name","Content","title","buildS3Client","initializationData","credentials","client","S3Client","middlewareStack","add","next","context","args","step","getAssets","params","console","log","command","ListObjectsCommand","response","send","folders","CommonPrefixes","map","item","prefix","Prefix","etag","lastModified","size","files","Contents","ETag","Key","LastModified","Size","styles","StyleSheet","textInput","marginTop","InputField","control","label","render","field","value","onChange","onBlur","TextInput","onChangeText","text","style","SaveCredentialsForm","useContext","appState","setAppState","useForm","defaultValues","handleSubmit","getValues","reset","useEffect","useState","setSaved","React","visible","setVisible","onToggleSnackBar","container","flex","inner","padding","justifyContent","header","fontSize","marginBottom","height","borderColor","borderBottomWidth","snackBarContainer","KeyboardAvoidingView","behavior","Platform","OS","Card","Text","variant","Actions","Button","onPress","data","setTimeout","s3Client","accessKeyId","secretAccessKey","Bucket","catch","View","Snackbar","onDismiss","action","ApiConfiguration","S3TypeToInternalAdapter","assets","asset","fileName","replace","assetId","fileSize","updatedAt","isFolder","length","ContextMenu","dayjs","extend","relativeTime","icon","marginRight","iconType","exec","MaterialIcons","color","Feather","DataGridColumns","columnHelper","createColumnHelper","accessor","id","cell","info","row","original","getValue","slice","prettyBytes","fromNow","display","filter","flexBasis","paddingRight","cellFirstChild","alignItems","DataGrid","setData","table","useReactTable","columns","getCoreRowModel","getPaginationRowModel","setPageSize","DataTable","getHeaderGroups","headerGroup","headers","Title","index","isPlaceholder","flexRender","column","columnDef","getContext","ScrollView","getRowModel","rows","Row","getVisibleCells","Cell","Pagination","page","getState","pagination","pageIndex","numberOfPages","getPageCount","onPageChange","setPageIndex","getScreenType","px","window","Dimensions","get","screen","screenType","width","Block","hidden","children","dimensions","setDimensions","subscription","addEventListener","remove","hideContent","includes","marginVertical","centeredView","modalView","margin","backgroundColor","borderRadius","shadowColor","shadowOffset","shadowOpacity","shadowRadius","elevation","button","buttonOpen","buttonClose","textStyle","fontWeight","textAlign","modalText","AppModal","isVisible","onClose","Modal","animationType","transparent","onRequestClose","Alert","alert","Pressable","ListAssets","isExtended","setIsExtended","rerun","setRerun","useMemo","useS3Client","s3Initialized","Delimiter","dataQuery","setDataQuery","clientInitialized","queryResponse","useQuery","error","enabled","refetchOnWindowFocus","useGetAssets","isLoading","isError","setPrefix","hostName","IconButton","animated","Math","random","newPrefix","substring","lastIndexOf","goBack","root","section1","path","ActivityIndicator","animating","FAB","fabStyle","section2","errorMessage","bottom","right","position","flexDirection","flexGrow","borderRightWidth","minWidth","Dashboard","MobileNavigation","setIndex","key","focusedIcon","routes","renderScene","BottomNavigation","SceneMap","api_configuration","navigationState","onIndexChange","storeData","AsyncStorage","setItem","JSON","stringify","e","getData","getItem","parseJson","jsonString","parse","getApplicationStateLS","defaultValue","setApplicationStateLS","theme","DefaultTheme","roundness","version","colors","primary","secondary","App","routingState","d","setD","isLoaded","setIsLoaded","then","useGetApplicationStateFromLs","savedApplicationData","applicationState","applicationStateData","setApplicationStateData","Provider","isReady","route","internalRoutes","component","showInNavigation","BasicProvider","setRoutingState","queryClient","QueryClient","QueryProvider","ExportApp","registerRootComponent"],"mappings":"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","file":"static/js/app.44d71e00.chunk.js","sourcesContent":["import { createContext } from 'react'\r\n\r\nexport const RoutingContext = createContext(Object.create(null))\r\n","/**\r\n * This context will hold all of our application data like the current\r\n * user's api Keys, currently viewed directory, etc\r\n */\r\n\r\nimport { S3Client } from '@aws-sdk/client-s3'\r\nimport React, { createContext } from 'react'\r\n\r\nexport interface ApplicationState {\r\n  s3credentials: {\r\n    apiKey: string | undefined\r\n    apiSecret: string | undefined\r\n    region: string | undefined\r\n    endpoint: string | undefined\r\n    bucket: string | undefined\r\n  }\r\n  otherStuff: string\r\n  s3client: S3Client | undefined\r\n}\r\n\r\nexport const initialData: ApplicationState = {\r\n  s3credentials: {\r\n    apiKey: undefined,\r\n    apiSecret: undefined,\r\n    region: undefined,\r\n    endpoint: undefined,\r\n    bucket: undefined\r\n  },\r\n  s3client: undefined,\r\n  otherStuff: ''\r\n}\r\n\r\nexport type ApplicationContextType = [\r\n  ApplicationState,\r\n  React.Dispatch<React.SetStateAction<ApplicationState>>\r\n]\r\n\r\nexport const ApplicationContext = createContext<ApplicationContextType>(\r\n  Object.create(null)\r\n)\r\n","import React from 'react'\nimport { Appbar } from 'react-native-paper'\nimport { PortalHost } from '@gorhom/portal'\nconst Header = (props: any): JSX.Element => (\n  <Appbar.Header mode='center-aligned' elevated={true}>\n    <PortalHost name=\"Back\" />\n    <Appbar.Content title={props.title} />\n    <PortalHost name=\"Reloader\" />\n  </Appbar.Header>\n)\n\nexport default Header\n","import { S3Client, ListObjectsCommand } from '@aws-sdk/client-s3'\r\nimport { S3Initializer, GetAssetArgs, Asset } from './types'\r\nimport 'react-native-url-polyfill/auto'\r\nimport 'react-native-get-random-values'\r\n// eslint-disable-next-line\r\nimport { v4 as uuidv4 } from 'uuid'\r\n\r\nexport const buildS3Client = (initializationData: S3Initializer): S3Client => {\r\n  const { credentials, region, endpoint } = initializationData\r\n  const client = new S3Client({\r\n    region,\r\n    credentials,\r\n    endpoint\r\n  })\r\n  client.middlewareStack.add(\r\n    (next, context) => async (args) => {\r\n      // args.request.headers[\"Custom-Header\"] = \"value\";\r\n      // eslint-disable-next-line\r\n            // @ts-ignore\r\n      // delete args.request.headers[\"amz-sdk-request\"];\r\n      // delete args.request.headers[\"amz-sdk-invocation-id\"];//x-amz-content-sha256\r\n      // delete args.request.headers[\"x-amz-content-sha256\"];\r\n      // args.request.headers[\"date\"] = (new Date()).toUTCString();\r\n      // delete args.request.headers[\"x-amz-date\"];\r\n      // delete args.request.headers[\"x-amz-user-agent\"];\r\n      const result = await next(args)\r\n      return result\r\n    },\r\n    {\r\n      step: 'finalizeRequest',\r\n      name: 'removeHeaders'\r\n    }\r\n  )\r\n  return client\r\n}\r\n\r\nexport const getAssets: (\r\n  client: S3Client,\r\n  params: GetAssetArgs\r\n) => Promise<Asset[] | undefined> = async (client, params) => {\r\n  console.log('[s3:getAssets] Making a List Objects command')\r\n  const command = new ListObjectsCommand(params)\r\n  console.log('[s3:getAssets] Command ', command)\r\n  console.log('[s3:getAssets] Our s3 Client', client)\r\n  console.log('[s3:getAssets] Sending command using client.send')\r\n\r\n  const response = await client.send(command)\r\n  const folders: Asset[] =\r\n        (((response.CommonPrefixes?.map((item) => {\r\n          return {\r\n            prefix: item.Prefix,\r\n            etag: undefined,\r\n            name: item.Prefix,\r\n            lastModified: undefined,\r\n            size: 0\r\n          }\r\n        })))) || []\r\n  const files: Asset[] =\r\n        (((response.Contents?.map((item) => {\r\n          return {\r\n            prefix: '',\r\n            etag: item.ETag,\r\n            name: item?.Key,\r\n            lastModified: item?.LastModified,\r\n            size: item?.Size\r\n          }\r\n        })))) || []\r\n  return [...folders, ...files]\r\n}\r\n\r\nexport const deleteAsset: (assetId: string) => void = (_assetId) => {\r\n  /**\r\n     * Implementation here\r\n     */\r\n}\r\n","import { Controller } from 'react-hook-form'\nimport { StyleSheet } from 'react-native'\nimport { TextInput } from 'react-native-paper'\nimport React from 'react'\n\nconst styles = StyleSheet.create({\n  textInput: {\n    // borderColor: \"#000000\",\n    // borderBottomWidth: 1,\n    marginTop: 20\n  }\n})\n\nexport const InputField: (props: any) => JSX.Element = ({ control, name, label }: any) => {\n  if (control === undefined) {\n    return null\n  }\n  /* const {\n          field: { onChange, onBlur, value, ref },\n          fieldState: { invalid, isTouched, isDirty },\n          formState: { touchedFields, dirtyFields }\n      } = useController({\n          name,\n          control,\n          rules: { required: true },\n          defaultValue: \"\",\n      }); */\n\n  return <>\n        <Controller\n            control={control}\n            name={name}\n            render={({ field: { value, onChange, onBlur } }: any) => {\n              return <>\n                    <TextInput\n                        label={label}\n                        value={value}\n                        onChangeText={(text) => {\n                          console.log('[InputChange] name = ', name, ' value = ', text)\n                          onChange(text)\n                        }}\n                        onBlur={onBlur}\n                        style={styles.textInput}\n                    />\n                </>\n            }}\n        />\n    </>\n}\n","import React, { useContext, useEffect, useState } from 'react'\nimport { useForm } from 'react-hook-form'\nimport { ApplicationContext } from '../../contexts/application/ApplicationContext'\nimport { buildS3Client, getAssets } from '../../services/s3'\nimport { Text, Card, Snackbar } from 'react-native-paper'\nimport { InputField } from '../Input/InputField'\nimport { Button } from '../Button'\nimport { KeyboardAvoidingView, Platform, StyleSheet, View } from 'react-native'\nimport { S3Client } from '@aws-sdk/client-s3'\n\nexport const SaveCredentialsForm: React.FC = () => {\n  const [appState, setAppState] = useContext(ApplicationContext)\n  const { s3credentials } = appState\n  const { control, handleSubmit, getValues, reset } = useForm({\n    defaultValues: s3credentials\n  })\n\n  useEffect(() => {\n    reset(s3credentials)\n  }, [s3credentials])\n\n  const [, setSaved] = useState(false)\n\n  const onSubmit = (): void => {\n    console.log('Submitting form')\n    onToggleSnackBar()\n    const data = getValues()\n    setAppState({\n      ...appState,\n      s3credentials: data as any,\n      s3client: undefined\n    })\n    setSaved(true)\n    setTimeout(() => {\n      setSaved(false)\n    }, 1000)\n    /**\n         * Build the s3 client here\n         */\n    const s3Client: S3Client = buildS3Client({\n      credentials: {\n        accessKeyId: data.apiKey,\n        secretAccessKey: data.apiSecret\n      },\n      region: data.region,\n      endpoint: data.endpoint\n    })\n\n    getAssets(s3Client, { Bucket: 'testinghumza' }).catch(() => {\n      console.log('[SaveCredentialsForm] Promise failure getAssets')\n    })\n  }\n\n  // snackbar\n  const [visible, setVisible] = React.useState<boolean>(false)\n  const onToggleSnackBar: () => void = () => setVisible(!visible)\n  const onDismissSnackBar: () => void = () => setVisible(false)\n\n  const styles = StyleSheet.create({\n    container: {\n      flex: 1\n    },\n    inner: {\n      padding: 24,\n      flex: 1,\n      justifyContent: 'space-around'\n    },\n    header: {\n      fontSize: 36,\n      marginBottom: 48\n    },\n    textInput: {\n      height: 40,\n      borderColor: '#000000',\n      borderBottomWidth: 1,\n      marginBottom: 36\n    },\n    snackBarContainer: {\n      flex: 1,\n      justifyContent: 'space-between'\n    }\n  })\n\n  return (\n    <KeyboardAvoidingView\n      behavior={Platform.OS === 'ios' ? 'padding' : 'height'}\n      style={styles.container}\n    >\n      <Card>\n        <Card.Content>\n          <Text variant=\"headlineSmall\">API Configuration</Text>\n          <InputField\n            control={control}\n            name=\"apiKey\"\n            label=\"API KEY\"\n          />\n\n          <InputField\n            control={control}\n            name=\"apiSecret\"\n            label=\"Api Secret\"\n          />\n\n          <InputField\n            control={control}\n            name=\"endpoint\"\n            label=\"Endpoint\"\n          />\n\n          <InputField\n            control={control}\n            name=\"bucket\"\n            label=\"Bucket\"\n          />\n\n          <InputField\n            control={control}\n            name=\"region\"\n            label=\"Region\"\n          />\n\n        </Card.Content>\n        <Card.Actions>\n          {/* eslint-disable-next-line */}\n          <Button onPress={handleSubmit(onSubmit)}>Submit</Button>\n        </Card.Actions>\n      </Card>\n      <View style={styles.snackBarContainer}>\n        <Snackbar\n          visible={visible}\n          onDismiss={onDismissSnackBar}\n          action={{\n            label: 'Dismiss',\n            onPress: () => {\n              // Do something\n            }\n          }}\n        >\n\n          Credentials are saved!\n\n        </Snackbar>\n      </View>\n    </KeyboardAvoidingView>\n  )\n}\n","import { SaveCredentialsForm } from '../SaveCredentialsForm'\nimport React from 'react'\n\nexport const ApiConfiguration: React.FC = () => {\n  return (\n    <SaveCredentialsForm />\n  )\n}\n","import { Asset, GetAssetArgs } from '../services/s3/types'\nimport { Asset as AppAssetType } from '../services/types'\nexport const S3TypeToInternalAdapter = (assets: Asset[], params: GetAssetArgs): AppAssetType[] => {\n  return assets.map((asset: Asset) => {\n    const fileName: string = asset.name.replace(params.Prefix, '')\n    const appAsset: AppAssetType = {\n      assetId: asset.etag,\n      fileName,\n      fileSize: asset.size,\n      updatedAt: asset.lastModified,\n      isFolder: asset.prefix?.length > 0,\n      prefix: asset.prefix\n    }\n    return appAsset\n  })\n}\n","import React from 'react'\n\nexport const ContextMenu: React.FC = () => {\n  /*\n  const [anchorEl] = React.useState<null | HTMLElement>(null)\n  const open = Boolean(anchorEl) */\n  /*\n  const _handleClick = (event: React.MouseEvent<HTMLElement>) => {\n    setAnchorEl(event.currentTarget);\n  };\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n  */\n\n  return (\n    <>\n    </>)\n}\n","import React from 'react'\nimport { ContextMenu } from '../ContextMenu'\nimport { createColumnHelper } from '@tanstack/react-table'\nimport { Asset } from '../../services/types'\nimport prettyBytes from 'pretty-bytes'\nimport dayjs from 'dayjs'\nimport relativeTime from 'dayjs/plugin/relativeTime'\nimport { MaterialIcons, Feather } from '@expo/vector-icons'\nimport { Platform, StyleSheet } from 'react-native'\n\ndayjs.extend(relativeTime)\n\nconst styles = StyleSheet.create({\n  icon: {\n    marginRight: '6px'\n  }\n})\n\n// icons for different file types or folders\nconst iconType = (asset: Asset): JSX.Element => {\n  const re = /(?:\\.([^.]+))?$/\n  const internalType = asset.isFolder\n    ? 'folder'\n    : re.exec(asset.fileName)[1] || ''\n  switch (internalType) {\n    case 'folder':\n      return (\n                <MaterialIcons\n                    name=\"folder\"\n                    color=\"#ffbd43\"\n                    size={24}\n                    style={styles.icon}\n                />\n      )\n    case 'txt':\n      return (\n                <Feather\n                    name=\"file-text\"\n                    color=\"#6565d6\"\n                    size={22}\n                    style={styles.icon}\n                />\n      )\n    default:\n      return (\n                <Feather\n                    name=\"file\"\n                    color=\"#6565d6\"\n                    size={22}\n                    style={styles.icon}\n                />\n      )\n  }\n}\n\nexport const DataGridColumns: any = () => {\n  const columnHelper = createColumnHelper<Asset>()\n  const columns: any = [\n    // Dispaly file name with icon\n    columnHelper.accessor('fileName', {\n      id: 'fileName',\n      header: 'Name',\n      cell: (info) => {\n        const row = info.row.original\n        const fileName = row.isFolder\n          ? info.getValue().slice(0, -1)\n          : info.getValue()\n        return (\n                    <>\n                        {iconType(row)} {fileName}\n                    </>\n        )\n      }\n    }),\n\n    // Display file size\n    columnHelper.accessor('fileSize', {\n      id: 'fileSize',\n      header: 'Size',\n      cell: (info) =>\n        !info.row.original.isFolder && prettyBytes(info.getValue())\n    }),\n\n    // Dispaly last modified\n    columnHelper.accessor('updatedAt', {\n      id: 'updatedAt',\n      header: 'Last Modified',\n      cell: (info) => {\n        return (\n          !info.row.original.isFolder &&\n                    dayjs(info.getValue()).fromNow()\n        )\n      }\n    }),\n\n    // Display column size\n    columnHelper.display({\n      id: 'actions',\n      cell: () => <ContextMenu />\n    })\n  ].filter((item) => {\n    return Platform.OS !== 'web' ? item.id === 'fileName' : true\n  })\n  return columns\n}\n","import React, { Fragment, useEffect } from 'react'\nimport {\n  flexRender,\n  getCoreRowModel,\n  getPaginationRowModel,\n  useReactTable\n} from '@tanstack/react-table'\nimport { DataTable, Text } from 'react-native-paper'\nimport { ScrollView, StyleSheet } from 'react-native'\nimport { DataGridColumns } from './dataGridColumns'\nimport { Asset } from '../../services/types'\n\nconst styles = StyleSheet.create({\n  cell: {\n    flexBasis: 'auto',\n    paddingRight: '30px'\n  },\n  cellFirstChild: {\n    flexBasis: '78%'\n  },\n  title: {\n    display: 'flex',\n    alignItems: 'center'\n  }\n})\n\nexport interface DataGridProps {\n  assets: Asset[] | undefined\n  onPress: (asset: Asset) => void\n}\n\nexport const DataGrid: (props: DataGridProps) => JSX.Element = ({\n  assets,\n  onPress\n}: DataGridProps) => {\n  const [data, setData] = React.useState<Asset[]>(() => assets || [])\n  useEffect(() => {\n    setData(assets || [])\n  }, [assets])\n  const table = useReactTable({\n    data,\n    columns: DataGridColumns(),\n    getCoreRowModel: getCoreRowModel(),\n    getPaginationRowModel: getPaginationRowModel()\n  })\n\n  useEffect(() => {\n    table.setPageSize(20)\n  }, [])\n\n  return (\n        <>\n            <DataTable.Header>\n                {table.getHeaderGroups().map((headerGroup) => (\n                    <Fragment key={headerGroup.id}>\n                        {headerGroup.headers.map((header) => (\n                            <DataTable.Title\n                                key={header.id}\n                                style={\n                                    index === 0\n                                      ? styles.cellFirstChild\n                                      : styles.cell\n                                }\n                            >\n                                <Text>\n                                    {header.isPlaceholder\n                                      ? null\n                                      : flexRender(\n                                        header.column.columnDef.header,\n                                        header.getContext()\n                                      )}\n                                </Text>\n                            </DataTable.Title>\n                        ))}\n                    </Fragment>\n                ))}\n            </DataTable.Header>\n            <ScrollView>\n                <DataTable>\n                    {table.getRowModel().rows.map((row) => (\n                        <DataTable.Row\n                            key={row.id}\n                            onPress={() => {\n                              onPress(row.original)\n                            }}\n                        >\n                            {row.getVisibleCells().map((cell) => (\n                                <DataTable.Cell\n                                    key={cell.id}\n                                    style={\n                                        index === 0\n                                          ? styles.cellFirstChild\n                                          : styles.cell\n                                    }\n                                >\n                                    <Text>\n                                        {flexRender(\n                                          cell.column.columnDef.cell,\n                                          cell.getContext()\n                                        )}\n                                    </Text>\n                                </DataTable.Cell>\n                            ))}\n                        </DataTable.Row>\n                    ))}\n                    <DataTable.Pagination\n                        page={table.getState().pagination.pageIndex + 1}\n                        numberOfPages={table.getPageCount()}\n                        onPageChange={(page) => table.setPageIndex(page - 1)}\n                        label={`${\n                            table.getState().pagination.pageIndex + 1\n                        } of ${table.getPageCount()}`}\n                    />\n                </DataTable>\n            </ScrollView>\n        </>\n  )\n}\n","import { View, StyleSheet, Text, Dimensions, EmitterSubscription } from 'react-native'\nimport React, { useState, useEffect } from 'react'\n\nexport type ScreenType =\n    | 'xs'\n    | 'sm'\n    | 'md'\n    | 'lg'\n    | 'xl'\n    | 'xxl'\n\nexport interface BlockType {\n  hidden?: ScreenType[]\n}\n\nconst getScreenType = (px: number): ScreenType => {\n  if (px < 576) {\n    return 'xs'\n  } else if (px >= 576 && px < 768) {\n    return 'md'\n  } else if (px >= 768 && px < 992) {\n    return 'lg'\n  } else if (px >= 992 && px < 1200) {\n    return 'xl'\n  } else if (px >= 1400) {\n    return 'xxl'\n  }\n}\n\nconst window = Dimensions.get('window')\nconst screen = Dimensions.get('screen')\nconst screenType: ScreenType = getScreenType(window.width)\nexport const Block = ({ hidden, children }: React.PropsWithChildren<BlockType>): JSX.Element => {\n  const [dimensions, setDimensions] = useState({ window, screen, screenType })\n  useEffect(() => {\n    const subscription: EmitterSubscription = Dimensions.addEventListener(\n      'change',\n      ({ window, screen }) => {\n        const screenType: ScreenType = getScreenType(window.width)\n        setDimensions({ window, screen, screenType })\n      }\n    )\n    return () => subscription?.remove()\n  }, [])\n\n  /**\n     * A simple function to debug the current dimensions\n     * @returns\n     */\n  // eslint-disable-next-line\n    const getDebug: React.FC = () => <>\n        <Text>Current type: {dimensions.screenType}</Text>\n        <Text style={styles.header}>Window Dimensions</Text>\n        {Object.entries(dimensions.window).map(([key, value]) => (\n            <Text key={key}>{key} - {value}</Text>\n        ))}\n        <Text style={styles.header}>Screen Dimensions</Text>\n        {Object.entries(dimensions.screen).map(([key, value]) => (\n            <Text key={key}>{key} - {value}</Text>\n        ))}\n    </>\n\n  const hideContent = hidden ? hidden.includes(dimensions.screenType) : false\n\n  return <>\n        {!hideContent && <View>\n            {children}\n        </View>}\n    </>\n}\n\nconst styles = StyleSheet.create({\n  header: {\n    fontSize: 16,\n    marginVertical: 10\n  }\n})\n","import React from 'react'\nimport { Alert, Modal, StyleSheet, Text, Pressable, View } from 'react-native'\n\nexport interface ModalProps {\n  isVisible: boolean\n  onClose: () => void\n}\n\nconst AppModal = ({\n  isVisible,\n  onClose,\n  children\n}: React.PropsWithChildren<ModalProps>): JSX.Element => {\n  return (\n        <View style={styles.centeredView}>\n            <Modal\n                animationType=\"slide\"\n                transparent={true}\n                visible={isVisible}\n                onRequestClose={() => {\n                  Alert.alert('Modal has been closed.')\n                  onClose()\n                }}\n            >\n                <View style={styles.centeredView}>\n                    <View style={styles.modalView}>\n                        {children}\n                        <Pressable\n                            style={[styles.button, styles.buttonClose]}\n                            onPress={() => onClose()}\n                        >\n                            <Text style={styles.textStyle}>Hide Modal</Text>\n                        </Pressable>\n                    </View>\n                </View>\n            </Modal>\n        </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  centeredView: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginTop: 22\n  },\n  modalView: {\n    margin: 20,\n    width: 200,\n    backgroundColor: 'white',\n    borderRadius: 20,\n    padding: 35,\n    alignItems: 'center',\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 2\n    },\n    shadowOpacity: 0.25,\n    shadowRadius: 4,\n    elevation: 5\n  },\n  button: {\n    borderRadius: 20,\n    padding: 10,\n    elevation: 2\n  },\n  buttonOpen: {\n    backgroundColor: '#F194FF'\n  },\n  buttonClose: {\n    backgroundColor: '#2196F3'\n  },\n  textStyle: {\n    color: 'white',\n    fontWeight: 'bold',\n    textAlign: 'center'\n  },\n  modalText: {\n    marginBottom: 15,\n    textAlign: 'center'\n  }\n})\n\nexport default AppModal\n","import React, { useContext, useEffect, useState } from 'react'\nimport { StyleSheet, View } from 'react-native'\nimport {\n  Text,\n  ActivityIndicator,\n  IconButton,\n  Card,\n  FAB\n} from 'react-native-paper'\nimport { Portal } from '@gorhom/portal'\nimport {\n  ApplicationContext,\n  ApplicationContextType\n} from '../../contexts/application/ApplicationContext'\nimport { useGetAssets } from '../../hooks/useGetAssets'\nimport { useS3Client } from '../../hooks/useS3Client'\nimport { DataGrid } from '../DataGrid'\n\nimport { Asset } from '../../services/types'\nimport { GetAssetArgs } from '../../services/s3/types'\nimport { Block } from '../../services/rn-responsive-design'\nimport AppModal from '../Modal'\n\nexport const ListAssets: React.FC = () => {\n  const [isExtended, setIsExtended] = React.useState(false)\n  const [rerun, setRerun] = useState('')\n  const [appState] = useContext<ApplicationContextType>(ApplicationContext)\n  const [s3client, s3Initialized] = useS3Client(appState)\n  const [dataQuery, setDataQuery] = useState<GetAssetArgs>({\n    Bucket: appState.s3credentials.bucket,\n    Prefix: '',\n    Delimiter: '/'\n  })\n  useEffect(() => {\n    setDataQuery({ ...dataQuery, Bucket: appState.s3credentials.bucket })\n  }, [appState, s3client])\n\n  const { data, isLoading, isError } = useGetAssets(\n    s3client,\n    s3Initialized,\n    dataQuery,\n    rerun\n  )\n\n  const setPrefix = (prefix: string): void => {\n    setDataQuery({ ...dataQuery, Prefix: prefix })\n  }\n  const onPress = (asset: Asset): void => {\n    if (asset.isFolder) {\n      setPrefix(asset.prefix)\n    }\n  }\n\n  const goBack: () => void = () => {\n    const prefix = dataQuery.Prefix\n    if (prefix !== '') {\n      const newPrefix = prefix.substring(\n        0,\n        prefix.substring(0, prefix.length - 1).lastIndexOf('/') + 1\n      )\n      setPrefix(newPrefix)\n    }\n  }\n  /* eslint-disable */\n    return (\n        <>\n            {s3Initialized ? (\n                <>\n                    <Portal hostName=\"Reloader\">\n                        <IconButton\n                            animated\n                            icon=\"reload\"\n                            onPress={() => {\n                                setRerun(`${Math.random()}`)\n                            }}\n                        />\n                    </Portal>\n                    <Portal hostName=\"Back\">\n                        {dataQuery.Prefix?.length > 0 && (\n                            <IconButton\n                                icon=\"arrow-left\"\n                                onPress={() => {\n                                    goBack()\n                                }}\n                            />\n                        )}\n                    </Portal>\n                    <View style={styles.root}>\n                        <View style={styles.section1}>\n                            <Text variant=\"bodyLarge\" style={styles.path}>\n                                {`Bucket Root /${dataQuery.Prefix}`}\n                            </Text>\n\n                            {isLoading && <ActivityIndicator animating />}\n                            {isError && (\n                                <Text variant=\"headlineSmall\">Error </Text>\n                            )}\n                            <AppModal\n                                isVisible={isExtended}\n                                onClose={() => {\n                                    setIsExtended(false)\n                                }}\n                            >\n                                <Text>Upload files here</Text>\n                            </AppModal>\n                            {data != null && !isLoading && (\n                                <DataGrid assets={data} onPress={onPress} />\n                            )}\n                            <FAB\n                                icon=\"plus\"\n                                onPress={() => setIsExtended(!isExtended)}\n                                visible\n                                style={[styles.fabStyle]}\n                            />\n  \n                        </View>\n                        <Block hidden={['xs', 'md']}>\n                            <View style={styles.section2}>\n                                <Text variant=\"bodyLarge\" style={styles.path}>\n                                    Preview pane\n                                </Text>\n                            </View>\n                        </Block>\n                    </View>\n                </>\n            ) : (\n                <Card style={styles.errorMessage}>\n                    <Text>\n                        S3 Client has not been initialized, please update your\n                        API Configuration first.\n                    </Text>\n                </Card>\n\n            )}\n        </>\n        /* eslint-enable */\n  )\n}\n\nconst styles = StyleSheet.create({\n  path: {\n    margin: 10\n  },\n  fabStyle: {\n    bottom: 45,\n    right: 25,\n    position: 'absolute'\n  },\n  errorMessage: {\n    margin: 12,\n    padding: 10\n  },\n  root: {\n    flexDirection: 'row',\n    display: 'flex',\n    flex: 1,\n    flexGrow: 1\n  },\n  section1: {\n    flex: 3,\n    borderColor: 'gray',\n    borderRightWidth: 2,\n    flexDirection: 'column'\n  },\n  section2: {\n    minWidth: '30vw',\n    flex: 1,\n    backgroundColor: 'skyblue',\n    flexGrow: 1\n  }\n})\n","import { S3Client } from '@aws-sdk/client-s3'\nimport { useMemo } from 'react'\nimport { ApplicationState } from '../contexts/application/ApplicationContext'\nimport { buildS3Client } from '../services/s3'\n\nexport const useS3Client: (appState: ApplicationState) => [S3Client | undefined, boolean] = (appState: ApplicationState) => {\n  const { s3credentials } = appState\n  const { apiKey, apiSecret, region, endpoint } = s3credentials\n  const [client, isInitialized] = useMemo(() => {\n    if (apiKey && apiSecret && endpoint) {\n      console.log('[useS3Client] Building S3 Client region = ', region)\n      console.log('[useS3Client] Building S3 Client apiKey = ', apiKey)\n\n      return [buildS3Client({\n        region,\n        credentials: {\n          accessKeyId: apiKey,\n          secretAccessKey: apiSecret\n        },\n        endpoint\n      }), true]\n    }\n    return [undefined, false]\n  }, [apiKey, apiSecret, region, endpoint])\n  return [client, isInitialized]\n}\n","import { S3Client } from '@aws-sdk/client-s3'\nimport { useQuery, UseQueryResult } from '@tanstack/react-query'\nimport { S3TypeToInternalAdapter } from '../adapters/s3'\nimport { getAssets } from '../services/s3'\nimport { GetAssetArgs } from '../services/s3/types'\nimport { Asset } from '../services/types'\n\nexport const useGetAssets = (client: S3Client, clientInitialized: boolean, params: GetAssetArgs, rerun: string = ''): UseQueryResult<Asset[], unknown> => {\n  const queryResponse = useQuery(['getAssets', rerun, params.Bucket || '', params.Delimiter || '', params.Prefix || ''], async () => {\n    try {\n      console.log('[useGetAssets] Getting data with params = ', params)\n      const data = await getAssets(client, params)\n      const assets = S3TypeToInternalAdapter(data, params)\n      console.log('[useGetAssets] Assets = ', assets)\n      return assets\n    } catch (error) {\n      console.log('[useGetAssets] Error : ', error)\n    }\n    return []\n  }, {\n    enabled: clientInitialized,\n    refetchOnWindowFocus: false\n  })\n  return queryResponse\n}\n","import React from 'react'\r\nimport { ListAssets } from '../../components/ListAssets'\r\n\r\nexport default function Dashboard (): JSX.Element {\r\n  return (\r\n    <ListAssets />\r\n  )\r\n}\r\n","import * as React from 'react'\nimport { BottomNavigation } from 'react-native-paper'\nimport { ApiConfiguration } from '../ApiConfiguration/index'\nimport Dashboard from '../../pages/dashboard'\n\nconst MobileNavigation: React.FC = () => {\n  const [index, setIndex] = React.useState(0)\n  const [routes] = React.useState([\n    { key: 'assets', title: 'Assets', focusedIcon: 'folder' },\n    { key: 'api_configuration', title: 'API Configuration', focusedIcon: 'cogs' }\n  ])\n\n  const renderScene = BottomNavigation.SceneMap({\n    assets: Dashboard,\n    api_configuration: ApiConfiguration\n  })\n\n  return (\n    <BottomNavigation\n      navigationState={{ index, routes }}\n      onIndexChange={setIndex}\n      renderScene={renderScene}\n    />\n  )\n}\n\nexport default MobileNavigation\n","import AsyncStorage from '@react-native-async-storage/async-storage'\nexport const ApplicationStorageKey = 'byos/application'\nexport const DomainStorageKey = 'byos/domain'\n\nconst storeData: (value: any) => Promise<void> = async (value: any) => {\n  try {\n    await AsyncStorage.setItem(ApplicationStorageKey, JSON.stringify(value))\n  } catch (e) {\n    // saving error\n  }\n}\n\nconst getData: () => Promise<string> = async () => {\n  try {\n    const value = await AsyncStorage.getItem(ApplicationStorageKey)\n    if (value !== null) {\n      // value previously stored\n      return value\n    }\n  } catch (e) {\n    // error reading value\n  }\n  return ''\n}\n\nconst parseJson: (jsonString: string) => any = (jsonString: string) => {\n  try {\n    return JSON.parse(jsonString)\n  } catch (error) {\n    return {}\n  }\n}\n\nexport const getApplicationStateLS: (defaultValue: string) => Promise<any> = async (defaultValue: string = '{}') => {\n  const value = await getData()\n  if (value) {\n    return parseJson(value)\n  }\n  return parseJson(defaultValue)\n}\n\n// eslint-disable-next-line @typescript-eslint/no-misused-promises\nexport const setApplicationStateLS: (value: Object) => void = async (value: any) => {\n  await storeData(value)\n  return null\n}\n","import { MD3LightTheme as DefaultTheme } from 'react-native-paper'\n\nexport const theme = {\n  ...DefaultTheme,\n  roundness: 2,\n  version: 3,\n  colors: {\n    ...DefaultTheme.colors,\n    primary: '#eeeeee',\n    secondary: '#112A46'\n  }\n}\n","import React, { useEffect, useState } from 'react'\r\n// import { HashRouter as Router, Routes, Route } from 'react-router-dom'\r\nimport { InternalRouteDef } from './routes'\r\n// import { Link } from 'react-router-dom'\r\nimport { RoutingContext } from './contexts/routing/RoutingContext'\r\nimport {\r\n  ApplicationContext,\r\n  initialData\r\n} from './contexts/application/ApplicationContext'\r\n/* import {\r\n    getApplicationStateLS,\r\n    setApplicationStateLS,\r\n} from './services/localstorage' */\r\nimport { Provider as PaperProvider } from 'react-native-paper'\r\nimport Header from './components/Header'\r\nimport MobileNavigation from './components/MobileNavigation'\r\nimport { setApplicationStateLS } from './services/localstorage'\r\nimport { useGetApplicationStateFromLs } from './hooks/useGetApplicationStateFromLS'\r\nimport { PortalProvider } from '@gorhom/portal'\r\nimport { theme } from './theme'\r\n\r\nfunction App (): JSX.Element {\r\n  const [routingState] = React.useContext(RoutingContext)\r\n  const { data: savedApplicationData, isLoaded } = useGetApplicationStateFromLs(initialData)\r\n\r\n  const applicationState = useState(savedApplicationData)\r\n\r\n  /* useEffect(() => {\r\n        applicationState[1](savedApplicationData);\r\n    }, [savedApplicationData]) */\r\n\r\n  const [applicationStateData, setApplicationStateData] = applicationState\r\n\r\n  useEffect(() => {\r\n    // setApplicationStateLS({ ...applicationStateData })\r\n    setApplicationStateData(savedApplicationData)\r\n  }, [savedApplicationData])\r\n\r\n  useEffect(() => {\r\n    if (isLoaded) {\r\n      console.log('[App] Application state was updated = ', applicationStateData)\r\n\r\n      setApplicationStateLS({ ...applicationStateData })\r\n    }\r\n  }, [applicationStateData, isLoaded])\r\n\r\n  return (\r\n    <PaperProvider theme={theme}>\r\n      <PortalProvider>\r\n        <ApplicationContext.Provider value={applicationState}>\r\n          {routingState.isReady &&\r\n            routingState.routes.map((route: InternalRouteDef) => {\r\n              return (\r\n                null\r\n              )\r\n            })}\r\n          <Header title=\"BYOS\" />\r\n          <MobileNavigation />\r\n\r\n        </ApplicationContext.Provider>\r\n      </PortalProvider>\r\n    </PaperProvider>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import { useMemo, useState } from 'react'\nimport { ApplicationState } from '../contexts/application/ApplicationContext'\nimport { getApplicationStateLS } from '../services/localstorage'\n\ninterface ApplicationStateHookReturn {\n  data: ApplicationState | undefined\n  isLoaded: boolean\n}\n\nexport const useGetApplicationStateFromLs = (initialData: ApplicationState | undefined): ApplicationStateHookReturn => {\n  const [d, setD] = useState<ApplicationState | undefined>(initialData)\n  const [isLoaded, setIsLoaded] = useState(false)\n  useMemo(() => {\n    getApplicationStateLS(\n      JSON.stringify(initialData)\n    ).then(data => {\n      setD(data)\n      setIsLoaded(true)\n    })\n      .catch(() => {\n        console.log('[useGetApplicationStateFromLs] Promise failure getApplicationStateLS')\n      })\n  }, [initialData])\n\n  return { data: d, isLoaded }\n}\n","import React from 'react'\r\nimport Home from '../pages/home'\r\nimport Credentials from '../pages/credentials'\r\n\r\nexport interface InternalRouteDef {\r\n  path: string\r\n  component: JSX.Element\r\n  showInNavigation: boolean\r\n\r\n}\r\n\r\nexport interface RoutingObjectDef {\r\n  isReady: boolean\r\n  routes: InternalRouteDef\r\n}\r\n\r\nconst routes: InternalRouteDef[] = [\r\n  { path: '/credentials', component: <Credentials />, showInNavigation: true },\r\n  { path: '/', component: <Home />, showInNavigation: true }\r\n]\r\n\r\nconst internalRoutes = {\r\n  isReady: false,\r\n  routes\r\n}\r\n\r\nexport default internalRoutes\n","import React from 'react'\r\n// import { useLinkClickHandler } from 'react-router-dom'\r\nimport { SaveCredentialsForm } from '../../components/SaveCredentialsForm'\r\n// import { useNavigate } from 'react-router-dom'\r\n\r\nexport default function Credentials (): JSX.Element {\r\n  // const [isOpen, setIsOpen] = useState(false)\r\n  // const navigate = useNavigate()\r\n  // const onClick = useLinkClickHandler('/credentials')\r\n  // useEffect(() => {\r\n  //     setIsOpen(true)\r\n  // }, [onClick, setIsOpen])\r\n\r\n  // const handleClose = () => {\r\n  //     setIsOpen(false)\r\n  //     navigate('/')\r\n  // }\r\n\r\n  return (\r\n    <>\r\n      <SaveCredentialsForm />\r\n    </>\r\n  )\r\n}\r\n","import React from 'react'\n\nexport default function Home (): JSX.Element {\n  return (\n    <>\n    </>\n  )\n}\n","import React, { useEffect } from 'react'\r\nimport { RoutingContext } from '../contexts/routing/RoutingContext'\r\n\r\nexport const BasicProvider: (children: any) => JSX.Element = ({ children }: React.PropsWithChildren) => {\r\n  const [routingState, setRoutingState] = React.useContext(RoutingContext)\r\n  useEffect(() => {\r\n    if (routingState.isReady === false) {\r\n      setRoutingState({ ...routingState, isReady: true })\r\n    }\r\n    // eslint-disable-next-line\r\n  }, [routingState.isReady, routingState.routes])\r\n  return <>\r\n    {children}\r\n  </>\r\n}\r\n","import React from 'react'\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query'\n\nconst queryClient = new QueryClient()\n\nexport default function QueryProvider ({ children }: React.PropsWithChildren): JSX.Element {\n  return (\n    <QueryClientProvider client={queryClient}>\n      {children}\n    </QueryClientProvider>\n  )\n}\n","import React, { useState } from 'react'\r\nimport { RoutingContext } from '../contexts/routing/RoutingContext'\r\nimport routes from '../routes'\r\nimport { BasicProvider } from './BasicProvider'\r\nimport QueryProvider from './QueryProvider'\r\n\r\nexport const Provider = ({ children }: React.PropsWithChildren): JSX.Element => {\r\n  const routingState = useState(routes)\r\n\r\n  /**\r\n       if (useAzureLogin) {\r\n          return <QueryProvider>\r\n              <RoutingContext.Provider value={routingState}>\r\n                  <AzureAdProvider >\r\n                      {children}\r\n                  </AzureAdProvider>\r\n              </RoutingContext.Provider>\r\n          </QueryProvider>\r\n      }else\r\n      { */\r\n  return (\r\n        <QueryProvider>\r\n            <RoutingContext.Provider value={routingState}>\r\n                <BasicProvider>\r\n                    {children}\r\n                </BasicProvider>\r\n            </RoutingContext.Provider>\r\n        </QueryProvider>)\r\n}\r\n","import React from 'react'\nimport BAap from './App'\nimport { Provider } from './providers/Provider'\n\nconst ExportApp: React.FC = () => {\n  return (\n    <Provider>\n      <BAap />\n    </Provider>\n  )\n}\n\nexport default ExportApp\n","import { StatusBar } from 'expo-status-bar';\nimport { StyleSheet, Text, View } from 'react-native';\nimport BYOSApp from \"./src/ExportApp\";\nimport { registerRootComponent } from 'expo';\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\nexport default function App() {\n  return (\n      <BYOSApp/>\n  );\n}\nregisterRootComponent(App);\n\n\n\n","import { registerRootComponent } from 'expo';\n\nimport App from './App';\n\n// registerRootComponent calls AppRegistry.registerComponent('main', () => App);\n// It also ensures that whether you load the app in Expo Go or in a native build,\n// the environment is set up appropriately\nregisterRootComponent(App);\n"],"sourceRoot":""}