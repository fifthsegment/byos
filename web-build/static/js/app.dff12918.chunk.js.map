{"version":3,"sources":["webpack:///./src/App.css?d9cd","src/App.css","src/contexts/routing/RoutingContext.ts","src/contexts/application/ApplicationContext.ts","src/services/s3/index.ts","src/components/ContextMenu/index.tsx","src/components/DataGrid/dataGridColumns.tsx","src/components/DataGrid/index.tsx","src/components/ListAssets/index.tsx","src/hooks/useGetAssets.ts","src/hooks/useS3Client.ts","src/adapters/s3.ts","src/pages/dashboard/index.tsx","src/App.tsx","src/services/localstorage/index.ts","src/client-config/index.ts","src/components/AppModal/index.tsx","src/components/Input/InputField.tsx","src/components/SaveCredentialsForm/index.tsx","src/routes/index.tsx","src/pages/credentials/index.tsx","src/pages/home/index.tsx","src/services/azure/config/index.ts","src/services/azure/components/buttons.tsx","src/services/azure/components/ProfileContent.tsx","src/services/azure/components/AzureLoginPage.tsx","src/providers/AzureAd.tsx","src/providers/BasicProvider.tsx","src/providers/QueryProvider.tsx","src/providers/Provider.tsx","src/ExportApp.tsx","App.js","index.js"],"names":["api","content","__esModule","default","module","i","options","exports","locals","___CSS_LOADER_API_IMPORT___","push","RoutingContext","createContext","Object","create","initialData","s3credentials","apiKey","undefined","apiSecret","region","endpoint","bucket","s3client","otherStuff","ApplicationContext","buildS3Client","initializationData","credentials","client","S3Client","middlewareStack","add","next","context","args","step","name","getAssets","params","command","ListObjectsCommand","send","Contents","map","item","etag","ETag","Key","lastModified","LastModified","size","Size","ContextMenu","React","useState","anchorEl","Boolean","dayjs","extend","relativeTime","iconType","icon","DataGridColumns","columnHelper","createColumnHelper","accessor","header","cell","info","row","original","fileType","getValue","prettyBytes","fromNow","display","id","DataGrid","assets","data","setData","useEffect","table","useReactTable","columns","getCoreRowModel","getHeaderGroups","headerGroup","headers","colSpan","isPlaceholder","flexRender","column","columnDef","getContext","getRowModel","rows","getVisibleCells","ListAssets","console","log","Platform","search","setSearch","useContext","appState","useMemo","accessKeyId","secretAccessKey","useS3Client","Bucket","Prefix","Delimiter","useQuery","asset","assetId","fileName","fileSize","updatedAt","S3TypeToInternalAdapter","error","isLoading","isError","type","onChange","e","target","value","placeholder","Dashboard","App","routingState","savedApplicationData","jsonString","localStorage","getItem","JSON","parse","getApplicationStateLS","stringify","applicationState","applicationStateData","setItem","Provider","isReady","routes","route","path","element","component","className","filter","showInNavigation","to","config","useAzureLogin","ViewVirtual","View","ButtonUntyped","Button","AppModal","children","handleClose","isOpen","style","marginTop","onPress","InternalInputField","TextInput","InputField","control","label","render","field","onBlur","SaveCredentialsForm","setAppState","useForm","defaultValues","handleSubmit","formState","saved","setSaved","flexDirection","alignItems","onSubmit","setTimeout","s3Client","internalRoutes","setIsOpen","navigate","useNavigate","onClick","useLinkClickHandler","loginRequest","scopes","SignOutButton","instance","useMsal","logoutPopup","catch","handleLogout","SignInButton","loginPopup","handleLogin","ProfileContent","accounts","accessToken","setAccessToken","idTokenClaims","given_name","request","account","acquireTokenSilent","then","response","acquireTokenPopup","AzureLoginPage","isAuthenticated","useIsAuthenticated","msalInstance","PublicClientApplication","auth","clientId","authority","redirectUri","knownAuthorities","cache","cacheLocation","storeAuthStateInCookie","AzureAdProvider","setRoutingState","BasicProvider","queryClient","QueryClient","QueryProvider","ExportApp","styles","StyleSheet","container","flex","backgroundColor","justifyContent","Text","StatusBar","registerRootComponent"],"mappings":"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","file":"static/js/app.dff12918.chunk.js","sourcesContent":["var api = require(\"!../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../node_modules/css-loader/dist/cjs.js!./App.css\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nmodule.exports = content.locals || {};","// Imports\nvar ___CSS_LOADER_API_IMPORT___ = require(\"../node_modules/css-loader/dist/runtime/api.js\");\nexports = ___CSS_LOADER_API_IMPORT___(false);\n// Module\nexports.push([module.id, \".remove-this-style-nav {\\r\\n    border-top: 1px solid gray;\\r\\n    margin-top: 1em;\\r\\n    margin-bottom: 1em;\\r\\n}\\r\\n\\r\\n.remove-this-style-nav ul li {\\r\\n    display: inline-block;\\r\\n    margin-left: 10px;\\r\\n}\", \"\"]);\n// Exports\nmodule.exports = exports;\n","import { createContext } from \"react\";\r\n\r\nexport const RoutingContext = createContext(Object.create(null));\r\n","/**\r\n * This context will hold all of our application data like the current\r\n * user's api Keys, currently viewed directory, etc\r\n */\r\n\r\nimport { S3Client } from '@aws-sdk/client-s3'\r\nimport React, { createContext } from 'react'\r\n\r\nexport type ApplicationState = {\r\n    s3credentials: {\r\n        apiKey: string | undefined\r\n        apiSecret: string | undefined\r\n        region: string | undefined\r\n        endpoint: string | undefined\r\n        bucket: string | undefined\r\n    }\r\n    otherStuff: string\r\n    s3client: S3Client | undefined\r\n}\r\n\r\nexport const initialData: ApplicationState = {\r\n    s3credentials: {\r\n        apiKey: undefined,\r\n        apiSecret: undefined,\r\n        region: undefined,\r\n        endpoint: undefined,\r\n        bucket: undefined,\r\n    },\r\n    s3client: undefined,\r\n    otherStuff: '',\r\n}\r\n\r\nexport type ApplicationContextType = [\r\n    ApplicationState,\r\n    React.Dispatch<React.SetStateAction<ApplicationState>>\r\n]\r\n\r\nexport const ApplicationContext = createContext<ApplicationContextType>(\r\n    Object.create(null)\r\n)\r\n","import { S3Client, ListObjectsCommand } from \"@aws-sdk/client-s3\";\r\nimport { S3Initializer, GetAssetArgs, Asset } from './types'\r\n\r\n\r\nexport const buildS3Client = (initializationData: S3Initializer) => {\r\n    const { credentials, region, endpoint } = initializationData\r\n    const client = new S3Client({\r\n        region: region,\r\n        credentials: credentials,\r\n        endpoint: endpoint,\r\n    })\r\n    client.middlewareStack.add((next, context) => async (args) => {\r\n        //args.request.headers[\"Custom-Header\"] = \"value\";\r\n        //eslint-disable-next-line\r\n        // @ts-ignore\r\n        //delete args.request.headers[\"amz-sdk-request\"];\r\n        // @ts-ignore\r\n        //delete args.request.headers[\"amz-sdk-invocation-id\"];//x-amz-content-sha256\r\n        // @ts-ignore\r\n        //delete args.request.headers[\"x-amz-content-sha256\"];\r\n        // @ts-ignore\r\n        //args.request.headers[\"date\"] = (new Date()).toUTCString();\r\n        // @ts-ignore\r\n        //delete args.request.headers[\"x-amz-date\"];\r\n        // @ts-ignore\r\n        //delete args.request.headers[\"x-amz-user-agent\"];\r\n        // @ts-ignore\r\n        const result = await next(args);\r\n        return result;\r\n    }, {\r\n        step: \"finalizeRequest\",\r\n        name: \"removeHeaders\",\r\n    })\r\n    return client\r\n}\r\n\r\nexport const getAssets: (\r\n    client: S3Client,\r\n    params: GetAssetArgs\r\n) => Promise<Asset[] | undefined> = async (client, params) => {\r\n    const command = new ListObjectsCommand(params)\r\n    const response = await client.send(command)\r\n    return response.Contents?.map((item) => {\r\n        return {\r\n            etag: item.ETag,\r\n            name: item?.Key,\r\n            lastModified: item?.LastModified,\r\n            size: item?.Size\r\n        } as Asset\r\n    }) || []\r\n}\r\n\r\nexport const deleteAsset: (assetId: string) => void = (_assetId) => {\r\n    /**\r\n     * Implementation here\r\n     */\r\n}\r\n","import React from \"react\";\n\nexport const ContextMenu = () => {\n  const [anchorEl] = React.useState<null | HTMLElement>(null);\n  const open = Boolean(anchorEl);\n  /*\n  const _handleClick = (event: React.MouseEvent<HTMLElement>) => {\n    setAnchorEl(event.currentTarget);\n  };\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n  */\n\n  return (\n    <>\n      <div>\n        Context Menu\n      </div>\n    </>)\n}\n","import { ContextMenu } from '../ContextMenu'\nimport { createColumnHelper } from '@tanstack/react-table'\nimport { Asset } from '../../services/types';\nimport prettyBytes from 'pretty-bytes';\n// @ts-ignore\nimport dayjs from 'dayjs';\nimport relativeTime from 'dayjs/plugin/relativeTime'\ndayjs.extend(relativeTime);\n\n//icons for different file types or folders\nconst iconType = (icon: string) => {\n    switch (icon) {\n        case \"folder\":\n            return null\n        case \"textFile\":\n            return null\n        default:\n            return null\n    }\n};\n\nexport const DataGridColumns = () => {\n    const columnHelper = createColumnHelper<Asset>()\n    const columns = [\n\n        // Dispaly file name with icon\n        columnHelper.accessor('fileName', {\n            header: \"Name\",\n            cell: info => {\n                return (<>{iconType(info.row.original.fileType)} {info.getValue()}</>)\n            }\n        }),\n\n        // Display file size\n        columnHelper.accessor('fileSize', {\n            header: 'Size',\n            cell: info => prettyBytes(info.getValue())\n        }),\n\n        //Dispaly last modified\n        columnHelper.accessor('updatedAt', {\n            header: 'Last Modified',\n            cell: info => {\n                return dayjs(info.getValue()).fromNow()\n            }\n        }),\n\n        //Display column size\n        columnHelper.display({\n            id: 'actions',\n            cell: () => <ContextMenu />,\n        }),\n    ]\n    return columns\n}\n","import React, { useEffect } from \"react\";\nimport { flexRender, getCoreRowModel, useReactTable, } from '@tanstack/react-table'\nimport { DataGridColumns } from \"./dataGridColumns\";\nimport { Asset } from \"../../services/types\";\n\nexport type DataGridProps = {\n  assets: Asset[] | undefined\n}\n\nexport const DataGrid = ({ assets }: DataGridProps) => {\n  const [data, setData] = React.useState(() => assets || [])\n  useEffect(() => {\n    setData(assets || []);\n  }, [assets])\n  const table = useReactTable({\n    data,\n    columns: DataGridColumns(),\n    getCoreRowModel: getCoreRowModel(),\n  })\n\n\n  return (\n    <table>\n      <thead>\n        {table.getHeaderGroups().map(headerGroup => (\n          <tr key={headerGroup.id}>\n            {headerGroup.headers.map(header => (\n              <th key={header.id} colSpan={header.colSpan}>\n                {header.isPlaceholder\n                  ? null\n                  : flexRender(\n                    header.column.columnDef.header,\n                    header.getContext()\n                  )}\n              </th>\n            ))}\n          </tr>\n        ))}\n      </thead>\n      <tbody>\n        {table.getRowModel().rows.map(row => {\n          return <tr key={row.id}>\n            {row.getVisibleCells().map(cell => (\n              <td key={cell.id}>\n                {flexRender(cell.column.columnDef.cell, cell.getContext())}\n              </td>\n            ))}\n          </tr>\n        })}\n      </tbody>\n    </table>\n  );\n}","import React, { useContext, useState } from 'react'\nimport {\n    ApplicationContext,\n    ApplicationContextType,\n} from '../../contexts/application/ApplicationContext'\nimport { useGetAssets } from '../../hooks/useGetAssets'\nimport { useS3Client } from '../../hooks/useS3Client';\nimport { DataGrid } from '../DataGrid';\nimport { Platform } from 'react-native';\n\nexport const ListAssets = () => {\n    console.log(\"Platform = \", Platform);\n    const [search, setSearch] = useState(\"\");\n    const [appState] = useContext<ApplicationContextType>(ApplicationContext)\n    const s3client = useS3Client(appState);\n    const { data, isLoading, isError } = useGetAssets(s3client, {\n        Bucket: appState.s3credentials.bucket,\n        //Delimiter: search.length > 0 && \"/\",\n        Prefix: `${search}`,\n        //Prefix: \"\",\n        Delimiter: \"/\"\n    });\n\n\n    return <div>\n        <input type=\"text\" onChange={(e) => { setSearch(e.target.value) }} value={search} placeholder=\"Prefix search...\" />\n        <div>\n            Example prefix based search : \"non-empty-folder/\"\n        </div>\n        <br />\n        Results:\n        {isError && \"Error Fetching Data\"}\n        {isLoading && <>Loading</>}\n        {isError === false && <DataGrid assets={data} />}\n    </div>\n}\n","import { S3Client } from '@aws-sdk/client-s3';\nimport { useQuery } from '@tanstack/react-query'\nimport { S3TypeToInternalAdapter } from '../adapters/s3';\nimport { getAssets } from '../services/s3';\nimport { GetAssetArgs } from '../services/s3/types';\n\nexport const useGetAssets = (client: S3Client, params: GetAssetArgs) => {\n    const queryResponse = useQuery(['getAssets', params.Bucket || \"\", params.Delimiter || \"\", params.Prefix || \"\"], async () => {\n        try {\n            const data = await getAssets(client, params)\n            const assets = S3TypeToInternalAdapter(data);\n            return assets;\n        } catch (error) {\n            console.log(\"[useGetAssets] Error : \", error)\n        }\n        return []\n    })\n    return queryResponse;\n}\n","import { S3Client } from \"@aws-sdk/client-s3\";\nimport { useMemo } from \"react\"\nimport { ApplicationState } from \"../contexts/application/ApplicationContext\";\nimport { buildS3Client } from \"../services/s3\";\n\nexport const useS3Client: (appState: ApplicationState) => S3Client | undefined = (appState: ApplicationState) => {\n    const { s3credentials } = appState;\n    const { apiKey, apiSecret, region, endpoint } = s3credentials;\n    const client = useMemo(() => {\n        if (apiKey && apiSecret && endpoint) {\n            return buildS3Client({\n                region,\n                credentials: {\n                    accessKeyId: apiKey,\n                    secretAccessKey: apiSecret\n                },\n                endpoint\n            })\n        }\n    }, [apiKey, apiSecret, region, endpoint])\n    return client;\n}","import { Asset } from \"../services/s3/types\";\nimport { Asset as AppAssetType } from \"../services/types\"\nexport const S3TypeToInternalAdapter = (assets: Asset[]) => {\n    return assets.map((asset: Asset) => {\n        return {\n            assetId: asset.etag,\n            fileName: asset.name,\n            fileSize: asset.size,\n            updatedAt: asset.lastModified\n        } as AppAssetType\n    })\n}","import React from 'react'\r\nimport { ListAssets } from '../../components/ListAssets'\r\n\r\nexport default function Dashboard() {\r\n    return (\r\n        <div>\r\n            Dashboard\r\n            <ListAssets />\r\n\r\n        </div>\r\n    )\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\nimport './App.css'\r\n\r\nimport { HashRouter as Router, Routes, Route } from 'react-router-dom'\r\nimport { InternalRouteDef } from './routes'\r\nimport { Link } from 'react-router-dom'\r\nimport { RoutingContext } from './contexts/routing/RoutingContext'\r\nimport {\r\n    ApplicationContext,\r\n    ApplicationState,\r\n    initialData,\r\n} from './contexts/application/ApplicationContext'\r\nimport {\r\n    getApplicationStateLS,\r\n    setApplicationStateLS,\r\n} from './services/localstorage'\r\nimport Dashboard from './pages/dashboard'\r\n\r\nfunction App() {\r\n    const [routingState] = React.useContext(RoutingContext)\r\n    const savedApplicationData = getApplicationStateLS(\r\n        JSON.stringify(initialData)\r\n    )\r\n    const applicationState = useState(savedApplicationData as ApplicationState)\r\n    const [applicationStateData] = applicationState\r\n\r\n    useEffect(() => {\r\n        setApplicationStateLS({ ...applicationStateData })\r\n    }, [applicationStateData])\r\n\r\n    return (\r\n        <ApplicationContext.Provider value={applicationState}>\r\n            <Router>\r\n                <Routes>\r\n                    {routingState.isReady &&\r\n                        routingState.routes.map((route: InternalRouteDef) => {\r\n                            return (\r\n                                <Route\r\n                                    key={route.path}\r\n                                    path={route.path}\r\n                                    element={route.component}\r\n                                />\r\n                            )\r\n                        })}\r\n                </Routes>\r\n                <Dashboard />\r\n                <nav className=\"remove-this-style-nav\">\r\n                    <ul>\r\n                        {routingState.routes\r\n                            .filter((route: InternalRouteDef) => route.showInNavigation)\r\n                            .map((route: InternalRouteDef) => {\r\n                                return (\r\n                                    <li key={route.path}>\r\n                                        <Link key={route.path} to={route.path}>\r\n                                            {route.path}\r\n                                        </Link>\r\n                                    </li>\r\n                                )\r\n                            })}\r\n                    </ul>\r\n                </nav>\r\n            </Router>\r\n        </ApplicationContext.Provider>\r\n    )\r\n}\r\n\r\nexport default App\r\n","export const ApplicationStorageKey = 'byos/application'\nexport const DomainStorageKey = 'byos/domain'\n\nexport const getApplicationStateLS = (jsonString: string = '{}') => {\n    const value = localStorage.getItem(ApplicationStorageKey)\n    if (value) {\n        return JSON.parse(value)\n    }\n    return JSON.parse(jsonString)\n}\n\nexport const setApplicationStateLS = (value: any) => {\n    return localStorage.setItem(ApplicationStorageKey, JSON.stringify(value))\n}\n\nexport const getDomainStateLS = () => {\n    const value = localStorage.getItem(DomainStorageKey) || '{}'\n    return JSON.parse(value)\n}\n\nexport const setDomainStateLS = (value: any) => {\n    return localStorage.setItem(DomainStorageKey, JSON.stringify(value))\n}\n","const config = {\r\n    useAzureLogin: false\r\n};\r\n\r\nexport default config; ","import React, { PropsWithChildren } from 'react'\nimport { Button } from 'react-native-paper';\nimport { View } from 'react-native';\n\nconst style = {\n    position: 'absolute' as 'absolute',\n    top: '50%',\n    left: '50%',\n    transform: 'translate(-50%, -50%)',\n    width: 400,\n    bgcolor: 'background.paper',\n    boxShadow: 24,\n    p: 4,\n}\n\nexport type AppModalProps = {\n    isOpen: boolean\n    handleClose: () => void\n}\n\n// @ts-ignore\nconst ViewVirtual = (...args) => <View {...args[0]} />\n\n// @ts-ignore\nconst ButtonUntyped = (...args) => <Button {...args[0]} />\n\nexport function AppModal({ children, isOpen, handleClose }: PropsWithChildren<AppModalProps>) {\n    const containerStyle = { backgroundColor: 'white', padding: 20 };\n    return (\n        <ViewVirtual style={{ marginTop: 100 }}>\n            <ButtonUntyped onPress={() => handleClose()}>Close</ButtonUntyped>\n            {children}\n        </ViewVirtual>\n    )\n}\n","import { Controller } from 'react-hook-form';\nimport { TextInput } from 'react-native-paper';\n\n\nexport const InternalInputField = (...args) => {\n    // @ts-ignore\n    return <TextInput\n        {...args[0]}\n    />\n}\n\nexport const InputField = ({ control, name, label }: any) => {\n    if (control === undefined) {\n        return null;\n    }\n    return <>\n        <Controller\n            control={control}\n            name={name}\n            render={({ field: { value, onChange, onBlur } }: any) => {\n                console.log(\"Field value = \", value)\n                return <InternalInputField\n                    name={name}\n                    label={label}\n                    value={value}\n                    onChange={onChange}\n                    onBlur={onBlur}\n                />\n            }}\n        />\n    </>\n}","import React, { useContext, useState } from 'react'\nimport { FieldValues, useForm } from 'react-hook-form'\nimport { ApplicationContext } from '../../contexts/application/ApplicationContext'\nimport { buildS3Client, getAssets } from '../../services/s3'\nimport { Text as Typography } from 'react-native-paper';\nimport { InputField } from '../Input/InputField'\nimport { Button } from '../Button'\n\n\n\nexport const SaveCredentialsForm = () => {\n    const [appState, setAppState] = useContext(ApplicationContext)\n    const { s3credentials } = appState\n    const { control, handleSubmit, formState } = useForm({\n        defaultValues: s3credentials,\n    })\n\n    const [saved, setSaved] = useState(false)\n\n    const onSubmit = (data: FieldValues) => {\n        console.log(\"FormData = \", data)\n        setAppState({\n            ...appState,\n            s3credentials: data as any,\n            s3client: undefined,\n        })\n        setSaved(true)\n        setTimeout(() => {\n            setSaved(false)\n        }, 1000)\n        /**\n         * Build the s3 client here\n         */\n        const s3Client = buildS3Client({\n            credentials: {\n                accessKeyId: data.apiKey,\n                secretAccessKey: data.apiSecret,\n            },\n            region: data.region,\n            endpoint: data.endpoint,\n        })\n        getAssets(s3Client, { Bucket: \"testinghumza\" })\n    }\n\n    const [text, setText] = React.useState(\"\");\n    return (\n        <div\n            style={{\n                display: 'flex',\n                flexDirection: 'column',\n                alignItems: 'center',\n            }}\n        >\n\n            <Typography >\n                Api Credentials\n            </Typography>\n            <form onSubmit={handleSubmit(onSubmit)}>\n                <InputField\n                    control={control}\n                    name=\"apiKey\"\n                    label=\"API KEY\"\n                />\n                <InputField\n                    control={control}\n                    name=\"apiSecret\"\n                    label=\"Api Secret\"\n                />\n                <InputField\n                    control={control}\n                    name=\"endpoint\"\n                    label=\"Endpoint\"\n                />\n\n                <InputField\n                    control={control}\n                    name=\"bucket\"\n                    label=\"Bucket\"\n                />\n\n                <InputField\n                    control={control}\n                    name=\"region\"\n                    label=\"Region\"\n                />\n\n\n                <input type=\"submit\" />\n\n\n                {saved && <div>Credentials are saved!</div>}\n\n            </form>\n        </div>\n    )\n}\n","import React from \"react\";\r\nimport Home from \"../pages/home\";\r\nimport Credentials from \"../pages/credentials\";\r\n\r\nexport type InternalRouteDef = {\r\n    path: string;\r\n    component: JSX.Element;\r\n    showInNavigation: boolean;\r\n\r\n};\r\n\r\nexport type RoutingObjectDef = {\r\n    isReady: boolean;\r\n    routes: InternalRouteDef;\r\n}\r\n\r\nconst routes: InternalRouteDef[] = [\r\n    { path: \"/credentials\", component: <Credentials />, showInNavigation: true },\r\n    { path: \"/\", component: <Home />, showInNavigation: true }\r\n]\r\n\r\nconst internalRoutes = {\r\n    isReady: false,\r\n    routes: routes\r\n};\r\n\r\nexport default internalRoutes","import React, { useEffect, useState } from 'react'\r\nimport { useLinkClickHandler } from 'react-router-dom'\r\nimport { AppModal } from '../../components/AppModal'\r\nimport { SaveCredentialsForm } from '../../components/SaveCredentialsForm'\r\nimport { useNavigate } from 'react-router-dom'\r\n\r\nexport default function Credentials() {\r\n    const [isOpen, setIsOpen] = useState(false)\r\n    const navigate = useNavigate()\r\n    const onClick = useLinkClickHandler('/credentials')\r\n    useEffect(() => {\r\n        setIsOpen(true)\r\n    }, [onClick, setIsOpen])\r\n\r\n    const handleClose = () => {\r\n        setIsOpen(false)\r\n        navigate('/')\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <AppModal isOpen={isOpen} handleClose={handleClose}>\r\n                <SaveCredentialsForm />\r\n            </AppModal>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\n\nexport default function Home() {\n    return (\n        <>\n        </>\n    )\n}\n","export const msalConfig = {\r\n  auth: {\r\n    clientId: \"1308c1b6-585b-4b12-ba62-7cfd2790849f\",\r\n    //authority:\"https://login.microsoftonline.com/45155b2d-22e5-40e1-9ca6-cf423ef564be\",\r\n    authority: \"https://byo5.b2clogin.com/byo5.onmicrosoft.com/B2C_1_test1\",\r\n    // eslint-disable-next-line\r\n    redirectUri: '',\r\n    //redirectUri: \"http://localhost:3000/dashboard\",\r\n    knownAuthorities: [\"byo5.b2clogin.com\"],\r\n  },\r\n  cache: {\r\n    cacheLocation: \"sessionStorage\", // This configures where your cache will be stored\r\n    storeAuthStateInCookie: false, // Set this to \"true\" if you are having issues on IE11 or Edge\r\n  },\r\n};\r\n\r\n// Add here scopes for id token to be used at MS Identity Platform endpoints.\r\nexport const loginRequest = {\r\n  scopes: [\"openid\", \"offline_access\"],\r\n};\r\n\r\nexport const graphConfig = {\r\n  graphMeEndpoint: \"https://graph.microsoft.com/v1.0/me\",\r\n};\r\n\r\n//set value to false to disable login and integration with azure sso\r\nexport const isEnabled = true;\r\n\r\n","import React from \"react\";\r\nimport { useMsal } from \"@azure/msal-react\";\r\nimport { loginRequest } from \"../config\";\r\n\r\nfunction handleLogout(instance: any) {\r\n  instance.logoutPopup().catch((e: Error) => {\r\n    console.error(e);\r\n  });\r\n}\r\n\r\n/**\r\n * Renders a button which, when selected, will open a popup for logout\r\n */\r\nexport const SignOutButton = () => {\r\n  const { instance } = useMsal();\r\n\r\n  return <button onClick={() => handleLogout(instance)}>Sign out</button>;\r\n};\r\n\r\n\r\nfunction handleLogin(instance: any) {\r\n  instance.loginPopup(loginRequest).catch((e: Error) => {\r\n    console.error(e);\r\n  });\r\n}\r\n\r\n/**\r\n * Renders a button which, when selected, will open a popup for login\r\n */\r\nexport const SignInButton = () => {\r\n  const { instance } = useMsal();\r\n\r\n  return <button onClick={() => handleLogin(instance)}>Sign in</button>;\r\n};","import React, { useState } from \"react\";\r\nimport { useMsal } from \"@azure/msal-react\";\r\nimport { loginRequest } from \"../config\";\r\n\r\nexport default function ProfileContent() {\r\n  const { instance, accounts } = useMsal();\r\n  const [accessToken, setAccessToken] = useState<string | null>(null);\r\n\r\n  const name = accounts[0] && accounts[0]?.idTokenClaims?.given_name;\r\n\r\n  function RequestAccessToken() {\r\n    const request = {\r\n      ...loginRequest,\r\n      account: accounts[0],\r\n    };\r\n\r\n    // Silently acquires an access token which is then attached to a request for Microsoft Graph data\r\n    instance\r\n      .acquireTokenSilent(request)\r\n      .then((response:any) => {\r\n        setAccessToken(response.accessToken);\r\n      })\r\n      .catch((e: Error) => {\r\n        instance.acquireTokenPopup(request).then((response:any) => {\r\n          setAccessToken(response.accessToken);\r\n        });\r\n      });\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h5>Welcome  <>{name}</></h5>\r\n      {accessToken ? (\r\n        <p>Access Token Acquired!</p>\r\n      ) : (\r\n        <button onClick={RequestAccessToken}>Request Access Token</button>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { useIsAuthenticated } from \"@azure/msal-react\";\r\nimport { SignInButton, SignOutButton } from \"./buttons\";\r\nimport ProfileContent from \"./ProfileContent\";\r\n\r\n\r\nexport default function AzureLoginPage() {\r\n  const isAuthenticated = useIsAuthenticated();\r\n  return (\r\n    <div>\r\n      <h5>Azure Login</h5>\r\n      {isAuthenticated ? (\r\n        <span>You are singed in</span>\r\n      ) : (\r\n        <span>You are singed out</span>\r\n      )}\r\n      <br></br>\r\n      {isAuthenticated ? <SignOutButton /> : <SignInButton />}\r\n      {isAuthenticated && <ProfileContent />}\r\n    </div>\r\n  );\r\n}\r\n","import { PublicClientApplication } from \"@azure/msal-browser\";\r\nimport { MsalProvider } from \"@azure/msal-react\";\r\nimport React, { useEffect } from \"react\";\r\nimport { RoutingContext } from \"../contexts/routing/RoutingContext\";\r\nimport { InternalRouteDef } from \"../routes\";\r\nimport AzureLoginPage from \"../services/azure/components/AzureLoginPage\";\r\nimport { msalConfig } from \"../services/azure/config\";\r\n\r\nconst msalInstance = new PublicClientApplication(msalConfig);\r\n\r\nexport const AzureAdProvider = ({children}: React.PropsWithChildren) => {\r\n  const [routingState, setRoutingState] = React.useContext(RoutingContext);  \r\n  useEffect(() => {\r\n      if (routingState.isReady === false) {\r\n          setRoutingState({routes:routingState.routes.map((route: InternalRouteDef) => {\r\n            if (route.path === \"/login\") {\r\n              return {...route, component: <AzureLoginPage/> }\r\n            }\r\n            return route;\r\n          }), isReady: true});\r\n      }\r\n      // eslint-disable-next-line\r\n  }, [routingState.isReady, routingState.routes])\r\n    return <MsalProvider instance={msalInstance}>\r\n      {children}\r\n    </MsalProvider>\r\n}","import React, { useEffect } from \"react\";\r\nimport { RoutingContext } from \"../contexts/routing/RoutingContext\";\r\n\r\nexport const BasicProvider = ({children} : React.PropsWithChildren) => {\r\n    const [routingState, setRoutingState] = React.useContext(RoutingContext);  \r\n    useEffect(() => {\r\n        if (routingState.isReady === false) {\r\n            setRoutingState({...routingState, isReady: true});\r\n        }\r\n        // eslint-disable-next-line\r\n    }, [routingState.isReady, routingState.routes])\r\n    return <>\r\n        {children}\r\n    </>\r\n}","import { QueryClient, QueryClientProvider } from '@tanstack/react-query'\n\nconst queryClient = new QueryClient()\n\nexport default function QueryProvider({ children }: React.PropsWithChildren) {\n    return (\n        <QueryClientProvider client={queryClient}>\n            {children}\n        </QueryClientProvider>\n    )\n}\n\n","import React, { useState } from \"react\"\r\nimport config from '../client-config'\r\nimport { RoutingContext } from \"../contexts/routing/RoutingContext\";\r\nimport routes from \"../routes\";\r\nimport { AzureAdProvider } from \"./AzureAd\";\r\nimport { BasicProvider } from \"./BasicProvider\";\r\nimport QueryProvider from \"./QueryProvider\";\r\nimport { Provider as PaperProvider } from \"react-native-paper\";\r\n\r\nexport const Provider = ({ children }: React.PropsWithChildren) => {\r\n    const { useAzureLogin } = config;\r\n    const routingState = useState(routes);\r\n    if (useAzureLogin) {\r\n        return <QueryProvider>\r\n            <RoutingContext.Provider value={routingState}>\r\n                <AzureAdProvider >\r\n                    {children}\r\n                </AzureAdProvider>\r\n            </RoutingContext.Provider>\r\n        </QueryProvider>\r\n    }\r\n    return <QueryProvider>\r\n        <RoutingContext.Provider value={routingState}>\r\n            <BasicProvider>\r\n                {children}\r\n            </BasicProvider>\r\n        </RoutingContext.Provider>\r\n    </QueryProvider>\r\n}","import BApp from \"./App\"\nimport { Provider } from \"./providers/Provider\";\n\nconst ExportApp = () => {\n    return <Provider>\n        Hello\n        <BApp />\n    </Provider>\n}\n\nexport default ExportApp","import { StatusBar } from 'expo-status-bar';\nimport { StyleSheet, Text, View } from 'react-native';\nimport BYOSApp from \"./src/ExportApp\";\nimport { registerRootComponent } from 'expo';\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <Text>Open up App.js to start working on your app!</Text>\n      <BYOSApp />\n      <StatusBar style=\"auto\" />\n    </View>\n  );\n}\nregisterRootComponent(App);\n\n\n\n","import { registerRootComponent } from 'expo';\n\nimport App from './App';\n\n// registerRootComponent calls AppRegistry.registerComponent('main', () => App);\n// It also ensures that whether you load the app in Expo Go or in a native build,\n// the environment is set up appropriately\nregisterRootComponent(App);\n"],"sourceRoot":""}