{"version":3,"sources":["src/contexts/application/ApplicationContext.ts","src/services/s3/index.ts","src/adapters/backblaze.ts","src/components/Input/InputField.tsx","src/services/backblaze/backblaze.ts","src/components/SaveCredentialsForm/index.tsx","src/components/ApiConfiguration/index.tsx","src/adapters/s3.ts","src/hooks/useS3Client.ts","src/components/ContextMenu/index.tsx","src/services/file-icon-service/index.ts","src/components/DataTable/dataTableColumns.tsx","src/components/DataTable/index.tsx","src/components/Modal/index.tsx","src/components/TextLink.tsx","src/services/rn-responsive-design/components/Block.tsx","src/contexts/theme/ThemeContextInternal.ts","src/services/cross-service-storage/cross-service-storage.ts","src/components/Preview/index.tsx","src/components/GridItemPreview/ImagePreview.tsx","src/components/GridItemPreview/FilePreview.tsx","src/components/GridItemPreview/index.tsx","src/components/DataGrid/index.tsx","src/components/ListAssets/index.tsx","src/hooks/useGetAssets.ts","src/pages/dashboard/index.tsx","src/components/Header/index.tsx","src/components/MobileView/index.tsx","src/services/localstorage/index.ts","src/pages/credentials/index.tsx","src/theme/index.ts","src/App.tsx","src/hooks/useGetApplicationStateFromLS.ts","src/contexts/routing/RoutingContext.ts","src/routes/index.tsx","src/pages/home/index.tsx","src/providers/BasicProvider.tsx","src/providers/QueryProvider.tsx","src/providers/Provider.tsx","src/ExportApp.tsx","App.js","index.js"],"names":["initialData","s3credentials","apiKey","undefined","apiSecret","region","endpoint","bucket","backblaze","authorizationToken","downloadUrl","s3ApiUrl","s3client","otherStuff","mutatedAt","ApplicationContext","createContext","Object","create","getSignedUrl","require","buildS3Client","initializationData","credentials","client","S3Client","middlewareStack","add","next","context","args","step","name","getAssets","params","command","ListObjectsCommand","response","send","folders","CommonPrefixes","map","item","prefix","Prefix","etag","lastModified","size","key","files","Contents","ETag","Key","LastModified","Size","updateAsset","data","CopyObjectCommand","console","log","err","deleteAsset","DeleteObjectCommand","getAsset","GetObjectCommand","getDownloadLink","s3Client","expiresIn","BackblazeB2AuthToLocalAdapter","config","request","headers","path","hostname","protocol","fetch","Bucket","then","Promise","_resolve","reject","Error","error","backblazeData","updatedAt","Date","styles","StyleSheet","textInput","marginTop","InputField","control","label","render","field","value","onChange","onBlur","TextInput","onChangeText","text","style","getAuthorizationToken","secret","btoa","authorizeAccount","axios","method","url","getBaseUrl","Accept","Authorization","isBackblaze","bucketId","fileNamePrefix","validDurationInSeconds","toLowerCase","includes","SaveCredentialsForm","useContext","appState","setAppState","useForm","defaultValues","handleSubmit","getValues","reset","useEffect","useState","setSaved","onSubmit","onToggleSnackBar","token","setTimeout","accessKeyId","secretAccessKey","catch","React","visible","setVisible","container","flex","inner","padding","justifyContent","header","fontSize","marginBottom","height","borderColor","borderBottomWidth","snackBarContainer","KeyboardAvoidingView","behavior","Platform","OS","Card","Content","Text","variant","Actions","Button","onPress","View","Snackbar","onDismiss","action","ApiConfiguration","S3TypeToInternalAdapter","assets","asset","fileName","replace","assetId","fileSize","isFolder","length","useS3Client","useMemo","ContextMenu","fileToIcon","fileExt","dayjs","extend","relativeTime","icon","filename","iconType","internalType","exec","fileExtension","split","pop","Feather","color","DataGridColumns","columnHelper","createColumnHelper","accessor","id","cell","info","row","original","getValue","slice","prettyBytes","fromNow","display","filter","tableHead","sorterIcon","marginLeft","flexBasis","paddingRight","cellFirstChild","title","alignItems","DataTable","isLoading","setData","sorting","setSorting","currentPage","setCurrentPage","table","useReactTable","columns","state","onSortingChange","getCoreRowModel","getSortedRowModel","getPaginationRowModel","setPageSize","Header","getHeaderGroups","headerGroup","index","Title","isPlaceholder","onClick","column","getToggleSortingHandler","flexRender","columnDef","getContext","asc","AntDesign","desc","getIsSorted","ScrollView","onScroll","layoutMeasurement","contentOffset","contentSize","y","isCloseToBottom","nativeEvent","ActivityIndicator","animating","getRowModel","rows","Row","getVisibleCells","Cell","Pagination","page","getState","pagination","pageIndex","numberOfPages","getPageCount","onPageChange","setPageIndex","centeredView","modalView","margin","width","backgroundColor","borderRadius","shadowColor","shadowOffset","shadowOpacity","shadowRadius","elevation","button","buttonOpen","buttonClose","textStyle","fontWeight","textAlign","modalText","AppModal","isVisible","onClose","children","Modal","animationType","transparent","onRequestClose","Alert","alert","Pressable","TextLink","isUnderlined","underline","textDecorationLine","getScreenType","px","window","Dimensions","get","screen","screenType","Block","hidden","dimensions","setDimensions","subscription","addEventListener","remove","hideContent","ThemeContextInternal","marginVertical","getDownloadLinkByKey","dllink","resolve","S3GetDownloadUrl","Preview","theme","isEditing","setIsEditing","setUpdateAsset","setText","handleSave","s3UpdateAsset","CopySource","handleDelete","deleteParams","handleDownload","link","a","document","createElement","href","download","body","appendChild","click","main","IconButton","closeButton","section2","centered","textCenter","horizontal","flexGrow","flexDirection","minWidth","imageExtensions","GridItemImagePreview","s3Initialized","d","setD","setError","loaded","setLoaded","setShowPreview","isImage","fileIcon","loadImage","stream","Body","Response","blob","blobIn","fileReaderInstance","FileReader","readAsDataURL","onload","base64","result","TouchableOpacity","Image","source","uri","toString","preview","errorIcon","wrapper","bottom","GridItemFilePreview","GridItemPreview","marginHorizontal","overflow","columnWrapperStyle","DataGrid","items","flatRows","FlatList","numColumns","renderItem","keyExtractor","ListAssets","selectedAsset","setSelectedAsset","isExtended","setIsExtended","rerun","setRerun","isTableView","setIsTableView","Delimiter","dataQuery","setDataQuery","clientInitialized","queryResponse","useQuery","enabled","refetchOnWindowFocus","useGetAssets","isError","setPrefix","dirPathArray","dirPath","isLastFragment","newPrefix","join","goToPrefixByIndex","Ionicons","hostName","animated","Math","random","substring","lastIndexOf","goBack","root","section1","actionBarContainer","buttonGroup","ToggleButton","status","FAB","fabStyle","errorMessage","right","position","borderRightWidth","Dashboard","props","Appbar","mode","elevated","MobileNavigation","setIndex","focusedIcon","routes","renderScene","BottomNavigation","SceneMap","api_configuration","navigationState","onIndexChange","storeData","AsyncStorage","setItem","JSON","stringify","e","getData","getItem","parseJson","jsonString","parse","getApplicationStateLS","defaultValue","setApplicationStateLS","Credentials","DefaultTheme","roundness","version","colors","Stack","createNativeStackNavigator","ButtonsWrapper","border","borderStyle","ThemeProvider","App","themeState","isLoaded","setIsLoaded","useGetApplicationStateFromLs","savedApplicationData","applicationState","applicationStateData","setApplicationStateData","navigationButtons","navigation","headerTitle","headerRight","navigate","Provider","NavigationContainer","Navigator","Screen","component","options","MobileView","RoutingContext","internalRoutes","isReady","showInNavigation","BasicProvider","routingState","setRoutingState","queryClient","QueryClient","QueryProvider","ExportApp","registerRootComponent"],"mappings":"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","file":"static/js/app.70dc9acf.chunk.js","sourcesContent":["/**\r\n * This context will hold all of our application data like the current\r\n * user's api Keys, currently viewed directory, etc\r\n */\r\n\r\nimport { S3Client } from '@aws-sdk/client-s3'\r\nimport React, { createContext } from 'react'\r\nimport { BackblazeB2Config } from '../../services/types'\r\n\r\nexport interface ApplicationState {\r\n  s3credentials: {\r\n    apiKey: string | undefined\r\n    apiSecret: string | undefined\r\n    region: string | undefined\r\n    endpoint: string | undefined\r\n    bucket: string | undefined\r\n  }\r\n  backblaze: BackblazeB2Config | undefined\r\n  otherStuff: string | undefined\r\n  s3client: S3Client | undefined\r\n  mutatedAt: Date | undefined\r\n}\r\n\r\nexport const initialData: ApplicationState = {\r\n  s3credentials: {\r\n    apiKey: undefined,\r\n    apiSecret: undefined,\r\n    region: undefined,\r\n    endpoint: undefined,\r\n    bucket: undefined\r\n  },\r\n  backblaze: {\r\n    authorizationToken: '',\r\n    downloadUrl: '',\r\n    s3ApiUrl: ''\r\n  },\r\n  s3client: undefined,\r\n  otherStuff: '',\r\n  mutatedAt: undefined\r\n}\r\n\r\nexport type ApplicationContextType = [\r\n  ApplicationState,\r\n  React.Dispatch<React.SetStateAction<ApplicationState>>\r\n]\r\n\r\nexport const ApplicationContext = createContext<ApplicationContextType>(\r\n  Object.create(null)\r\n)\r\n","import {\r\n  S3Client,\r\n  ListObjectsCommand,\r\n  GetObjectCommand,\r\n  GetObjectCommandInput,\r\n  GetObjectCommandOutput,\r\n  DeleteObjectCommand,\r\n  DeleteObjectCommandInput,\r\n  CopyObjectCommandInput,\r\n  CopyObjectCommand\r\n} from '@aws-sdk/client-s3'\r\nimport { S3Initializer, GetAssetArgs, Asset } from './types'\r\nimport 'react-native-url-polyfill/auto'\r\nimport 'react-native-get-random-values'\r\n// eslint-disable-next-line\r\nimport { v4 as uuidv4 } from 'uuid'\r\n// eslint-disable-next-line\r\nconst { getSignedUrl } = require('@aws-sdk/s3-request-presigner')\r\n\r\nexport const buildS3Client = (initializationData: S3Initializer): S3Client => {\r\n  const { credentials, region, endpoint } = initializationData\r\n  const client = new S3Client({\r\n    region,\r\n    credentials,\r\n    endpoint\r\n  })\r\n  client.middlewareStack.add(\r\n    (next, context) => async (args) => {\r\n      // args.request.headers[\"Custom-Header\"] = \"value\";\r\n      // eslint-disable-next-line\r\n      // @ts-ignore\r\n      // delete args.request.headers[\"amz-sdk-request\"];\r\n      // delete args.request.headers[\"amz-sdk-invocation-id\"];//x-amz-content-sha256\r\n      // delete args.request.headers[\"x-amz-content-sha256\"];\r\n      // args.request.headers[\"date\"] = (new Date()).toUTCString();\r\n      // delete args.request.headers[\"x-amz-date\"];\r\n      // delete args.request.headers[\"x-amz-user-agent\"];\r\n      const result = await next(args)\r\n      return result\r\n    },\r\n    {\r\n      step: 'finalizeRequest',\r\n      name: 'removeHeaders'\r\n    }\r\n  )\r\n  return client\r\n}\r\n\r\nexport const getAssets: (\r\n  client: S3Client,\r\n  params: GetAssetArgs\r\n) => Promise<Asset[] | undefined> = async (client, params) => {\r\n  const command = new ListObjectsCommand(params)\r\n\r\n  const response = await client.send(command)\r\n  const folders: Asset[] =\r\n    response.CommonPrefixes?.map((item) => {\r\n      return {\r\n        prefix: item.Prefix,\r\n        etag: undefined,\r\n        name: item.Prefix,\r\n        lastModified: undefined,\r\n        size: 0,\r\n        key: item.Prefix\r\n      }\r\n    }) || []\r\n  const files: Asset[] =\r\n    response.Contents?.map((item) => {\r\n      return {\r\n        prefix: '',\r\n        etag: item.ETag,\r\n        name: item?.Key,\r\n        lastModified: item?.LastModified,\r\n        size: item?.Size,\r\n        key: item.Key\r\n      }\r\n    }) || []\r\n  return [...folders, ...files]\r\n}\r\n\r\nexport const updateAsset: (\r\n  client: S3Client,\r\n  params: CopyObjectCommandInput\r\n) => Promise<any> = async (client, params) => {\r\n  try {\r\n    const data = await client.send(new CopyObjectCommand(params))\r\n    console.log('updated asset', data)\r\n    return data // For unit tests.\r\n  } catch (err) {\r\n    console.log('Error', err)\r\n  }\r\n}\r\n\r\nexport const deleteAsset: (\r\n  client: S3Client,\r\n  params: DeleteObjectCommandInput\r\n) => Promise<any> = async (client, params) => {\r\n  try {\r\n    const data = await client.send(new DeleteObjectCommand(params))\r\n    return data // For unit tests.\r\n  } catch (err) {\r\n    console.log('Error', err)\r\n  }\r\n}\r\n\r\nexport const getAsset: (\r\n  client: S3Client,\r\n  params: GetObjectCommandInput\r\n) => Promise<any> = async (client, params) => {\r\n  const command = new GetObjectCommand(params)\r\n\r\n  const response: GetObjectCommandOutput = await client.send(command)\r\n  return response\r\n}\r\n\r\nexport const getDownloadLink = async (\r\n  s3Client: s3Client,\r\n  params: GetObjectCommandInput\r\n): Promise<string> => {\r\n  const command = new GetObjectCommand(params)\r\n  const url = await getSignedUrl(s3Client, command, { expiresIn: 3600 })\r\n  return url\r\n}\r\n\r\n/* eslint-disable */\r\nexport const getAssetV2: (\r\n  client: S3Client,\r\n  params: GetObjectCommandInput\r\n) => Promise<any> = async (client, params) => {\r\n  const command = new GetObjectCommand(params)\r\n  const endpoint = await client.config.endpoint()\r\n  command.middlewareStack.add(\r\n    (next) => async (args: any) => {\r\n      // @ts-ignore\r\n      const { headers, path } = args.request\r\n      const { hostname, protocol } = endpoint\r\n      fetch(`${protocol}//${hostname}/${params.Bucket}${path}`, {\r\n        headers: headers,\r\n      }).then((response) => {\r\n        console.log('Response = ', response)\r\n      })\r\n\r\n      return new Promise((_resolve, reject) =>\r\n        reject(new Error('Intentional Failure'))\r\n      )\r\n    },\r\n    {\r\n      step: 'finalizeRequest',\r\n      name: 'rH',\r\n    }\r\n  )\r\n  try {\r\n    await client.send(command)\r\n  } catch (error) {}\r\n  /* eslint-enable */\r\n\r\n  /* return new Promise((resolve, reject) => {\r\n    RNFetchBlob.fetch(\"GET\", \"http://www.example.com/images/img1.png\", {\r\n      Authorization: \"Bearer access-token...\",\r\n      // more headers  ..\r\n    })\r\n      .then((res) => {\r\n        let status = res.info().status;\r\n\r\n        if (status == 200) {\r\n          // the conversion is done in native code\r\n          let base64Str = res.base64();\r\n          // the following conversions are done in js, it's SYNC\r\n          let text = res.text();\r\n          let json = res.json();\r\n        } else {\r\n          // handle other status codes\r\n        }\r\n      })\r\n      // Something went wrong:\r\n      .catch((errorMessage, statusCode) => {\r\n        // error handling\r\n      });\r\n  }) */\r\n}\r\n","export const BackblazeB2AuthToLocalAdapter = (backblazeData: {\n  [key: string]: string\n}): BackblazeB2Config => {\n  return {\n    authorizationToken: backblazeData.authorizationToken,\n    downloadUrl: backblazeData.downloadUrl,\n    s3ApiUrl: backblazeData.s3ApiUrl,\n    updatedAt: new Date()\n  }\n}\n","import { Controller } from 'react-hook-form'\nimport { StyleSheet } from 'react-native'\nimport { TextInput } from 'react-native-paper'\nimport React from 'react'\n\nconst styles = StyleSheet.create({\n  textInput: {\n    // borderColor: \"#000000\",\n    // borderBottomWidth: 1,\n    marginTop: 20\n  }\n})\n\nexport const InputField: (props: any) => JSX.Element = ({ control, name, label }: any) => {\n  if (control === undefined) {\n    return null\n  }\n  /* const {\n          field: { onChange, onBlur, value, ref },\n          fieldState: { invalid, isTouched, isDirty },\n          formState: { touchedFields, dirtyFields }\n      } = useController({\n          name,\n          control,\n          rules: { required: true },\n          defaultValue: \"\",\n      }); */\n\n  return <>\n        <Controller\n            control={control}\n            name={name}\n            render={({ field: { value, onChange, onBlur } }: any) => {\n              return <>\n                    <TextInput\n                        label={label}\n                        value={value}\n                        onChangeText={(text) => {\n                          console.log('[InputChange] name = ', name, ' value = ', text)\n                          onChange(text)\n                        }}\n                        onBlur={onBlur}\n                        style={styles.textInput}\n                    />\n                </>\n            }}\n        />\n    </>\n}\n","import axios from 'axios'\nimport { BackblazeB2Config } from '../types'\n\nexport const getBaseUrl = (): string => 'https://api.backblazeb2.com/b2api/v2/'\n\nexport const getAuthorizationToken = (key: string, secret: string): string => {\n  return btoa(`${key}:${secret}`)\n}\n\nexport interface authorizationType {\n  [key: string]: string\n}\n\nexport const authorizeAccount = async (\n  authorizationToken: string\n): Promise<{ [key: string]: string }> => {\n  const response = await axios({\n    method: 'GET',\n    url: `${getBaseUrl()}b2_authorize_account`,\n    headers: {\n      Accept: 'application/json',\n      Authorization: `Basic ${authorizationToken}`\n    }\n  })\n  return response.data\n}\n\nexport const getDownloadToken = async (\n  authorizationToken: string,\n  bucket: string,\n  key: string\n): Promise<authorizationType> => {\n  const response = await axios({\n    method: 'POST',\n    url: `${getBaseUrl()}b2_get_download_authorization`,\n    headers: {\n      Accept: 'application/json',\n      Authorization: `Basic ${authorizationToken}`\n    },\n    data: {\n      bucketId: bucket,\n      fileNamePrefix: key,\n      validDurationInSeconds: 86400\n    }\n  })\n  return response.data\n}\n\nexport const isBackblaze = (endpoint: string): boolean => {\n  return endpoint.toLowerCase().includes('backblazeb2')\n}\n\nexport const getDownloadUrl = (\n  config: BackblazeB2Config,\n  bucket: string,\n  fileKey: string\n): string => {\n  const { downloadUrl } = config\n  return `${downloadUrl}/file/${bucket}/${fileKey}?Authorization=${config.authorizationToken}`\n}\n","import React, { useContext, useEffect, useState } from 'react'\nimport { useForm } from 'react-hook-form'\nimport { ApplicationContext } from '../../contexts/application/ApplicationContext'\nimport { buildS3Client, getAssets } from '../../services/s3'\nimport { BackblazeB2AuthToLocalAdapter } from '../../adapters/backblaze'\nimport { Text, Card, Snackbar } from 'react-native-paper'\nimport { InputField } from '../Input/InputField'\nimport { Button } from '../Button'\nimport { KeyboardAvoidingView, Platform, StyleSheet, View } from 'react-native'\nimport { S3Client } from '@aws-sdk/client-s3'\nimport {\n  authorizeAccount,\n  getAuthorizationToken,\n  isBackblaze\n} from '../../services/backblaze/backblaze'\n\nexport const SaveCredentialsForm: React.FC = () => {\n  const [appState, setAppState] = useContext(ApplicationContext)\n  const { s3credentials } = appState\n  const { control, handleSubmit, getValues, reset } = useForm({\n    defaultValues: s3credentials\n  })\n\n  useEffect(() => {\n    reset(s3credentials)\n  }, [s3credentials])\n\n  const [, setSaved] = useState(false)\n\n  const onSubmit = async (): void => {\n    console.log('Submitting form')\n    onToggleSnackBar()\n    const data = getValues()\n\n    if (isBackblaze(data?.endpoint)) {\n      const token = getAuthorizationToken(data.apiKey, data.apiSecret)\n      try {\n        const backblazeData = await authorizeAccount(token)\n\n        setAppState({\n          ...appState,\n          s3credentials: data as any,\n          s3client: undefined,\n          backblaze: BackblazeB2AuthToLocalAdapter(backblazeData)\n        })\n      } catch (error) {\n        setAppState({\n          ...appState,\n          s3credentials: data as any,\n          s3client: undefined,\n          backblaze: undefined\n        })\n      }\n    } else {\n      setAppState({\n        ...appState,\n        s3credentials: data as any,\n        s3client: undefined\n      })\n    }\n    setSaved(true)\n    setTimeout(() => {\n      setSaved(false)\n    }, 1000)\n    /**\n     * Build the s3 client here\n     */\n    const s3Client: S3Client = buildS3Client({\n      credentials: {\n        accessKeyId: data.apiKey,\n        secretAccessKey: data.apiSecret\n      },\n      region: data.region,\n      endpoint: data.endpoint\n    })\n\n    getAssets(s3Client, { Bucket: 'testinghumza' }).catch(() => {\n      console.log('[SaveCredentialsForm] Promise failure getAssets')\n    })\n  }\n\n  // snackbar\n  const [visible, setVisible] = React.useState<boolean>(false)\n  const onToggleSnackBar: () => void = () => setVisible(!visible)\n  const onDismissSnackBar: () => void = () => setVisible(false)\n\n  const styles = StyleSheet.create({\n    container: {\n      flex: 1\n    },\n    inner: {\n      padding: 24,\n      flex: 1,\n      justifyContent: 'space-around'\n    },\n    header: {\n      fontSize: 36,\n      marginBottom: 48\n    },\n    textInput: {\n      height: 40,\n      borderColor: '#000000',\n      borderBottomWidth: 1,\n      marginBottom: 36\n    },\n    snackBarContainer: {\n      flex: 1,\n      justifyContent: 'space-between'\n    }\n  })\n\n  return (\n    <KeyboardAvoidingView\n      behavior={Platform.OS === 'ios' ? 'padding' : 'height'}\n      style={styles.container}\n    >\n      <Card>\n        <Card.Content>\n          <Text variant=\"headlineSmall\">API Configuration</Text>\n          <InputField control={control} name=\"apiKey\" label=\"API KEY\" />\n\n          <InputField control={control} name=\"apiSecret\" label=\"Api Secret\" />\n\n          <InputField control={control} name=\"endpoint\" label=\"Endpoint\" />\n\n          <InputField control={control} name=\"bucket\" label=\"Bucket\" />\n\n          <InputField control={control} name=\"region\" label=\"Region\" />\n        </Card.Content>\n        <Card.Actions>\n          {/* eslint-disable-next-line */}\n          <Button onPress={handleSubmit(onSubmit)}>Submit</Button>\n        </Card.Actions>\n      </Card>\n      <View style={styles.snackBarContainer}>\n        <Snackbar\n          visible={visible}\n          onDismiss={onDismissSnackBar}\n          action={{\n            label: 'Dismiss',\n            onPress: () => {\n              // Do something\n            }\n          }}\n        >\n          Credentials are saved!\n        </Snackbar>\n      </View>\n    </KeyboardAvoidingView>\n  )\n}\n","import { SaveCredentialsForm } from '../SaveCredentialsForm'\nimport React from 'react'\n\nexport const ApiConfiguration: React.FC = () => {\n  /**\n   **\n   Testing online code editor\n   * **/\n  return <SaveCredentialsForm />\n}\n","import { Asset, GetAssetArgs } from '../services/s3/types'\nimport { Asset as AppAssetType } from '../services/types'\nexport const S3TypeToInternalAdapter = (assets: Asset[], params: GetAssetArgs): AppAssetType[] => {\n  return assets.map((asset: Asset) => {\n    const fileName: string = asset.name.replace(params.Prefix, '')\n    const appAsset: AppAssetType = {\n      assetId: asset.etag,\n      fileName,\n      fileSize: asset.size,\n      updatedAt: asset.lastModified,\n      isFolder: asset.prefix?.length > 0,\n      prefix: asset.prefix,\n      etag: asset.etag,\n      key: asset.key\n    }\n    return appAsset\n  })\n}\n","import { S3Client } from '@aws-sdk/client-s3'\nimport { useMemo } from 'react'\nimport { ApplicationState } from '../contexts/application/ApplicationContext'\nimport { buildS3Client } from '../services/s3'\n\nexport const useS3Client: (\n  appState: ApplicationState\n) => [S3Client | undefined, boolean] = (appState: ApplicationState) => {\n  const { s3credentials } = appState\n  const { apiKey, apiSecret, region, endpoint } = s3credentials\n  const [client, isInitialized] = useMemo(() => {\n    if (apiKey && apiSecret && endpoint) {\n      // console.log('[useS3Client] Building S3 Client region = ', region)\n      // console.log('[useS3Client] Building S3 Client apiKey = ', apiKey)\n\n      return [\n        buildS3Client({\n          region,\n          credentials: {\n            accessKeyId: apiKey,\n            secretAccessKey: apiSecret\n          },\n          endpoint\n        }),\n        true\n      ]\n    }\n    return [undefined, false]\n  }, [apiKey, apiSecret, region, endpoint])\n  return [client, isInitialized]\n}\n","import React from 'react'\n\nexport const ContextMenu: React.FC = () => {\n  /*\n  const [anchorEl] = React.useState<null | HTMLElement>(null)\n  const open = Boolean(anchorEl) */\n  /*\n  const _handleClick = (event: React.MouseEvent<HTMLElement>) => {\n    setAnchorEl(event.currentTarget);\n  };\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n  */\n\n  return (\n    <>\n    </>)\n}\n","export const fileToIcon = (fileExt: string): string => {\n  switch (fileExt) {\n    case 'png':\n    case 'jpeg':\n    case 'jpg':\n      return 'image'\n\n    default:\n      return 'file'\n  }\n}\n","import React from 'react'\nimport { createColumnHelper } from '@tanstack/react-table'\nimport prettyBytes from 'pretty-bytes'\nimport dayjs from 'dayjs'\nimport relativeTime from 'dayjs/plugin/relativeTime'\nimport { Feather } from '@expo/vector-icons'\nimport { Platform, StyleSheet } from 'react-native'\nimport { Text } from 'react-native-paper'\n\nimport { ContextMenu } from '../ContextMenu'\nimport { Asset } from '../../services/types'\nimport { fileToIcon } from '../../services/file-icon-service'\n\ndayjs.extend(relativeTime)\n\nconst styles = StyleSheet.create({\n  icon: {},\n  filename: {}\n})\n\n// icons for different file types or folders\nconst iconType = (asset: Asset): JSX.Element => {\n  const re = /(?:\\.([^.]+))?$/\n  const internalType = asset.isFolder\n    ? 'folder'\n    : re.exec(asset.fileName)[1] || ''\n  const fileExtension = asset.fileName.split('.').pop()\n\n  switch (internalType) {\n    case 'folder':\n      return (\n        <Feather name=\"folder\" color=\"#ffbd43\" size={22} style={styles.icon} />\n      )\n    default:\n      return (\n        <Feather\n          name={fileToIcon(fileExtension) as any}\n          color=\"#6565d6\"\n          size={22}\n          style={styles.icon}\n        />\n      )\n  }\n}\n\nexport const DataGridColumns: any = () => {\n  const columnHelper = createColumnHelper<Asset>()\n  const columns: any = [\n    // Dispaly file name with icon\n    columnHelper.accessor('fileName', {\n      id: 'fileName',\n      header: 'Name',\n      cell: (info) => {\n        const row = info.row.original\n        const fileName = row.isFolder\n          ? info.getValue().slice(0, -1)\n          : info.getValue()\n        return (\n          <>\n            <Text variant=\"bodyLarge\" style={styles.filename}>\n              {iconType(row)} &nbsp;\n              {fileName}\n            </Text>\n          </>\n        )\n      }\n    }),\n\n    // Display file size\n    columnHelper.accessor('fileSize', {\n      id: 'fileSize',\n      header: 'Size',\n      cell: (info) => (\n        <Text>\n          {!info.row.original.isFolder && prettyBytes(info.getValue())}\n        </Text>\n      )\n    }),\n\n    // Dispaly last modified\n    columnHelper.accessor('updatedAt', {\n      id: 'updatedAt',\n      header: 'Last Modified',\n      cell: (info) => {\n        return (\n          <Text>\n            {!info.row.original.isFolder && dayjs(info.getValue()).fromNow()}\n          </Text>\n        )\n      }\n    }),\n\n    // Display column size\n    columnHelper.display({\n      id: 'actions',\n      cell: () => <ContextMenu />\n    })\n  ].filter((item) => {\n    return Platform.OS !== 'web' ? item.id === 'fileName' : true\n  })\n  return columns\n}\n","import React, { Fragment, useEffect, useState } from 'react'\nimport {\n  flexRender,\n  getCoreRowModel,\n  getPaginationRowModel,\n  getSortedRowModel,\n  SortingState,\n  useReactTable\n} from '@tanstack/react-table'\nimport {\n  ActivityIndicator,\n  DataTable as ReactPaperDataTable,\n  Text,\n  Button\n} from 'react-native-paper'\nimport { ScrollView, StyleSheet } from 'react-native'\nimport { AntDesign } from '@expo/vector-icons'\n\nimport { DataGridColumns } from './dataTableColumns'\nimport { Asset } from '../../services/types'\n\nconst styles = StyleSheet.create({\n  tableHead: {\n    height: 'auto'\n  },\n  sorterIcon: {\n    marginLeft: '10px'\n  },\n  cell: {\n    flexBasis: 'auto',\n    paddingRight: '30px'\n  },\n  cellFirstChild: {\n    flexBasis: '78%'\n  },\n  title: {\n    display: 'flex',\n    alignItems: 'center'\n  }\n})\n\nexport interface DataTableProps {\n  assets: Asset[] | undefined\n  onPress: (asset: Asset) => void\n  isLoading: boolean\n}\n\nexport const DataTable: (props: DataTableProps) => JSX.Element = ({\n  assets,\n  onPress,\n  isLoading\n}: DataTableProps) => {\n  const [data, setData] = React.useState<Asset[]>(() => assets || [])\n  const [sorting, setSorting] = React.useState<SortingState>([])\n  const [currentPage, setCurrentPage] = useState(1)\n  useEffect(() => {\n    setData(assets || [])\n    setCurrentPage(1)\n  }, [assets])\n  const table = useReactTable({\n    data,\n    columns: DataGridColumns(),\n    state: {\n      sorting\n    },\n    onSortingChange: setSorting,\n    getCoreRowModel: getCoreRowModel(),\n    getSortedRowModel: getSortedRowModel(),\n    getPaginationRowModel: getPaginationRowModel()\n  })\n\n  useEffect(() => {\n    table.setPageSize(20 * currentPage)\n  }, [currentPage])\n\n  const isCloseToBottom = ({\n    layoutMeasurement,\n    contentOffset,\n    contentSize\n  }): boolean => {\n    const paddingToBottom = 20\n    return (\n      /* eslint-disable */\n      layoutMeasurement.height + contentOffset.y >=\n      contentSize.height - paddingToBottom\n      /* eslint-enable */\n    )\n  }\n\n  return (\n    <>\n      <ReactPaperDataTable.Header style={styles.tableHead}>\n        {table.getHeaderGroups().map((headerGroup) => (\n          <Fragment key={headerGroup.id}>\n            {headerGroup.headers.map((header, index) => (\n              <ReactPaperDataTable.Title\n                key={header.id}\n                style={index === 0 ? styles.cellFirstChild : styles.cell}\n              >\n                <Button>\n                  {header.isPlaceholder\n                    ? null\n                    : (\n                    <Text\n                      {...{\n                        onClick: header.column.getToggleSortingHandler()\n                      }}\n                    >\n                      {flexRender(\n                        header.column.columnDef.header,\n                        header.getContext()\n                      )}\n                      {{\n                        asc: (\n                          <AntDesign name=\"arrowup\" style={styles.sorterIcon} />\n                        ),\n                        desc: (\n                          <AntDesign\n                            name=\"arrowdown\"\n                            style={styles.sorterIcon}\n                          />\n                        )\n                      }[header.column.getIsSorted() as string] ?? null}\n                    </Text>\n                      )}\n                </Button>\n              </ReactPaperDataTable.Title>\n            ))}\n          </Fragment>\n        ))}\n      </ReactPaperDataTable.Header>\n      <ScrollView\n        onScroll={({ nativeEvent }) => {\n          if (isCloseToBottom(nativeEvent)) {\n            console.log('[Scroll] Scroll close to bottom')\n            setCurrentPage(currentPage + 1)\n            // table.setPageSize(20 * 2)\n          }\n        }}\n      >\n        <ReactPaperDataTable>\n          {isLoading && <ActivityIndicator animating />}\n          {table.getRowModel().rows.map((row) => (\n            <ReactPaperDataTable.Row\n              key={row.id}\n              onPress={() => {\n                onPress(row.original)\n              }}\n            >\n              {row.getVisibleCells().map((cell, index) => (\n                <ReactPaperDataTable.Cell\n                  key={cell.id}\n                  style={index === 0 ? styles.cellFirstChild : styles.cell}\n                >\n                  {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                </ReactPaperDataTable.Cell>\n              ))}\n            </ReactPaperDataTable.Row>\n          ))}\n          <ReactPaperDataTable.Pagination\n            page={table.getState().pagination.pageIndex + 1}\n            numberOfPages={table.getPageCount()}\n            onPageChange={(page) => table.setPageIndex(page - 1)}\n            label={`${\n              table.getState().pagination.pageIndex + 1\n            } of ${table.getPageCount()}`}\n          />\n        </ReactPaperDataTable>\n      </ScrollView>\n    </>\n  )\n}\n","import React from 'react'\nimport { Alert, Modal, StyleSheet, Text, Pressable, View } from 'react-native'\n\nexport interface ModalProps {\n  isVisible: boolean\n  onClose: () => void\n}\n\nconst AppModal = ({\n  isVisible,\n  onClose,\n  children\n}: React.PropsWithChildren<ModalProps>): JSX.Element => {\n  if (!isVisible) {\n    return null\n  }\n  return (\n        <View style={styles.centeredView}>\n            <Modal\n                animationType=\"slide\"\n                transparent={true}\n                visible={isVisible}\n                onRequestClose={() => {\n                  Alert.alert('Modal has been closed.')\n                  onClose()\n                }}\n            >\n                <View style={styles.centeredView}>\n                    <View style={styles.modalView}>\n                        {children}\n                        <Pressable\n                            style={[styles.button, styles.buttonClose]}\n                            onPress={() => onClose()}\n                        >\n                            <Text style={styles.textStyle}>Hide Modal</Text>\n                        </Pressable>\n                    </View>\n                </View>\n            </Modal>\n        </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  centeredView: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginTop: 22\n  },\n  modalView: {\n    margin: 20,\n    width: 200,\n    backgroundColor: 'white',\n    borderRadius: 20,\n    padding: 35,\n    alignItems: 'center',\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 2\n    },\n    shadowOpacity: 0.25,\n    shadowRadius: 4,\n    elevation: 5\n  },\n  button: {\n    borderRadius: 20,\n    padding: 10,\n    elevation: 2\n  },\n  buttonOpen: {\n    backgroundColor: '#F194FF'\n  },\n  buttonClose: {\n    backgroundColor: '#2196F3'\n  },\n  textStyle: {\n    color: 'white',\n    fontWeight: 'bold',\n    textAlign: 'center'\n  },\n  modalText: {\n    marginBottom: 15,\n    textAlign: 'center'\n  }\n})\n\nexport default AppModal\n","import React, { PropsWithChildren } from 'react'\nimport { StyleSheet } from 'react-native'\nimport { Text, TextProps } from 'react-native-paper'\n\nexport interface TextLinkProps {\n  isUnderlined: boolean\n}\n\nexport const TextLink = ({\n  children,\n  isUnderlined,\n  ...args\n}: PropsWithChildren<TextLinkProps & TextProps>): JSX.Element => {\n  return (\n        <Text {...args} style={isUnderlined ? [styles.underline] : []}>\n            {children}\n        </Text>\n  )\n}\n\nconst styles = StyleSheet.create({\n  underline: {\n    textDecorationLine: 'underline'\n  }\n})\n","import {\n  View,\n  StyleSheet,\n  Text,\n  Dimensions,\n  EmitterSubscription\n} from 'react-native'\nimport React, { useState, useEffect } from 'react'\n\nexport type ScreenType = 'xs' | 'sm' | 'md' | 'lg' | 'xl' | 'xxl'\n\nexport interface BlockType {\n  hidden?: ScreenType[]\n}\n\nconst getScreenType = (px: number): ScreenType => {\n  if (px < 576) {\n    return 'xs'\n  } else if (px >= 576 && px < 768) {\n    return 'md'\n  } else if (px >= 768 && px < 992) {\n    return 'lg'\n  } else if (px >= 992 && px < 1200) {\n    return 'xl'\n  } else if (px >= 1200) {\n    return 'xxl'\n  }\n}\n\nconst window = Dimensions.get('window')\nconst screen = Dimensions.get('screen')\nconst screenType: ScreenType = getScreenType(window.width)\nexport const Block = ({\n  hidden,\n  children\n}: React.PropsWithChildren<BlockType>): JSX.Element => {\n  const [dimensions, setDimensions] = useState({ window, screen, screenType })\n  useEffect(() => {\n    const subscription: EmitterSubscription = Dimensions.addEventListener(\n      'change',\n      ({ window, screen }) => {\n        const screenType: ScreenType = getScreenType(window.width)\n        setDimensions({ window, screen, screenType })\n      }\n    )\n    return () => subscription?.remove()\n  }, [])\n\n  /**\n   * A simple function to debug the current dimensions\n   * @returns\n   */\n  // eslint-disable-next-line\n  const getDebug: React.FC = () => (\n    <>\n      <Text>Current type: {dimensions.screenType}</Text>\n      <Text style={styles.header}>Window Dimensions</Text>\n      {Object.entries(dimensions.window).map(([key, value]) => (\n        <Text key={key}>\n          {key} - {value}\n        </Text>\n      ))}\n      <Text style={styles.header}>Screen Dimensions</Text>\n      {Object.entries(dimensions.screen).map(([key, value]) => (\n        <Text key={key}>\n          {key} - {value}\n        </Text>\n      ))}\n    </>\n  )\n\n  const hideContent = hidden ? hidden.includes(dimensions.screenType) : false\n\n  return <>{!hideContent && <View>{children}</View>}</>\n}\n\nconst styles = StyleSheet.create({\n  header: {\n    fontSize: 16,\n    marginVertical: 10\n  }\n})\n","/**\n * This context will hold all of our application data like the current\n * user's api Keys, currently viewed directory, etc\n */\n\nimport React, { createContext } from 'react'\n\nexport const initialData: Object = {}\n\nexport type ThemeContextType = [\n  Object,\n  React.Dispatch<React.SetStateAction<Object>>\n]\n\nexport const ThemeContextInternal = createContext<ThemeContextType>(\n  Object.create({})\n)\n","import { ApplicationState } from '../../contexts/application/ApplicationContext'\nimport {\n  authorizeAccount,\n  getAuthorizationToken,\n  isBackblaze\n} from '../backblaze/backblaze'\nimport { getDownloadLink, getDownloadLink as S3GetDownloadUrl } from '../s3'\n\nexport const getBackblazeB2Data = async (\n  appState: ApplicationState\n): Promise<{ [key: string]: string }> => {\n  const { apiKey, apiSecret } = appState.s3credentials\n  const token = getAuthorizationToken(apiKey, apiSecret)\n  const backblazeData = await authorizeAccount(token)\n  return backblazeData\n}\n\nexport const isBackblazeB2TokenValid = (\n  appState: ApplicationState\n): boolean => {\n  const lastUpdated: number = appState.backblaze.updatedAt.getTime() / 1000\n  const timeNow: number = new Date().getTime() / 1000\n  const difference = timeNow - lastUpdated\n  return difference < 86400\n}\n\nexport const getDownloadLinkByKey = async (\n  appState: ApplicationState,\n  setAppState: React.Dispatch<React.SetStateAction<ApplicationState>>,\n  key: string\n): Promise<string> => {\n  if (isBackblaze(appState.s3credentials.endpoint)) {\n    /* const token = getAuthorizationToken(\n      appState.s3credentials.apiKey,\n      appState.s3credentials.apiSecret\n    ) */\n    /* const authToken = await getDownloadToken(\n      token,\n      appState.s3credentials.bucket,\n      key\n    ) */\n    const dllink = await getDownloadLink(appState.s3client, {\n      Bucket: appState.s3credentials.bucket,\n      Key: key\n    })\n    console.log('aws', dllink)\n    return await new Promise((resolve) => {\n      resolve('fail')\n    })\n    /* if (isBackblazeB2TokenValid(appState)) {\n      return getDownloadUrl(\n        appState.backblaze,\n        appState.s3credentials.bucket,\n        key\n      )\n    } else {\n      const backblazeData = await getBackblazeB2Data(appState)\n      const b2Data = BackblazeB2AuthToLocalAdapter(backblazeData)\n      setAppState({ ...appState, backblaze: b2Data })\n      return getDownloadUrl(b2Data, appState.s3credentials.bucket, key)\n    } */\n  } else {\n    return await S3GetDownloadUrl(appState.s3Client, {\n      Key: key,\n      Bucket: appState.s3credentials.bucket\n    })\n  }\n}\n","import React, { useState, useContext } from 'react'\nimport { Feather } from '@expo/vector-icons'\nimport { StyleSheet, View } from 'react-native'\nimport { IconButton, Text, TextInput } from 'react-native-paper'\n\nimport { Block } from '../../services/rn-responsive-design'\nimport { Asset } from '../../services/types'\nimport { ThemeContextInternal } from '../../contexts/theme/ThemeContextInternal'\nimport { ApplicationContext } from '../../contexts/application/ApplicationContext'\nimport { updateAsset as s3UpdateAsset, deleteAsset } from '../../services/s3'\nimport { useS3Client } from '../../hooks/useS3Client'\nimport { getDownloadLinkByKey } from '../../services/cross-service-storage/cross-service-storage'\n\nexport interface PreviewPropsType {\n  asset: Asset\n  onClose: () => void\n}\n\nconst Preview = ({ asset, onClose }: PreviewPropsType): JSX.Element => {\n  const [appState, setAppState] = useContext(ApplicationContext)\n  const { s3credentials } = appState\n\n  const [theme] = useContext(ThemeContextInternal)\n  const [isEditing, setIsEditing] = useState(false)\n  const [updateAsset, setUpdateAsset] = useState(asset)\n  const [text, setText] = useState(asset.fileName)\n  const [s3Client] = useS3Client(appState)\n\n  const handleSave = async (): Promise<void> => {\n    setIsEditing(false)\n    setUpdateAsset((asset) => ({\n      ...asset,\n      fileName: text\n    }))\n    await s3UpdateAsset(s3Client, {\n      Bucket: s3credentials.bucket,\n      Key: s3credentials.bucket + '/' + asset.key.replace(asset.fileName, text),\n      CopySource: s3credentials.bucket + '/' + asset.key\n    })\n    setAppState({ ...appState, mutatedAt: new Date() })\n  }\n\n  const handleDelete = async (): Promise<void> => {\n    const deleteParams = {\n      Bucket: s3credentials.bucket,\n      Key: updateAsset.key\n    }\n    await deleteAsset(s3Client, deleteParams)\n    setAppState({ ...appState, mutatedAt: new Date() })\n  }\n\n  const handleDownload = async (): Promise<void> => {\n    const link = await getDownloadLinkByKey(appState, setAppState, asset.key)\n    const a = document.createElement('a')\n    a.href = link\n    a.download = asset.key\n    a.style.display = 'none'\n    document.body.appendChild(a)\n    a.click()\n    a.remove()\n  }\n\n  /* eslint-disable */\n  return (\n    <>\n      <Block hidden={['xs', 'md']}>\n        <View style={styles.main}>\n          <IconButton\n            theme={theme}\n            icon=\"close\"\n            onPress={onClose}\n            style={styles.closeButton}\n          />\n          <View style={[styles.section2, styles.centered]}>\n            <Text\n              variant=\"headlineSmall\"\n              style={[styles.textCenter, styles.marginBottom]}\n            >\n              <Feather theme={theme} name=\"file\" size={100} />\n            </Text>\n            <Text variant=\"headlineSmall\" style={styles.textCenter}>\n              {isEditing ? (\n                <TextInput\n                  value={isEditing ? text : updateAsset?.fileName}\n                  onChangeText={(text) => setText(text)}\n                />\n              ) : (\n                updateAsset?.fileName\n              )}\n            </Text>\n            <View style={[styles.centered, styles.horizontal]}>\n              {isEditing ? (\n                <IconButton theme={theme} icon=\"check\" onPress={handleSave} />\n              ) : (\n                <IconButton\n                  theme={theme}\n                  icon=\"pencil\"\n                  onPress={() => setIsEditing(true)}\n                />\n              )}\n              <IconButton\n                theme={theme}\n                icon=\"trash-can\"\n                onPress={handleDelete}\n              />\n              <IconButton\n                theme={theme}\n                icon=\"download\"\n                onPress={handleDownload}\n              />\n            </View>\n          </View>\n        </View>\n      </Block>\n    </>\n  )\n}\n/* eslint-enable */\n\nconst styles = StyleSheet.create({\n  main: {\n    display: 'flex',\n    flexGrow: 1\n  },\n  closeButton: {\n    display: 'flex',\n    textAlign: 'right',\n    height: 50\n  },\n  marginBottom: {\n    marginBottom: 10\n  },\n  textCenter: {\n    textAlign: 'center'\n  },\n  centered: {\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  horizontal: {\n    flexDirection: 'row'\n  },\n  section2: {\n    minWidth: '30vw',\n    flex: 1,\n    flexGrow: 1,\n    margin: 20\n  }\n})\n\nexport { Preview }\n","import React, { useEffect, useState } from 'react'\nimport { StyleSheet, Image, TouchableOpacity } from 'react-native'\nimport { Text } from 'react-native-paper'\nimport { Feather } from '@expo/vector-icons'\nimport { Asset } from '../../services/types'\nimport { getAsset } from '../../services/s3'\nimport { GetObjectCommandOutput, S3Client } from '@aws-sdk/client-s3'\nimport { ApplicationState } from '../../contexts/application/ApplicationContext'\nimport { fileToIcon } from '../../services/file-icon-service'\n// import { RNFetchBlob } from 'rn-fetch-blob'\n\nconst imageExtensions = ['png', 'jpeg', 'jpg']\n\n/*\nasync function collectStream(stream: ReadableStream): Promise<Uint8Array> {\n  let res = new Uint8Array(0)\n  const reader = stream.getReader()\n  let isDone = false\n  while (!isDone) {\n    const { done, value } = await reader.read()\n    if (value) {\n      const prior = res\n      res = new Uint8Array(prior.length + value.length)\n      res.set(prior)\n      res.set(value, prior.length)\n    }\n    isDone = done\n  }\n  return res\n}\n*/\n\nexport const mobileResponse = (stream): Response => {\n  return new Response(stream, {})\n}\n\nexport const GridItemImagePreview = ({\n  item,\n  onPress,\n  s3client,\n  s3Initialized,\n  appState\n}: {\n  item: Asset\n  onPress: any\n  s3client: S3Client\n  s3Initialized: boolean\n  appState: ApplicationState\n}): JSX.Element => {\n  const [d, setD] = useState<string | ArrayBuffer>()\n  const [error, setError] = useState<Error | undefined>(undefined)\n\n  const [loaded, setLoaded] = useState(false)\n  const [, setShowPreview] = useState(false)\n  const fileExtension = item.fileName.split('.').pop()\n  const isImage = imageExtensions.includes(fileExtension)\n  const fileIcon = !item.isFolder ? fileToIcon(fileExtension) : 'folder'\n  const loadImage = item.fileSize < 1000000\n  useEffect(() => {\n    if (!item.isFolder) {\n      if (isImage && loadImage) {\n        /* getAssetV2(s3client, {\n          Key: item.key,\n          Bucket: appState.s3credentials.bucket,\n        }) */\n        setShowPreview(true)\n        getAsset(s3client, {\n          Key: item.key,\n          Bucket: appState.s3credentials.bucket\n        })\n          .then((response: GetObjectCommandOutput) => {\n            mobileResponse(response.Body)\n              .blob()\n              .then((blobIn) => {\n                const fileReaderInstance = new FileReader()\n                fileReaderInstance.readAsDataURL(blobIn)\n                fileReaderInstance.onload = () => {\n                  const base64 = fileReaderInstance.result\n                  setD(base64)\n                  setLoaded(true)\n                }\n              })\n              .catch((error: Error) => {\n                setError(error)\n              })\n          })\n          .catch((error: Error) => {\n            setError(error)\n          })\n      }\n    }\n  }, [s3Initialized])\n\n  const onPressPreview = (): void => {\n    onPress(item)\n  }\n  /* eslint-disable */\n  return (\n    <TouchableOpacity onPress={onPressPreview}>\n      {isImage && loadImage ? (\n        loaded && !error ? (\n          <Image source={{ uri: d.toString() }} style={styles.preview} />\n        ) : (\n          <Feather name=\"alert-triangle\" size={100} style={styles.errorIcon} />\n        )\n      ) : (\n        <Feather name={fileIcon as any} size={100} style={styles.icon} />\n      )}\n      <Text\n        style={styles.fileName}\n        onPress={() => {\n          onPress(item)\n        }}\n      >\n        {item.fileName}\n      </Text>\n    </TouchableOpacity>\n  )\n  /** eslint-enable */\n}\n\nconst styles = StyleSheet.create({\n  preview: {\n    width: '100%',\n    height: 200,\n  },\n  icon: {\n    marginTop: 20,\n  },\n  wrapper: {},\n  fileName: {\n    bottom: 0,\n    textAlign: 'center',\n  },\n  errorIcon: {\n    color: 'red',\n  },\n})\n","import React from 'react'\nimport { StyleSheet, TouchableOpacity } from 'react-native'\nimport { Text } from 'react-native-paper'\nimport { Feather } from '@expo/vector-icons'\nimport { Asset } from '../../services/types'\nimport { fileToIcon } from '../../services/file-icon-service'\n// import { RNFetchBlob } from 'rn-fetch-blob'\n\nexport const GridItemFilePreview = ({\n  item,\n  onPress\n}: {\n  item: Asset\n  onPress: any\n}): JSX.Element => {\n  const fileExtension = item.fileName.split('.').pop()\n  const fileIcon = !item.isFolder ? fileToIcon(fileExtension) : 'folder'\n\n  const onPressPreview = (): void => {\n    onPress(item)\n  }\n\n  return (\n    <TouchableOpacity onPress={onPressPreview}>\n      <Feather name={fileIcon as any} size={100} style={styles.icon} />\n      <Text\n        style={styles.fileName}\n        onPress={() => {\n          onPress(item)\n        }}\n      >\n        {item.fileName}\n      </Text>\n    </TouchableOpacity>\n  )\n}\n\nconst styles = StyleSheet.create({\n  icon: {\n    marginTop: 20\n  },\n  wrapper: {},\n  fileName: {\n    bottom: 0,\n    textAlign: 'center'\n  },\n  errorIcon: {\n    color: 'red'\n  }\n})\n","import React from 'react'\nimport { StyleSheet, View } from 'react-native'\nimport { Asset } from '../../services/types'\nimport { S3Client } from '@aws-sdk/client-s3'\nimport { ApplicationState } from '../../contexts/application/ApplicationContext'\nimport { GridItemImagePreview } from './ImagePreview'\nimport { GridItemFilePreview } from './FilePreview'\n// import { RNFetchBlob } from 'rn-fetch-blob'\n\nexport const GridItemPreview = ({\n  item,\n  onPress,\n  s3client,\n  s3Initialized,\n  appState\n}: {\n  item: Asset\n  onPress: any\n  s3client: S3Client\n  s3Initialized: boolean\n  appState: ApplicationState\n}): JSX.Element => {\n  const fileExtension = item.fileName.split('.').pop()\n\n  return (\n    <View style={styles.item}>\n      {(() => {\n        switch (fileExtension) {\n          case 'png':\n          case 'jpeg':\n          case 'jpg':\n            return (\n              <GridItemImagePreview\n                item={item}\n                onPress={onPress}\n                s3client={s3client}\n                s3Initialized={s3Initialized}\n                appState={appState}\n              />\n            )\n          default:\n            return <GridItemFilePreview item={item} onPress={onPress} />\n        }\n      })()}\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  item: {\n    marginVertical: 8,\n    marginHorizontal: 16,\n    height: 200,\n    display: 'flex',\n    flex: 1,\n    overflow: 'hidden',\n    textAlign: 'center'\n  }\n})\n","import React, { useContext, useEffect, useState } from 'react'\nimport {\n  createColumnHelper,\n  getCoreRowModel,\n  getPaginationRowModel,\n  useReactTable\n} from '@tanstack/react-table'\nimport { ActivityIndicator } from 'react-native-paper'\nimport { FlatList, ScrollView, StyleSheet, View } from 'react-native'\n\nimport { Asset } from '../../services/types'\nimport { GridItemPreview } from '../GridItemPreview'\nimport {\n  ApplicationContext,\n  ApplicationContextType\n} from '../../contexts/application/ApplicationContext'\nimport { useS3Client } from '../../hooks/useS3Client'\n\nconst styles = StyleSheet.create({\n  cell: {\n    flexBasis: 'auto',\n    minWidth: '105px',\n    paddingRight: '15px'\n  },\n  cellFirstChild: {\n    flexBasis: '78%'\n  },\n  title: {\n    display: 'flex',\n    alignItems: 'center'\n  },\n  columnWrapperStyle: {\n    display: 'flex'\n  }\n})\n\nexport interface DataTableProps {\n  assets: Asset[] | undefined\n  onPress: (asset: Asset) => void\n  isLoading: boolean\n}\n\nexport const DataGrid: (props: DataTableProps) => JSX.Element = ({\n  assets,\n  onPress,\n  isLoading\n}: DataTableProps) => {\n  const [appState] = useContext<ApplicationContextType>(ApplicationContext)\n  const [s3client, s3Initialized] = useS3Client(appState)\n  const [data, setData] = React.useState<Asset[]>(() => assets || [])\n  const [currentPage, setCurrentPage] = useState(1)\n  useEffect(() => {\n    setData(assets || [])\n    setCurrentPage(1)\n  }, [assets])\n  const table = useReactTable({\n    data,\n    columns: DataGridColumns(),\n    getCoreRowModel: getCoreRowModel(),\n    getPaginationRowModel: getPaginationRowModel()\n  })\n\n  const items = table.getRowModel().flatRows.map((item) => item.original)\n\n  useEffect(() => {\n    table.setPageSize(20 * currentPage)\n  }, [currentPage])\n\n  const isCloseToBottom = ({\n    layoutMeasurement,\n    contentOffset,\n    contentSize\n  }): boolean => {\n    const paddingToBottom = 20\n    return (\n      /* eslint-disable */\n      layoutMeasurement.height + contentOffset.y >=\n      contentSize.height - paddingToBottom\n      /* eslint-enable */\n    )\n  }\n\n  return (\n    <>\n      <ScrollView\n        onScroll={({ nativeEvent }) => {\n          if (isCloseToBottom(nativeEvent)) {\n            console.log('[Scroll] Scroll close to bottom')\n            setCurrentPage(currentPage + 1)\n          }\n        }}\n      >\n        {isLoading && <ActivityIndicator animating />}\n\n        <View>\n          <FlatList\n            columnWrapperStyle={styles.columnWrapperStyle}\n            numColumns={4}\n            data={items}\n            renderItem={({ item }: { item: Asset }) => {\n              return (\n                <GridItemPreview\n                  item={item}\n                  onPress={onPress}\n                  s3client={s3client}\n                  s3Initialized={s3Initialized}\n                  appState={appState}\n                />\n              )\n            }}\n            keyExtractor={(item: Asset) => item.fileName}\n          ></FlatList>\n          <></>\n        </View>\n      </ScrollView>\n    </>\n  )\n}\n\nexport const DataGridColumns: any = () => {\n  const columnHelper = createColumnHelper<Asset>()\n  const columns: any = [\n    columnHelper.accessor('fileName', {\n      id: 'fileName',\n      header: 'Name',\n      cell: (info) => <></>\n    })\n  ]\n  return columns\n}\n","import React, { useContext, useEffect, useState } from 'react'\nimport { StyleSheet, View } from 'react-native'\nimport { Ionicons } from '@expo/vector-icons'\nimport { Text, IconButton, Card, FAB, ToggleButton } from 'react-native-paper'\nimport { Portal } from '@gorhom/portal'\nimport {\n  ApplicationContext,\n  ApplicationContextType\n} from '../../contexts/application/ApplicationContext'\nimport { useGetAssets } from '../../hooks/useGetAssets'\nimport { useS3Client } from '../../hooks/useS3Client'\nimport { DataTable } from '../DataTable'\n\nimport { Asset } from '../../services/types'\nimport { GetAssetArgs } from '../../services/s3/types'\nimport AppModal from '../Modal'\nimport { TextLink } from '../TextLink'\nimport { Preview } from '../Preview'\nimport { DataGrid } from '../DataGrid'\n\nexport const ListAssets: React.FC = () => {\n  const [selectedAsset, setSelectedAsset] = useState<Asset | undefined>(\n    undefined\n  )\n  const [isExtended, setIsExtended] = React.useState(false)\n  const [rerun, setRerun] = useState('')\n  const [appState] = useContext<ApplicationContextType>(ApplicationContext)\n  const [s3client, s3Initialized] = useS3Client(appState)\n  const [isTableView, setIsTableView] = React.useState(true)\n\n  const [dataQuery, setDataQuery] = useState<GetAssetArgs>({\n    Bucket: appState.s3credentials.bucket,\n    Prefix: '',\n    Delimiter: '/'\n  })\n  useEffect(() => {\n    setDataQuery({ ...dataQuery, Bucket: appState.s3credentials.bucket })\n  }, [appState, s3client])\n\n  const { data, isLoading, isError } = useGetAssets(\n    s3client,\n    s3Initialized,\n    dataQuery,\n    rerun,\n    appState.mutatedAt\n  )\n\n  const setPrefix = (prefix: string): void => {\n    setDataQuery({ ...dataQuery, Prefix: prefix })\n  }\n  const onPress = (asset: Asset): void => {\n    if (asset.isFolder) {\n      setPrefix(asset.prefix)\n    } else {\n      setSelectedAsset(asset)\n    }\n  }\n\n  const goBack: () => void = () => {\n    const prefix = dataQuery.Prefix\n    if (prefix !== '') {\n      const newPrefix = prefix.substring(\n        0,\n        prefix.substring(0, prefix.length - 1).lastIndexOf('/') + 1\n      )\n      setPrefix(newPrefix)\n    }\n  }\n\n  const goToPrefixByIndex = (index: number): void => {\n    const dirPathArray = dataQuery.Prefix?.split('/')\n    const newPrefix = `${dirPathArray.slice(0, index).join('/')}/`\n    setPrefix(newPrefix === '/' ? '' : newPrefix)\n  }\n\n  const dirPathArray = ['bucket', ...dataQuery.Prefix?.split('/')]\n  const dirPath = dirPathArray.map((item, index) => {\n    const isLastFragment = index === dirPathArray?.length - 1\n    return (\n      <TextLink\n        key={`dirPath${index}`}\n        isUnderlined={!isLastFragment}\n        onPress={() => {\n          goToPrefixByIndex(index)\n        }}\n      >\n        /\n        {!isLastFragment && (\n          <Ionicons name=\"folder-open-outline\" color=\"#ffbd43\" size={22} />\n        )}\n        {item}\n      </TextLink>\n    )\n  })\n\n  /* eslint-disable */\n  return (\n    <>\n      {s3Initialized ? (\n        <>\n          <Portal hostName=\"Reloader\">\n            <IconButton\n              animated\n              icon=\"reload\"\n              onPress={() => {\n                setRerun(`${Math.random()}`)\n              }}\n            />\n          </Portal>\n          <Portal hostName=\"Back\">\n            {dataQuery.Prefix?.length > 0 && (\n              <IconButton\n                icon=\"arrow-left\"\n                onPress={() => {\n                  goBack()\n                }}\n              />\n            )}\n          </Portal>\n          <View style={styles.root}>\n            <View style={styles.section1}>\n              {isError && <Text variant=\"headlineSmall\">Error </Text>}\n              <View style={styles.actionBarContainer}>\n                <Text variant=\"bodyMedium\" style={styles.path}>\n                  {dirPath}\n                </Text>\n                <View style={styles.buttonGroup}>\n                  <ToggleButton\n                    icon=\"dots-grid\"\n                    value=\"grid\"\n                    status={isTableView === false ? 'checked' : 'unchecked'}\n                    onPress={() => setIsTableView(false)}\n                  />\n                  <ToggleButton\n                    icon=\"table\"\n                    value=\"table\"\n                    status={isTableView === true ? 'checked' : 'unchecked'}\n                    onPress={() => setIsTableView(true)}\n                  />\n                </View>\n              </View>\n\n              <AppModal\n                isVisible={isExtended}\n                onClose={() => {\n                  setIsExtended(false)\n                }}\n              >\n                <Text>Upload files here</Text>\n              </AppModal>\n\n              {isTableView ? (\n                <DataTable\n                  assets={data}\n                  onPress={onPress}\n                  isLoading={isLoading}\n                />\n              ) : (\n                <DataGrid\n                  assets={data}\n                  onPress={onPress}\n                  isLoading={isLoading}\n                />\n              )}\n\n              <FAB\n                icon=\"plus\"\n                onPress={() => setIsExtended(!isExtended)}\n                visible\n                style={[styles.fabStyle]}\n              />\n            </View>\n            {selectedAsset && (\n              <Preview\n                onClose={() => setSelectedAsset(undefined)}\n                asset={selectedAsset}\n              />\n            )}\n          </View>\n        </>\n      ) : (\n        <Card style={styles.errorMessage}>\n          <Text>\n            S3 Client has not been initialized, please update your API\n            Configuration first.\n          </Text>\n        </Card>\n      )}\n    </>\n    /* eslint-enable */\n  )\n}\n\nconst styles = StyleSheet.create({\n  path: {\n    display: 'flex',\n    margin: 10,\n    flex: 1\n  },\n  fabStyle: {\n    bottom: 45,\n    right: 25,\n    position: 'absolute'\n  },\n  errorMessage: {\n    margin: 12,\n    padding: 10\n  },\n  root: {\n    flexDirection: 'row',\n    display: 'flex',\n    flex: 1,\n    flexGrow: 1\n  },\n  section1: {\n    flex: 3,\n    borderColor: 'gray',\n    borderRightWidth: 2,\n    flexDirection: 'column'\n  },\n  buttonGroup: {\n    display: 'flex',\n    flexDirection: 'row'\n  },\n  actionBarContainer: {\n    display: 'flex',\n    flexDirection: 'row'\n  }\n})\n","import { S3Client } from '@aws-sdk/client-s3'\nimport { useQuery, UseQueryResult } from '@tanstack/react-query'\nimport { S3TypeToInternalAdapter } from '../adapters/s3'\nimport { getAssets } from '../services/s3'\nimport { GetAssetArgs } from '../services/s3/types'\nimport { Asset } from '../services/types'\n\nexport const useGetAssets = (\n  client: S3Client,\n  clientInitialized: boolean,\n  params: GetAssetArgs,\n  rerun: string = '',\n  mutatedAt: Date | undefined\n): UseQueryResult<Asset[], unknown> => {\n  const queryResponse = useQuery(\n    [\n      'getAssets',\n      rerun,\n      params.Bucket || '',\n      params.Delimiter || '',\n      params.Prefix || '',\n      mutatedAt || ''\n    ],\n    async () => {\n      try {\n        const data = await getAssets(client, params)\n        const assets = S3TypeToInternalAdapter(data, params)\n        return assets\n      } catch (error) {\n        console.log('[useGetAssets] Error : ', error)\n      }\n      return []\n    },\n    {\n      enabled: clientInitialized,\n      refetchOnWindowFocus: false\n    }\n  )\n  return queryResponse\n}\n","import React from 'react'\r\nimport { ListAssets } from '../../components/ListAssets'\r\n\r\nexport default function Dashboard (): JSX.Element {\r\n  return (\r\n    <ListAssets />\r\n  )\r\n}\r\n","import React from 'react'\nimport { Appbar } from 'react-native-paper'\nimport { PortalHost } from '@gorhom/portal'\nconst Header = (props: any): JSX.Element => (\n  <Appbar.Header mode='center-aligned' elevated={true}>\n    <PortalHost name=\"Back\" />\n    <Appbar.Content title={props.title} />\n    <PortalHost name=\"Reloader\" />\n  </Appbar.Header>\n)\n\nexport default Header\n","import * as React from 'react'\nimport { Platform } from 'react-native'\nimport { BottomNavigation } from 'react-native-paper'\nimport { ApiConfiguration } from '../ApiConfiguration/index'\nimport Dashboard from '../../pages/dashboard'\nimport Header from '../Header'\n\nconst MobileNavigation: React.FC = () => {\n  const [index, setIndex] = React.useState(0)\n  const [routes] = React.useState([\n    { key: 'assets', title: 'Assets', focusedIcon: 'folder' },\n    {\n      key: 'api_configuration',\n      title: 'API Configuration',\n      focusedIcon: 'cogs'\n    }\n  ])\n\n  const renderScene = BottomNavigation.SceneMap({\n    assets: Dashboard,\n    api_configuration: ApiConfiguration\n  })\n\n  if (Platform.OS === 'web') {\n    return null\n  }\n\n  return (\n    <>\n      <Header title=\"BYOS\" />\n      <BottomNavigation\n        navigationState={{ index, routes }}\n        onIndexChange={setIndex}\n        renderScene={renderScene}\n      />\n    </>\n  )\n}\n\nexport default MobileNavigation\n","import AsyncStorage from '@react-native-async-storage/async-storage'\nexport const ApplicationStorageKey = 'byos/application'\nexport const DomainStorageKey = 'byos/domain'\n\nconst storeData: (value: any) => Promise<void> = async (value: any) => {\n  try {\n    await AsyncStorage.setItem(ApplicationStorageKey, JSON.stringify(value))\n  } catch (e) {\n    // saving error\n  }\n}\n\nconst getData: () => Promise<string> = async () => {\n  try {\n    const value = await AsyncStorage.getItem(ApplicationStorageKey)\n    if (value !== null) {\n      // value previously stored\n      return value\n    }\n  } catch (e) {\n    // error reading value\n  }\n  return ''\n}\n\nconst parseJson: (jsonString: string) => any = (jsonString: string) => {\n  try {\n    return JSON.parse(jsonString)\n  } catch (error) {\n    return {}\n  }\n}\n\nexport const getApplicationStateLS: (defaultValue: string) => Promise<any> = async (defaultValue: string = '{}') => {\n  const value = await getData()\n  if (value) {\n    return parseJson(value)\n  }\n  return parseJson(defaultValue)\n}\n\n// eslint-disable-next-line @typescript-eslint/no-misused-promises\nexport const setApplicationStateLS: (value: Object) => void = async (value: any) => {\n  await storeData(value)\n  return null\n}\n","import React from 'react'\r\n// import { useLinkClickHandler } from 'react-router-dom'\r\nimport { SaveCredentialsForm } from '../../components/SaveCredentialsForm'\r\n// import { useNavigate } from 'react-router-dom'\r\n\r\nexport default function Credentials (): JSX.Element {\r\n  // const [isOpen, setIsOpen] = useState(false)\r\n  // const navigate = useNavigate()\r\n  // const onClick = useLinkClickHandler('/credentials')\r\n  // useEffect(() => {\r\n  //     setIsOpen(true)\r\n  // }, [onClick, setIsOpen])\r\n\r\n  // const handleClose = () => {\r\n  //     setIsOpen(false)\r\n  //     navigate('/')\r\n  // }\r\n\r\n  return (\r\n    <>\r\n      <SaveCredentialsForm />\r\n    </>\r\n  )\r\n}\r\n","import { MD3LightTheme as DefaultTheme, MD3Theme } from 'react-native-paper'\n\nexport const theme: MD3Theme = {\n  ...DefaultTheme,\n  roundness: 2,\n  version: 3,\n  colors: {\n    ...DefaultTheme.colors\n  }\n}\n","import React, { useContext, useEffect, useState } from 'react'\r\nimport { Platform, View, StyleSheet } from 'react-native'\r\nimport { NavigationContainer } from '@react-navigation/native'\r\nimport { createNativeStackNavigator } from '@react-navigation/native-stack'\r\nimport { Provider as PaperProvider, Text, IconButton } from 'react-native-paper'\r\nimport { PortalProvider } from '@gorhom/portal'\r\n\r\nimport {\r\n  ApplicationContext,\r\n  initialData\r\n} from './contexts/application/ApplicationContext'\r\nimport MobileView from './components/MobileView'\r\nimport { setApplicationStateLS } from './services/localstorage'\r\nimport { useGetApplicationStateFromLs } from './hooks/useGetApplicationStateFromLS'\r\nimport Dashboard from './pages/dashboard'\r\nimport Credentials from './pages/credentials'\r\nimport { theme } from './theme'\r\nimport { ThemeContextInternal } from './contexts/theme/ThemeContextInternal'\r\n\r\nconst Stack = createNativeStackNavigator()\r\n\r\nconst styles = StyleSheet.create({\r\n  ButtonsWrapper: {\r\n    flexDirection: 'row'\r\n  },\r\n  Button: {\r\n    border: '1px',\r\n    borderStyle: 'solid'\r\n  }\r\n})\r\n\r\nfunction App (): JSX.Element {\r\n  const themeState = useState(theme)\r\n  const { data: savedApplicationData, isLoaded } =\r\n    useGetApplicationStateFromLs(initialData)\r\n\r\n  const applicationState = useState(savedApplicationData)\r\n  const [applicationStateData, setApplicationStateData] = applicationState\r\n\r\n  useEffect(() => {\r\n    setApplicationStateData(savedApplicationData)\r\n  }, [savedApplicationData])\r\n\r\n  useEffect(() => {\r\n    if (isLoaded) {\r\n      setApplicationStateLS({ ...applicationStateData })\r\n    }\r\n  }, [applicationStateData, isLoaded])\r\n\r\n  const navigationButtons = ({ navigation }): any => ({\r\n    headerTitle: (props) => <Text>BYOS</Text>,\r\n    // Add a placeholder button without the `onPress` to avoid flicker\r\n    headerRight: () => (\r\n      <View style={styles.ButtonsWrapper}>\r\n        <IconButton\r\n          style={styles.Button}\r\n          icon=\"home\"\r\n          onPress={() => navigation.navigate('Home')}\r\n        />\r\n        <IconButton\r\n          style={styles.Button}\r\n          icon=\"cogs\"\r\n          onPress={() => navigation.navigate('Credentials')}\r\n        />\r\n      </View>\r\n    )\r\n  })\r\n\r\n  return (\r\n    <ThemeContextInternal.Provider value={themeState}>\r\n      <ThemeProvider>\r\n        <PortalProvider>\r\n          <ApplicationContext.Provider value={applicationState}>\r\n            {Platform.OS === 'web' && (\r\n              <NavigationContainer>\r\n                <Stack.Navigator>\r\n                  <Stack.Screen\r\n                    name=\"Home\"\r\n                    component={Dashboard}\r\n                    options={navigationButtons}\r\n                  />\r\n                  <Stack.Screen\r\n                    name=\"Credentials\"\r\n                    component={Credentials}\r\n                    options={navigationButtons}\r\n                  />\r\n                </Stack.Navigator>\r\n              </NavigationContainer>\r\n            )}\r\n            <MobileView />\r\n          </ApplicationContext.Provider>\r\n        </PortalProvider>\r\n      </ThemeProvider>\r\n    </ThemeContextInternal.Provider>\r\n  )\r\n}\r\n\r\nconst ThemeProvider = ({ children }: React.PropsWithChildren): JSX.Element => {\r\n  const [theme] = useContext(ThemeContextInternal)\r\n  return <PaperProvider theme={theme}>{children}</PaperProvider>\r\n}\r\n\r\nexport default App\r\n","import { useMemo, useState } from 'react'\nimport { ApplicationState } from '../contexts/application/ApplicationContext'\nimport { getApplicationStateLS } from '../services/localstorage'\n\ninterface ApplicationStateHookReturn {\n  data: ApplicationState | undefined\n  isLoaded: boolean\n}\n\nexport const useGetApplicationStateFromLs = (initialData: ApplicationState | undefined): ApplicationStateHookReturn => {\n  const [d, setD] = useState<ApplicationState | undefined>(initialData)\n  const [isLoaded, setIsLoaded] = useState(false)\n  useMemo(() => {\n    getApplicationStateLS(\n      JSON.stringify(initialData)\n    ).then(data => {\n      setD(data)\n      setIsLoaded(true)\n    })\n      .catch(() => {\n        console.log('[useGetApplicationStateFromLs] Promise failure getApplicationStateLS')\n      })\n  }, [initialData])\n\n  return { data: d, isLoaded }\n}\n","import { createContext } from 'react'\r\n\r\nexport const RoutingContext = createContext(Object.create(null))\r\n","import React from 'react'\r\nimport Home from '../pages/home'\r\nimport Credentials from '../pages/credentials'\r\n\r\nexport interface InternalRouteDef {\r\n  path: string\r\n  component: JSX.Element\r\n  showInNavigation: boolean\r\n\r\n}\r\n\r\nexport interface RoutingObjectDef {\r\n  isReady: boolean\r\n  routes: InternalRouteDef\r\n}\r\n\r\nconst routes: InternalRouteDef[] = [\r\n  { path: '/credentials', component: <Credentials />, showInNavigation: true },\r\n  { path: '/', component: <Home />, showInNavigation: true }\r\n]\r\n\r\nconst internalRoutes = {\r\n  isReady: false,\r\n  routes\r\n}\r\n\r\nexport default internalRoutes\n","import React from 'react'\n\nexport default function Home (): JSX.Element {\n  return (\n    <>\n    </>\n  )\n}\n","import React, { useEffect } from 'react'\r\nimport { RoutingContext } from '../contexts/routing/RoutingContext'\r\n\r\nexport const BasicProvider: (children: any) => JSX.Element = ({ children }: React.PropsWithChildren) => {\r\n  const [routingState, setRoutingState] = React.useContext(RoutingContext)\r\n  useEffect(() => {\r\n    if (routingState.isReady === false) {\r\n      setRoutingState({ ...routingState, isReady: true })\r\n    }\r\n    // eslint-disable-next-line\r\n  }, [routingState.isReady, routingState.routes])\r\n  return <>\r\n    {children}\r\n  </>\r\n}\r\n","import React from 'react'\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query'\n\nconst queryClient = new QueryClient()\n\nexport default function QueryProvider ({ children }: React.PropsWithChildren): JSX.Element {\n  return (\n    <QueryClientProvider client={queryClient}>\n      {children}\n    </QueryClientProvider>\n  )\n}\n","import React, { useState } from 'react'\r\nimport { RoutingContext } from '../contexts/routing/RoutingContext'\r\nimport routes from '../routes'\r\nimport { BasicProvider } from './BasicProvider'\r\nimport QueryProvider from './QueryProvider'\r\n\r\nexport const Provider = ({ children }: React.PropsWithChildren): JSX.Element => {\r\n  const routingState = useState(routes)\r\n\r\n  /**\r\n       if (useAzureLogin) {\r\n          return <QueryProvider>\r\n              <RoutingContext.Provider value={routingState}>\r\n                  <AzureAdProvider >\r\n                      {children}\r\n                  </AzureAdProvider>\r\n              </RoutingContext.Provider>\r\n          </QueryProvider>\r\n      }else\r\n      { */\r\n  return (\r\n        <QueryProvider>\r\n            <RoutingContext.Provider value={routingState}>\r\n                <BasicProvider>\r\n                    {children}\r\n                </BasicProvider>\r\n            </RoutingContext.Provider>\r\n        </QueryProvider>)\r\n}\r\n","import React from 'react'\nimport BAap from './App'\nimport { Provider } from './providers/Provider'\n\nconst ExportApp: React.FC = () => {\n  return (\n    <Provider>\n      <BAap />\n    </Provider>\n  )\n}\n\nexport default ExportApp\n","import { StatusBar } from 'expo-status-bar';\nimport { StyleSheet, Text, View } from 'react-native';\nimport BYOSApp from \"./src/ExportApp\";\nimport { registerRootComponent } from 'expo';\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\nexport default function App() {\n  return (\n      <BYOSApp/>\n  );\n}\nregisterRootComponent(App);\n\n\n\n","import { registerRootComponent } from 'expo'\n\nimport App from './App'\n\n// registerRootComponent calls AppRegistry.registerComponent('main', () => App);\n// It also ensures that whether you load the app in Expo Go or in a native build,\n// the environment is set up appropriately\nregisterRootComponent(App)\n"],"sourceRoot":""}