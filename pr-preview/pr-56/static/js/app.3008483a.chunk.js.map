{"version":3,"sources":["src/contexts/routing/RoutingContext.ts","src/contexts/application/ApplicationContext.ts","src/components/Header/index.tsx","src/services/s3/index.ts","src/components/Input/InputField.tsx","src/components/SaveCredentialsForm/index.tsx","src/components/ApiConfiguration/index.tsx","src/adapters/s3.ts","src/components/ContextMenu/index.tsx","src/components/DataGrid/dataGridColumns.tsx","src/components/DataGrid/index.tsx","src/components/ListAssets/index.tsx","src/hooks/useS3Client.ts","src/hooks/useGetAssets.ts","src/pages/dashboard/index.tsx","src/components/MobileNavigation/index.tsx","src/services/localstorage/index.ts","src/theme/index.ts","src/App.tsx","src/hooks/useGetApplicationStateFromLS.ts","src/routes/index.tsx","src/pages/credentials/index.tsx","src/pages/home/index.tsx","src/providers/BasicProvider.tsx","src/providers/QueryProvider.tsx","src/providers/Provider.tsx","src/ExportApp.tsx","App.js","index.js"],"names":["RoutingContext","createContext","Object","create","initialData","s3credentials","apiKey","undefined","apiSecret","region","endpoint","bucket","s3client","otherStuff","ApplicationContext","Header","props","Appbar","mode","elevated","name","Content","title","buildS3Client","initializationData","credentials","client","S3Client","middlewareStack","add","next","context","args","step","getAssets","params","console","log","command","ListObjectsCommand","response","send","folders","CommonPrefixes","map","item","prefix","Prefix","etag","lastModified","size","files","Contents","ETag","Key","LastModified","Size","styles","StyleSheet","textInput","marginTop","InputField","control","label","render","field","value","onChange","onBlur","TextInput","onChangeText","text","style","SaveCredentialsForm","useContext","appState","setAppState","useForm","defaultValues","handleSubmit","getValues","reset","useEffect","useState","setSaved","onSubmit","onToggleSnackBar","data","setTimeout","s3Client","accessKeyId","secretAccessKey","Bucket","catch","React","visible","setVisible","container","flex","inner","padding","justifyContent","header","fontSize","marginBottom","height","borderColor","borderBottomWidth","snackBarContainer","KeyboardAvoidingView","behavior","Platform","OS","Card","Text","variant","Actions","Button","onPress","View","Snackbar","onDismiss","action","ApiConfiguration","S3TypeToInternalAdapter","assets","asset","fileName","replace","assetId","fileSize","updatedAt","isFolder","length","ContextMenu","dayjs","extend","relativeTime","icon","marginRight","iconType","exec","MaterialIcons","color","Feather","DataGridColumns","columnHelper","createColumnHelper","accessor","id","cell","info","row","original","getValue","slice","prettyBytes","fromNow","display","filter","flexBasis","paddingRight","cellFirstChild","alignItems","DataGrid","setData","table","useReactTable","columns","getCoreRowModel","getPaginationRowModel","setPageSize","DataTable","getHeaderGroups","headerGroup","headers","index","Title","isPlaceholder","flexRender","column","columnDef","getContext","getRowModel","rows","Row","getVisibleCells","Cell","Pagination","page","getState","pagination","pageIndex","numberOfPages","getPageCount","onPageChange","setPageIndex","path","margin","fabStyle","bottom","right","position","zIndex","errorMessage","ListAssets","isExtended","rerun","setRerun","useMemo","useS3Client","s3Initialized","Delimiter","dataQuery","setDataQuery","clientInitialized","queryResponse","useQuery","error","enabled","refetchOnWindowFocus","useGetAssets","isLoading","isError","setPrefix","hostName","IconButton","animated","Math","random","newPrefix","substring","lastIndexOf","goBack","ActivityIndicator","animating","AnimatedFAB","extended","animateFrom","iconMode","ScrollView","Dashboard","MobileNavigation","setIndex","key","focusedIcon","routes","renderScene","BottomNavigation","SceneMap","api_configuration","navigationState","onIndexChange","storeData","AsyncStorage","setItem","JSON","stringify","e","getData","getItem","parseJson","jsonString","parse","getApplicationStateLS","defaultValue","setApplicationStateLS","theme","DefaultTheme","roundness","version","colors","primary","secondary","App","routingState","d","setD","isLoaded","setIsLoaded","then","useGetApplicationStateFromLs","savedApplicationData","applicationState","applicationStateData","setApplicationStateData","Provider","isReady","route","internalRoutes","component","showInNavigation","BasicProvider","children","setRoutingState","queryClient","QueryClient","QueryProvider","ExportApp","backgroundColor","registerRootComponent"],"mappings":"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","file":"static/js/app.3008483a.chunk.js","sourcesContent":["import { createContext } from 'react'\r\n\r\nexport const RoutingContext = createContext(Object.create(null))\r\n","/**\r\n * This context will hold all of our application data like the current\r\n * user's api Keys, currently viewed directory, etc\r\n */\r\n\r\nimport { S3Client } from '@aws-sdk/client-s3'\r\nimport React, { createContext } from 'react'\r\n\r\nexport interface ApplicationState {\r\n  s3credentials: {\r\n    apiKey: string | undefined\r\n    apiSecret: string | undefined\r\n    region: string | undefined\r\n    endpoint: string | undefined\r\n    bucket: string | undefined\r\n  }\r\n  otherStuff: string\r\n  s3client: S3Client | undefined\r\n}\r\n\r\nexport const initialData: ApplicationState = {\r\n  s3credentials: {\r\n    apiKey: undefined,\r\n    apiSecret: undefined,\r\n    region: undefined,\r\n    endpoint: undefined,\r\n    bucket: undefined\r\n  },\r\n  s3client: undefined,\r\n  otherStuff: ''\r\n}\r\n\r\nexport type ApplicationContextType = [\r\n  ApplicationState,\r\n  React.Dispatch<React.SetStateAction<ApplicationState>>\r\n]\r\n\r\nexport const ApplicationContext = createContext<ApplicationContextType>(\r\n  Object.create(null)\r\n)\r\n","import React from 'react'\nimport { Appbar } from 'react-native-paper'\nimport { PortalHost } from '@gorhom/portal'\nconst Header = (props: any): JSX.Element => (\n  <Appbar.Header mode='center-aligned' elevated={true}>\n    <PortalHost name=\"Back\" />\n    <Appbar.Content title={props.title} />\n    <PortalHost name=\"Reloader\" />\n  </Appbar.Header>\n)\n\nexport default Header\n","import { S3Client, ListObjectsCommand } from '@aws-sdk/client-s3'\r\nimport { S3Initializer, GetAssetArgs, Asset } from './types'\r\nimport 'react-native-url-polyfill/auto'\r\nimport 'react-native-get-random-values'\r\n// eslint-disable-next-line\r\nimport { v4 as uuidv4 } from 'uuid'\r\n\r\nexport const buildS3Client = (initializationData: S3Initializer): S3Client => {\r\n  const { credentials, region, endpoint } = initializationData\r\n  const client = new S3Client({\r\n    region,\r\n    credentials,\r\n    endpoint\r\n  })\r\n  client.middlewareStack.add(\r\n    (next, context) => async (args) => {\r\n      // args.request.headers[\"Custom-Header\"] = \"value\";\r\n      // eslint-disable-next-line\r\n            // @ts-ignore\r\n      // delete args.request.headers[\"amz-sdk-request\"];\r\n      // delete args.request.headers[\"amz-sdk-invocation-id\"];//x-amz-content-sha256\r\n      // delete args.request.headers[\"x-amz-content-sha256\"];\r\n      // args.request.headers[\"date\"] = (new Date()).toUTCString();\r\n      // delete args.request.headers[\"x-amz-date\"];\r\n      // delete args.request.headers[\"x-amz-user-agent\"];\r\n      const result = await next(args)\r\n      return result\r\n    },\r\n    {\r\n      step: 'finalizeRequest',\r\n      name: 'removeHeaders'\r\n    }\r\n  )\r\n  return client\r\n}\r\n\r\nexport const getAssets: (\r\n  client: S3Client,\r\n  params: GetAssetArgs\r\n) => Promise<Asset[] | undefined> = async (client, params) => {\r\n  console.log('[s3:getAssets] Making a List Objects command')\r\n  const command = new ListObjectsCommand(params)\r\n  console.log('[s3:getAssets] Command ', command)\r\n  console.log('[s3:getAssets] Our s3 Client', client)\r\n  console.log('[s3:getAssets] Sending command using client.send')\r\n\r\n  const response = await client.send(command)\r\n  const folders: Asset[] =\r\n        (((response.CommonPrefixes?.map((item) => {\r\n          return {\r\n            prefix: item.Prefix,\r\n            etag: undefined,\r\n            name: item.Prefix,\r\n            lastModified: undefined,\r\n            size: 0\r\n          }\r\n        })))) || []\r\n  const files: Asset[] =\r\n        (((response.Contents?.map((item) => {\r\n          return {\r\n            prefix: '',\r\n            etag: item.ETag,\r\n            name: item?.Key,\r\n            lastModified: item?.LastModified,\r\n            size: item?.Size\r\n          }\r\n        })))) || []\r\n  return [...folders, ...files]\r\n}\r\n\r\nexport const deleteAsset: (assetId: string) => void = (_assetId) => {\r\n  /**\r\n     * Implementation here\r\n     */\r\n}\r\n","import { Controller } from 'react-hook-form'\nimport { StyleSheet } from 'react-native'\nimport { TextInput } from 'react-native-paper'\nimport React from 'react'\n\nconst styles = StyleSheet.create({\n  textInput: {\n    // borderColor: \"#000000\",\n    // borderBottomWidth: 1,\n    marginTop: 20\n  }\n})\n\nexport const InputField: (props: any) => JSX.Element = ({ control, name, label }: any) => {\n  if (control === undefined) {\n    return null\n  }\n  /* const {\n          field: { onChange, onBlur, value, ref },\n          fieldState: { invalid, isTouched, isDirty },\n          formState: { touchedFields, dirtyFields }\n      } = useController({\n          name,\n          control,\n          rules: { required: true },\n          defaultValue: \"\",\n      }); */\n\n  return <>\n        <Controller\n            control={control}\n            name={name}\n            render={({ field: { value, onChange, onBlur } }: any) => {\n              return <>\n                    <TextInput\n                        label={label}\n                        value={value}\n                        onChangeText={(text) => {\n                          console.log('[InputChange] name = ', name, ' value = ', text)\n                          onChange(text)\n                        }}\n                        onBlur={onBlur}\n                        style={styles.textInput}\n                    />\n                </>\n            }}\n        />\n    </>\n}\n","import React, { useContext, useEffect, useState } from 'react'\nimport { useForm } from 'react-hook-form'\nimport { ApplicationContext } from '../../contexts/application/ApplicationContext'\nimport { buildS3Client, getAssets } from '../../services/s3'\nimport { Text, Card, Snackbar } from 'react-native-paper'\nimport { InputField } from '../Input/InputField'\nimport { Button } from '../Button'\nimport { KeyboardAvoidingView, Platform, StyleSheet, View } from 'react-native'\nimport { S3Client } from '@aws-sdk/client-s3'\n\nexport const SaveCredentialsForm: React.FC = () => {\n  const [appState, setAppState] = useContext(ApplicationContext)\n  const { s3credentials } = appState\n  const { control, handleSubmit, getValues, reset } = useForm({\n    defaultValues: s3credentials\n  })\n\n  useEffect(() => {\n    reset(s3credentials)\n  }, [s3credentials])\n\n  const [, setSaved] = useState(false)\n\n  const onSubmit = (): void => {\n    onToggleSnackBar()\n    const data = getValues()\n    setAppState({\n      ...appState,\n      s3credentials: data as any,\n      s3client: undefined\n    })\n    setSaved(true)\n    setTimeout(() => {\n      setSaved(false)\n    }, 1000)\n    /**\n         * Build the s3 client here\n         */\n    const s3Client: S3Client = buildS3Client({\n      credentials: {\n        accessKeyId: data.apiKey,\n        secretAccessKey: data.apiSecret\n      },\n      region: data.region,\n      endpoint: data.endpoint\n    })\n\n    getAssets(s3Client, { Bucket: 'testinghumza' }).catch(() => {\n      console.log('[SaveCredentialsForm] Promise failure getAssets')\n    })\n  }\n\n  // snackbar\n  const [visible, setVisible] = React.useState<boolean>(false)\n  const onToggleSnackBar: () => void = () => setVisible(!visible)\n  const onDismissSnackBar: () => void = () => setVisible(false)\n\n  const styles = StyleSheet.create({\n    container: {\n      flex: 1\n    },\n    inner: {\n      padding: 24,\n      flex: 1,\n      justifyContent: 'space-around'\n    },\n    header: {\n      fontSize: 36,\n      marginBottom: 48\n    },\n    textInput: {\n      height: 40,\n      borderColor: '#000000',\n      borderBottomWidth: 1,\n      marginBottom: 36\n    },\n    snackBarContainer: {\n      flex: 1,\n      justifyContent: 'space-between'\n    }\n  })\n\n  return (\n        <KeyboardAvoidingView\n            behavior={Platform.OS === 'ios' ? 'padding' : 'height'}\n            style={styles.container}\n        >\n            <Card>\n                <Card.Content>\n                    <Text variant=\"headlineSmall\">API Configuration</Text>\n                    <InputField\n                        control={control}\n                        name=\"apiKey\"\n                        label=\"API KEY\"\n                    />\n\n                    <InputField\n                        control={control}\n                        name=\"apiSecret\"\n                        label=\"Api Secret\"\n                    />\n\n                    <InputField\n                        control={control}\n                        name=\"endpoint\"\n                        label=\"Endpoint\"\n                    />\n\n                    <InputField\n                        control={control}\n                        name=\"bucket\"\n                        label=\"Bucket\"\n                    />\n\n                    <InputField\n                        control={control}\n                        name=\"region\"\n                        label=\"Region\"\n                    />\n\n                </Card.Content>\n                <Card.Actions>\n                    <Button onPress={() => handleSubmit(onSubmit)}>Submit</Button>\n                </Card.Actions>\n            </Card>\n            <View style={styles.snackBarContainer}>\n                <Snackbar\n                    visible={visible}\n                    onDismiss={onDismissSnackBar}\n                    action={{\n                      label: 'Dismiss',\n                      onPress: () => {\n                        // Do something\n                      }\n                    }}\n                >\n\n                    Credentials are saved!\n\n                </Snackbar>\n            </View>\n        </KeyboardAvoidingView>\n  )\n}\n","import { SaveCredentialsForm } from '../SaveCredentialsForm'\nimport React from 'react'\n\nexport const ApiConfiguration: React.FC = () => {\n  return (\n    <SaveCredentialsForm />\n  )\n}\n","import { Asset, GetAssetArgs } from '../services/s3/types'\nimport { Asset as AppAssetType } from '../services/types'\nexport const S3TypeToInternalAdapter = (assets: Asset[], params: GetAssetArgs): AppAssetType[] => {\n  return assets.map((asset: Asset) => {\n    const fileName: string = asset.name.replace(params.Prefix, '')\n    const appAsset: AppAssetType = {\n      assetId: asset.etag,\n      fileName,\n      fileSize: asset.size,\n      updatedAt: asset.lastModified,\n      isFolder: asset.prefix?.length > 0,\n      prefix: asset.prefix\n    }\n    return appAsset\n  })\n}\n","import React from 'react'\n\nexport const ContextMenu: React.FC = () => {\n  /*\n  const [anchorEl] = React.useState<null | HTMLElement>(null)\n  const open = Boolean(anchorEl) */\n  /*\n  const _handleClick = (event: React.MouseEvent<HTMLElement>) => {\n    setAnchorEl(event.currentTarget);\n  };\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n  */\n\n  return (\n    <>\n    </>)\n}\n","import React from 'react'\nimport { ContextMenu } from '../ContextMenu'\nimport { createColumnHelper } from '@tanstack/react-table'\nimport { Asset } from '../../services/types'\nimport prettyBytes from 'pretty-bytes'\nimport dayjs from 'dayjs'\nimport relativeTime from 'dayjs/plugin/relativeTime'\nimport { MaterialIcons, Feather } from '@expo/vector-icons'\nimport { Platform, StyleSheet } from 'react-native'\n\ndayjs.extend(relativeTime)\n\nconst styles = StyleSheet.create({\n  icon: {\n    marginRight: '6px'\n  }\n})\n\n// icons for different file types or folders\nconst iconType = (asset: Asset): JSX.Element => {\n  const re = /(?:\\.([^.]+))?$/\n  const internalType = asset.isFolder\n    ? 'folder'\n    : re.exec(asset.fileName)[1] || ''\n  switch (internalType) {\n    case 'folder':\n      return (\n                <MaterialIcons\n                    name=\"folder\"\n                    color=\"#ffbd43\"\n                    size={24}\n                    style={styles.icon}\n                />\n      )\n    case 'txt':\n      return (\n                <Feather\n                    name=\"file-text\"\n                    color=\"#6565d6\"\n                    size={22}\n                    style={styles.icon}\n                />\n      )\n    default:\n      return (\n                <Feather\n                    name=\"file\"\n                    color=\"#6565d6\"\n                    size={22}\n                    style={styles.icon}\n                />\n      )\n  }\n}\n\nexport const DataGridColumns: any = () => {\n  const columnHelper = createColumnHelper<Asset>()\n  const columns: any = [\n    // Dispaly file name with icon\n    columnHelper.accessor('fileName', {\n      id: 'fileName',\n      header: 'Name',\n      cell: (info) => {\n        const row = info.row.original\n        const fileName = row.isFolder\n          ? info.getValue().slice(0, -1)\n          : info.getValue()\n        return (\n                    <>\n                        {iconType(row)} {fileName}\n                    </>\n        )\n      }\n    }),\n\n    // Display file size\n    columnHelper.accessor('fileSize', {\n      id: 'fileSize',\n      header: 'Size',\n      cell: (info) =>\n        !info.row.original.isFolder && prettyBytes(info.getValue())\n    }),\n\n    // Dispaly last modified\n    columnHelper.accessor('updatedAt', {\n      id: 'updatedAt',\n      header: 'Last Modified',\n      cell: (info) => {\n        return (\n          !info.row.original.isFolder &&\n                    dayjs(info.getValue()).fromNow()\n        )\n      }\n    }),\n\n    // Display column size\n    columnHelper.display({\n      id: 'actions',\n      cell: () => <ContextMenu />\n    })\n  ].filter((item) => {\n    return Platform.OS !== 'web' ? item.id === 'fileName' : true\n  })\n  return columns\n}\n","import React, { Fragment, useEffect } from 'react'\nimport { flexRender, getCoreRowModel, getPaginationRowModel, useReactTable } from '@tanstack/react-table'\nimport { DataGridColumns } from './dataGridColumns'\nimport { Asset } from '../../services/types'\nimport { DataTable, Text } from 'react-native-paper'\nimport { StyleSheet } from 'react-native'\n\nconst styles = StyleSheet.create({\n  cell: {\n    flexBasis: 'auto',\n    paddingRight: '30px'\n  },\n  cellFirstChild: {\n    flexBasis: '78%'\n  },\n  title: {\n    display: 'flex',\n    alignItems: 'center'\n  }\n})\n\nexport interface DataGridProps {\n  assets: Asset[] | undefined\n  onPress: (asset: Asset) => void\n}\n\nexport const DataGrid: (props: DataGridProps) => JSX.Element = ({ assets, onPress }: DataGridProps) => {\n  const [data, setData] = React.useState<Asset[]>(() => assets || [])\n  useEffect(() => {\n    setData(assets || [])\n  }, [assets])\n  const table = useReactTable({\n    data,\n    columns: DataGridColumns(),\n    getCoreRowModel: getCoreRowModel(),\n    getPaginationRowModel: getPaginationRowModel()\n\n  })\n\n  useEffect(() => {\n    table.setPageSize(20)\n  }, [])\n\n  return (\n    <DataTable >\n      <DataTable.Header>\n        {table.getHeaderGroups().map(headerGroup => (\n          <Fragment key={headerGroup.id}>\n            {headerGroup.headers.map((header, index) => (\n              <DataTable.Title key={header.id} style={index === 0 ? styles.cellFirstChild : styles.cell}>\n                <Text >\n                  {header.isPlaceholder\n                    ? null\n                    : flexRender(\n                      header.column.columnDef.header,\n                      header.getContext()\n                    )}\n                </Text >\n\n              </DataTable.Title>\n            ))}\n          </Fragment>\n        ))}\n      </DataTable.Header>\n      {table.getRowModel().rows.map(row => {\n        return <DataTable.Row key={row.id} onPress={() => { onPress(row.original) }}>\n          {row.getVisibleCells().map((cell, index) => (\n            <DataTable.Cell key={cell.id} style={index === 0 ? styles.cellFirstChild : styles.cell}>\n              <Text style={styles.title}>\n                {flexRender(cell.column.columnDef.cell, cell.getContext())}\n              </Text>\n            </DataTable.Cell>\n          ))}\n        </DataTable.Row>\n      })}\n      <DataTable.Pagination\n        page={table.getState().pagination.pageIndex + 1}\n        numberOfPages={table.getPageCount()}\n        onPageChange={(page) => table.setPageIndex(page - 1)}\n        label={`${table.getState().pagination.pageIndex + 1} of ${table.getPageCount()}`}\n      />\n    </DataTable>\n\n  )\n}\n","import React, { useContext, useEffect, useState } from 'react'\nimport {\n  ApplicationContext,\n  ApplicationContextType\n} from '../../contexts/application/ApplicationContext'\nimport { useGetAssets } from '../../hooks/useGetAssets'\nimport { useS3Client } from '../../hooks/useS3Client'\nimport { DataGrid } from '../DataGrid'\nimport { ScrollView, StyleSheet } from 'react-native'\n\nimport {\n  Text,\n  ActivityIndicator,\n  AnimatedFAB,\n  IconButton,\n  Card\n} from 'react-native-paper'\nimport { Asset } from '../../services/types'\nimport { GetAssetArgs } from '../../services/s3/types'\nimport { Portal } from '@gorhom/portal'\n\nconst styles = StyleSheet.create({\n  path: {\n    margin: 10\n  },\n  fabStyle: {\n    bottom: 16,\n    right: 16,\n    position: 'absolute',\n    zIndex: 1\n  },\n  errorMessage: {\n    margin: 12,\n    padding: 10\n  }\n})\n\nexport const ListAssets: React.FC = () => {\n  const [isExtended] = React.useState(false)\n  const [rerun, setRerun] = useState('')\n  const [appState] = useContext<ApplicationContextType>(ApplicationContext)\n  const [s3client, s3Initialized] = useS3Client(appState)\n  const [dataQuery, setDataQuery] = useState<GetAssetArgs>({\n    Bucket: appState.s3credentials.bucket,\n    Prefix: '',\n    Delimiter: '/'\n  })\n  useEffect(() => {\n    setDataQuery({ ...dataQuery, Bucket: appState.s3credentials.bucket })\n  }, [appState, s3client])\n\n  const { data, isLoading, isError } = useGetAssets(\n    s3client,\n    s3Initialized,\n    dataQuery,\n    rerun\n  )\n\n  const setPrefix = (prefix: string): void => {\n    setDataQuery({ ...dataQuery, Prefix: prefix })\n  }\n  const onPress = (asset: Asset): void => {\n    if (asset.isFolder) {\n      setPrefix(asset.prefix)\n    }\n  }\n\n  const goBack: () => void = () => {\n    const prefix = dataQuery.Prefix\n    if (prefix !== '') {\n      const newPrefix = prefix.substring(\n        0,\n        prefix.substring(0, prefix.length - 1).lastIndexOf('/') + 1\n      )\n      setPrefix(newPrefix)\n    }\n  }\n\n  return (\n    <>\n\n      {s3Initialized\n        ? <>\n        <Portal hostName=\"Reloader\">\n          <IconButton\n            animated={true}\n            icon=\"reload\"\n            onPress={() => {\n              setRerun(`${Math.random()}`)\n            }}\n          />\n        </Portal>\n        <Portal hostName=\"Back\">\n          {dataQuery.Prefix?.length > 0 && (\n            <IconButton\n              icon=\"arrow-left\"\n              onPress={() => {\n                goBack()\n              }}\n            />\n\n          )}\n        </Portal>\n        <Text variant=\"bodyLarge\" style={styles.path}>\n          {`Bucket Root /${dataQuery.Prefix}`}\n        </Text>\n        {isLoading && <ActivityIndicator animating={true} />}\n        {isError && <Text variant=\"headlineSmall\">Error </Text>}\n        <AnimatedFAB\n          icon={'plus'}\n          label={'Label'}\n          extended={isExtended}\n          onPress={() => console.log('Pressed')}\n          visible={true}\n          animateFrom={'right'}\n          iconMode={'static'}\n          style={[styles.fabStyle]}\n        />\n        <ScrollView>\n          {(data != null) && !isLoading && (\n            <DataGrid assets={data} onPress={onPress} />\n          )}\n        </ScrollView>\n      </>\n        : <Card style={styles.errorMessage}>\n          <Text>S3 Client has not been initialized, please update your API Configuration first.</Text>\n        </Card>}\n    </>\n  )\n}\n","import { S3Client } from '@aws-sdk/client-s3'\nimport { useMemo } from 'react'\nimport { ApplicationState } from '../contexts/application/ApplicationContext'\nimport { buildS3Client } from '../services/s3'\n\nexport const useS3Client: (appState: ApplicationState) => [S3Client | undefined, boolean] = (appState: ApplicationState) => {\n  const { s3credentials } = appState\n  const { apiKey, apiSecret, region, endpoint } = s3credentials\n  const [client, isInitialized] = useMemo(() => {\n    if (apiKey && apiSecret && endpoint) {\n      console.log('[useS3Client] Building S3 Client region = ', region)\n      console.log('[useS3Client] Building S3 Client apiKey = ', apiKey)\n\n      return [buildS3Client({\n        region,\n        credentials: {\n          accessKeyId: apiKey,\n          secretAccessKey: apiSecret\n        },\n        endpoint\n      }), true]\n    }\n    return [undefined, false]\n  }, [apiKey, apiSecret, region, endpoint])\n  return [client, isInitialized]\n}\n","import { S3Client } from '@aws-sdk/client-s3'\nimport { useQuery, UseQueryResult } from '@tanstack/react-query'\nimport { S3TypeToInternalAdapter } from '../adapters/s3'\nimport { getAssets } from '../services/s3'\nimport { GetAssetArgs } from '../services/s3/types'\nimport { Asset } from '../services/types'\n\nexport const useGetAssets = (client: S3Client, clientInitialized: boolean, params: GetAssetArgs, rerun: string = ''): UseQueryResult<Asset[], unknown> => {\n  const queryResponse = useQuery(['getAssets', rerun, params.Bucket || '', params.Delimiter || '', params.Prefix || ''], async () => {\n    try {\n      console.log('[useGetAssets] Getting data with params = ', params)\n      const data = await getAssets(client, params)\n      const assets = S3TypeToInternalAdapter(data, params)\n      console.log('[useGetAssets] Assets = ', assets)\n      return assets\n    } catch (error) {\n      console.log('[useGetAssets] Error : ', error)\n    }\n    return []\n  }, {\n    enabled: clientInitialized,\n    refetchOnWindowFocus: false\n  })\n  return queryResponse\n}\n","import React from 'react'\r\nimport { ListAssets } from '../../components/ListAssets'\r\n\r\nexport default function Dashboard (): JSX.Element {\r\n  return (\r\n    <ListAssets />\r\n  )\r\n}\r\n","import * as React from 'react'\nimport { BottomNavigation } from 'react-native-paper'\nimport { ApiConfiguration } from '../ApiConfiguration/index'\nimport Dashboard from '../../pages/dashboard'\n\nconst MobileNavigation: React.FC = () => {\n  const [index, setIndex] = React.useState(0)\n  const [routes] = React.useState([\n    { key: 'assets', title: 'Assets', focusedIcon: 'folder' },\n    { key: 'api_configuration', title: 'API Configuration', focusedIcon: 'cogs' }\n  ])\n\n  const renderScene = BottomNavigation.SceneMap({\n    assets: Dashboard,\n    api_configuration: ApiConfiguration\n  })\n\n  return (\n    <BottomNavigation\n      navigationState={{ index, routes }}\n      onIndexChange={setIndex}\n      renderScene={renderScene}\n    />\n  )\n}\n\nexport default MobileNavigation\n","import AsyncStorage from '@react-native-async-storage/async-storage'\nexport const ApplicationStorageKey = 'byos/application'\nexport const DomainStorageKey = 'byos/domain'\n\nconst storeData: (value: any) => Promise<void> = async (value: any) => {\n  try {\n    await AsyncStorage.setItem(ApplicationStorageKey, JSON.stringify(value))\n  } catch (e) {\n    // saving error\n  }\n}\n\nconst getData: () => Promise<string> = async () => {\n  try {\n    const value = await AsyncStorage.getItem(ApplicationStorageKey)\n    if (value !== null) {\n      // value previously stored\n      return value\n    }\n  } catch (e) {\n    // error reading value\n  }\n  return ''\n}\n\nconst parseJson: (jsonString: string) => any = (jsonString: string) => {\n  try {\n    return JSON.parse(jsonString)\n  } catch (error) {\n    return {}\n  }\n}\n\nexport const getApplicationStateLS: (defaultValue: string) => Promise<any> = async (defaultValue: string = '{}') => {\n  const value = await getData()\n  if (value) {\n    return parseJson(value)\n  }\n  return parseJson(defaultValue)\n}\n\n// eslint-disable-next-line @typescript-eslint/no-misused-promises\nexport const setApplicationStateLS: (value: Object) => void = async (value: any) => {\n  await storeData(value)\n  return null\n}\n","import { MD3LightTheme as DefaultTheme } from 'react-native-paper'\n\nexport const theme = {\n  ...DefaultTheme,\n  roundness: 2,\n  version: 3,\n  colors: {\n    ...DefaultTheme.colors,\n    primary: '#eeeeee',\n    secondary: '#112A46'\n  }\n}\n","import React, { useEffect, useState } from 'react'\r\n\r\n// import { HashRouter as Router, Routes, Route } from 'react-router-dom'\r\nimport { InternalRouteDef } from './routes'\r\n// import { Link } from 'react-router-dom'\r\nimport { RoutingContext } from './contexts/routing/RoutingContext'\r\nimport {\r\n  ApplicationContext,\r\n  initialData\r\n} from './contexts/application/ApplicationContext'\r\n/* import {\r\n    getApplicationStateLS,\r\n    setApplicationStateLS,\r\n} from './services/localstorage' */\r\n\r\nimport { Provider as PaperProvider } from 'react-native-paper'\r\nimport Header from './components/Header'\r\nimport MobileNavigation from './components/MobileNavigation'\r\nimport { setApplicationStateLS } from './services/localstorage'\r\nimport { useGetApplicationStateFromLs } from './hooks/useGetApplicationStateFromLS'\r\nimport { PortalProvider } from '@gorhom/portal'\r\nimport { theme } from './theme'\r\n\r\nfunction App (): JSX.Element {\r\n  const [routingState] = React.useContext(RoutingContext)\r\n  const { data: savedApplicationData, isLoaded } = useGetApplicationStateFromLs(initialData)\r\n\r\n  const applicationState = useState(savedApplicationData)\r\n\r\n  /* useEffect(() => {\r\n        applicationState[1](savedApplicationData);\r\n    }, [savedApplicationData]) */\r\n\r\n  const [applicationStateData, setApplicationStateData] = applicationState\r\n\r\n  useEffect(() => {\r\n    // setApplicationStateLS({ ...applicationStateData })\r\n    setApplicationStateData(savedApplicationData)\r\n  }, [savedApplicationData])\r\n\r\n  useEffect(() => {\r\n    if (isLoaded) {\r\n      console.log('[App] Application state was updated = ', applicationStateData)\r\n\r\n      setApplicationStateLS({ ...applicationStateData })\r\n    }\r\n  }, [applicationStateData, isLoaded])\r\n\r\n  return (\r\n    <PaperProvider theme={theme}>\r\n      <PortalProvider>\r\n        <ApplicationContext.Provider value={applicationState}>\r\n          {routingState.isReady &&\r\n            routingState.routes.map((route: InternalRouteDef) => {\r\n              return (\r\n                null\r\n              )\r\n            })}\r\n\r\n          <Header title=\"BYOS\" />\r\n          <MobileNavigation />\r\n\r\n        </ApplicationContext.Provider>\r\n      </PortalProvider>\r\n    </PaperProvider>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import { useMemo, useState } from 'react'\nimport { ApplicationState } from '../contexts/application/ApplicationContext'\nimport { getApplicationStateLS } from '../services/localstorage'\n\ninterface ApplicationStateHookReturn {\n  data: ApplicationState | undefined\n  isLoaded: boolean\n}\n\nexport const useGetApplicationStateFromLs = (initialData: ApplicationState | undefined): ApplicationStateHookReturn => {\n  const [d, setD] = useState<ApplicationState | undefined>(initialData)\n  const [isLoaded, setIsLoaded] = useState(false)\n  useMemo(() => {\n    getApplicationStateLS(\n      JSON.stringify(initialData)\n    ).then(data => {\n      setD(data)\n      setIsLoaded(true)\n    })\n      .catch(() => {\n        console.log('[useGetApplicationStateFromLs] Promise failure getApplicationStateLS')\n      })\n  }, [initialData])\n\n  return { data: d, isLoaded }\n}\n","import React from 'react'\r\nimport Home from '../pages/home'\r\nimport Credentials from '../pages/credentials'\r\n\r\nexport interface InternalRouteDef {\r\n  path: string\r\n  component: JSX.Element\r\n  showInNavigation: boolean\r\n\r\n}\r\n\r\nexport interface RoutingObjectDef {\r\n  isReady: boolean\r\n  routes: InternalRouteDef\r\n}\r\n\r\nconst routes: InternalRouteDef[] = [\r\n  { path: '/credentials', component: <Credentials />, showInNavigation: true },\r\n  { path: '/', component: <Home />, showInNavigation: true }\r\n]\r\n\r\nconst internalRoutes = {\r\n  isReady: false,\r\n  routes\r\n}\r\n\r\nexport default internalRoutes\n","import React from 'react'\r\n// import { useLinkClickHandler } from 'react-router-dom'\r\nimport { SaveCredentialsForm } from '../../components/SaveCredentialsForm'\r\n// import { useNavigate } from 'react-router-dom'\r\n\r\nexport default function Credentials (): JSX.Element {\r\n  // const [isOpen, setIsOpen] = useState(false)\r\n  // const navigate = useNavigate()\r\n  // const onClick = useLinkClickHandler('/credentials')\r\n  // useEffect(() => {\r\n  //     setIsOpen(true)\r\n  // }, [onClick, setIsOpen])\r\n\r\n  // const handleClose = () => {\r\n  //     setIsOpen(false)\r\n  //     navigate('/')\r\n  // }\r\n\r\n  return (\r\n    <>\r\n      <SaveCredentialsForm />\r\n    </>\r\n  )\r\n}\r\n","import React from 'react'\n\nexport default function Home (): JSX.Element {\n  return (\n    <>\n    </>\n  )\n}\n","import React, { useEffect } from 'react'\r\nimport { RoutingContext } from '../contexts/routing/RoutingContext'\r\n\r\nexport const BasicProvider: (children: any) => JSX.Element = ({ children }: React.PropsWithChildren) => {\r\n  const [routingState, setRoutingState] = React.useContext(RoutingContext)\r\n  useEffect(() => {\r\n    if (routingState.isReady === false) {\r\n      setRoutingState({ ...routingState, isReady: true })\r\n    }\r\n    // eslint-disable-next-line\r\n  }, [routingState.isReady, routingState.routes])\r\n  return <>\r\n    {children}\r\n  </>\r\n}\r\n","import React from 'react'\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query'\n\nconst queryClient = new QueryClient()\n\nexport default function QueryProvider ({ children }: React.PropsWithChildren): JSX.Element {\n  return (\n    <QueryClientProvider client={queryClient}>\n      {children}\n    </QueryClientProvider>\n  )\n}\n","import React, { useState } from 'react'\r\nimport { RoutingContext } from '../contexts/routing/RoutingContext'\r\nimport routes from '../routes'\r\nimport { BasicProvider } from './BasicProvider'\r\nimport QueryProvider from './QueryProvider'\r\n\r\nexport const Provider = ({ children }: React.PropsWithChildren): JSX.Element => {\r\n  const routingState = useState(routes)\r\n\r\n  /**\r\n       if (useAzureLogin) {\r\n          return <QueryProvider>\r\n              <RoutingContext.Provider value={routingState}>\r\n                  <AzureAdProvider >\r\n                      {children}\r\n                  </AzureAdProvider>\r\n              </RoutingContext.Provider>\r\n          </QueryProvider>\r\n      }else\r\n      { */\r\n  return (\r\n        <QueryProvider>\r\n            <RoutingContext.Provider value={routingState}>\r\n                <BasicProvider>\r\n                    {children}\r\n                </BasicProvider>\r\n            </RoutingContext.Provider>\r\n        </QueryProvider>)\r\n}\r\n","import React from 'react'\nimport BAap from './App'\nimport { Provider } from './providers/Provider'\n\nconst ExportApp: React.FC = () => {\n  return (\n    <Provider>\n      <BAap />\n    </Provider>\n  )\n}\n\nexport default ExportApp\n","import { StatusBar } from 'expo-status-bar';\nimport { StyleSheet, Text, View } from 'react-native';\nimport BYOSApp from \"./src/ExportApp\";\nimport { registerRootComponent } from 'expo';\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\nexport default function App() {\n  return (\n      <BYOSApp/>\n  );\n}\nregisterRootComponent(App);\n\n\n\n","import { registerRootComponent } from 'expo';\n\nimport App from './App';\n\n// registerRootComponent calls AppRegistry.registerComponent('main', () => App);\n// It also ensures that whether you load the app in Expo Go or in a native build,\n// the environment is set up appropriately\nregisterRootComponent(App);\n"],"sourceRoot":""}