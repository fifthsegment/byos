{"version":3,"sources":["src/contexts/application/ApplicationContext.ts","src/services/s3/s3.ts","src/components/Input/InputField.tsx","src/components/SaveCredentialsForm/index.tsx","src/components/ApiConfiguration/index.tsx","src/adapters/s3.ts","src/hooks/useS3Client.ts","src/components/ContextMenu/index.tsx","src/services/file-icon-service/index.ts","src/components/DataTable/dataTableColumns.tsx","src/services/rn-responsive-design/constants.ts","src/services/rn-responsive-design/useScreenSize.ts","src/components/DataTable/dataTable.tsx","src/services/rn-responsive-design/utils.ts","src/components/Modal/index.tsx","src/components/TextLink.tsx","src/contexts/theme/ThemeContextInternal.ts","src/services/backblaze/backblaze.ts","src/services/cross-service-storage/cross-service-storage.ts","src/components/Preview/Preview.tsx","src/components/GridItemPreview/ImagePreview.tsx","src/components/GridItemPreview/FilePreview.tsx","src/components/GridItemPreview/index.tsx","src/components/DataGrid/index.tsx","src/components/FileUploadProgress/Dialog.tsx","src/components/FileUploadProgress/FileUploadProgress.tsx","src/components/UploadFile/index.tsx","src/components/CreateFolder/CreateFolder.tsx","src/actions/deleteMultipleAssets.ts","src/components/ListAssets/index.tsx","src/hooks/useGetAssets.ts","src/pages/dashboard/index.tsx","src/components/Header/index.tsx","src/components/MobileView/index.tsx","src/services/localstorage/index.ts","src/pages/credentials/index.tsx","src/theme/index.ts","src/serviceWorkerRegistration.js","src/App.tsx","src/hooks/useGetApplicationStateFromLS.ts","src/contexts/routing/RoutingContext.ts","src/routes/index.tsx","src/pages/home/index.tsx","src/providers/BasicProvider.tsx","src/providers/QueryProvider.tsx","src/providers/Provider.tsx","src/ExportApp.tsx","App.js","index.js"],"names":["initialData","s3credentials","apiKey","undefined","apiSecret","region","endpoint","bucket","backblaze","authorizationToken","downloadUrl","s3ApiUrl","s3client","otherStuff","mutatedAt","ApplicationContext","createContext","Object","create","getSignedUrl","require","buildS3Client","initializationData","credentials","client","S3Client","bucketEndpoint","forcePathStyle","middlewareStack","add","next","context","args","step","name","getAssets","params","command","ListObjectsCommand","response","send","folders","CommonPrefixes","map","item","prefix","Prefix","etag","lastModified","size","key","files","Contents","ETag","Key","LastModified","Size","updateAsset","data","CopyObjectCommand","console","log","err","deleteAsset","DeleteObjectCommand","getAsset","assets","Bucket","Delete","Objects","asset","DeleteObjectsCommand","GetObjectCommand","getDownloadLink","s3Client","expiresIn","uploadFileS3","config","request","headers","path","hostname","protocol","fetch","then","Promise","_resolve","reject","Error","error","filename","file","input","Body","newS3Client","cmd","PutObjectCommand","uploadProgress","handler","XhrHttpHandler","requestHandler","on","progress","Math","round","loaded","total","checkFileExists","parallelUploads3","Upload","tags","leavePartsOnError","done","e","fileKey","HeadObjectCommand","CORSConfiguration","CORSRules","push","ID","AllowedHeaders","AllowedMethods","AllowedOrigins","MaxAgeSeconds","ExposeHeaders","PutBucketCorsCommand","styles","StyleSheet","textInput","marginTop","InputField","control","label","render","field","value","onChange","onBlur","TextInput","onChangeText","text","style","SaveCredentialsForm","useContext","appState","setAppState","useForm","defaultValues","handleSubmit","getValues","reset","useEffect","useState","setSaved","onSubmit","onToggleSnackBar","setTimeout","accessKeyId","secretAccessKey","catch","React","visible","setVisible","container","flex","inner","padding","justifyContent","header","fontSize","marginBottom","height","borderColor","borderBottomWidth","snackBarContainer","KeyboardAvoidingView","behavior","Platform","OS","Card","Content","Text","variant","Actions","Button","onPress","View","Snackbar","onDismiss","action","ApiConfiguration","S3TypeToInternalAdapter","fileName","replace","assetId","fileSize","updatedAt","isFolder","length","useS3Client","useMemo","ContextMenu","fileToIcon","fileExt","dayjs","extend","relativeTime","icon","iconType","internalType","exec","fileExtension","split","pop","Feather","color","IndeterminateCheckbox","indeterminate","rest","className","ref","useRef","current","checked","Checkbox","status","DataGridColumns","columnHelper","createColumnHelper","accessor","id","table","cell","row","original","getIsSelected","getIsSomeSelected","toggleSelected","info","getValue","slice","prettyBytes","fromNow","display","filter","getScreenType","px","window","Dimensions","get","screenType","width","useScreenSize","dimensions","setDimensions","subscription","addEventListener","screen","remove","tableHead","sorterIcon","marginLeft","cellFirstChild","flexBasis","title","alignItems","DataTable","isLoading","deleteAssets","setData","sorting","setSorting","columns","setColumns","currentPage","setCurrentPage","includes","isMobile","column","resetRowSelection","join","useReactTable","state","onSortingChange","getCoreRowModel","getSortedRowModel","getPaginationRowModel","selectedRows","getSelectedRowModel","rows","setPageSize","getStyle","isHeader","maxWidth","position","top","marginRight","hostName","ToggleButton","Header","getHeaderGroups","headerGroup","index","Title","isPlaceholder","onClick","getToggleSortingHandler","flexRender","columnDef","getContext","asc","AntDesign","desc","getIsSorted","ScrollView","onScroll","layoutMeasurement","contentOffset","contentSize","y","isCloseToBottom","nativeEvent","ActivityIndicator","animating","getRowModel","Row","getVisibleCells","Cell","Pagination","page","getState","pagination","pageIndex","numberOfPages","getPageCount","onPageChange","setPageIndex","centeredView","modalView","backgroundColor","borderRadius","button","elevation","buttonOpen","buttonClose","textStyle","textAlign","modalText","AppModal","isVisible","onClose","children","Portal","Modal","TextLink","isUnderlined","underline","textDecorationLine","ThemeContextInternal","authorizeAccount","axios","method","url","getBaseUrl","Accept","Authorization","getDownloadLinkByKey","bucketId","fileNamePrefix","validDurationInSeconds","token","btoa","toLowerCase","S3GetDownloadUrl","Preview","theme","isEditing","setIsEditing","setUpdateAsset","setText","screenSize","performingAction","setPerformingAction","handleSave","s3UpdateAsset","CopySource","Date","handleDelete","deleteParams","handleDownload","link","a","document","createElement","href","download","body","appendChild","click","mainMobile","main","IconButton","closeButton","section2Mobile","centered","section2","textCenter","horizontal","flexGrow","flexDirection","minWidth","margin","imageExtensions","GridItemImagePreview","s3Initialized","d","setD","setError","setLoaded","setShowPreview","isImage","fileIcon","loadImage","stream","Response","blob","blobIn","fileReaderInstance","FileReader","readAsDataURL","onload","base64","result","TouchableOpacity","Image","source","uri","toString","preview","errorIcon","wrapper","bottom","GridItemFilePreview","GridItemPreview","marginVertical","marginHorizontal","overflow","paddingRight","columnWrapperStyle","DataGrid","numColumns","setNumColumns","items","flatRows","FlatList","renderItem","keyExtractor","dialog","left","Dialog_","showOverwite","onOverwrite","onSkip","Dialog","dismissable","FileUploadProgress","onSuccess","onError","setUploadProgress","setShowOverwrite","onUpload","_x","snackbarcontainer","snackbarinner","snackbartext","uploadcontainer","activityindicator","UploadFile","doReload","doCloseModal","setIsLoading","filesToUpload","setFilesToUpload","Array","from","selectFile","_DocumentPicker","multiple","toUpload","output","resp","CreateFolder","folderName","setFolderName","createFolder","mode","ButtonWrapper","getInfiniteAssets","folder","resolve","ListObjectsV2Command","NextContinuationToken","ContinuationToken","deleteMultipleAssets","allFolderAssets","all","allAssets","flat","ListAssets","selectedAsset","setSelectedAsset","isExtended","setIsExtended","uploadModalVisible","setUploadModalVisible","createFolderModalVisible","setCreateFolderModalVisible","rerun","setRerun","isTableView","setIsTableView","Delimiter","dataQuery","setDataQuery","clientInitialized","queryResponse","useQuery","enabled","refetchOnWindowFocus","useGetAssets","isError","setPrefix","dirPathArray","dirPath","isLastFragment","newPrefix","goToPrefixByIndex","Ionicons","random","animated","substring","lastIndexOf","goBack","root","section1","actionBarContainer","buttonGroup","FAB","Group","backdropColor","onStateChange","open","fabStyle","actions","errorMessage","right","borderRightWidth","Dashboard","props","Appbar","elevated","MobileNavigation","setIndex","focusedIcon","routes","renderScene","BottomNavigation","SceneMap","api_configuration","navigationState","onIndexChange","storeData","AsyncStorage","setItem","JSON","stringify","getData","getItem","parseJson","jsonString","parse","getApplicationStateLS","defaultValue","setApplicationStateLS","Credentials","DefaultTheme","roundness","version","colors","isLocalhost","Boolean","location","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","Stack","createNativeStackNavigator","ButtonsWrapper","border","borderStyle","ThemeProvider","App","themeState","isLoaded","setIsLoaded","useGetApplicationStateFromLs","savedApplicationData","applicationState","applicationStateData","setApplicationStateData","navigationButtons","navigation","headerTitle","headerRight","navigate","Provider","NavigationContainer","Navigator","Screen","component","options","MobileView","URL","process","origin","contentType","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration","RoutingContext","internalRoutes","isReady","showInNavigation","BasicProvider","routingState","setRoutingState","queryClient","QueryClient","QueryProvider","ExportApp","registerRootComponent"],"mappings":"kWAuBaA,EAAgC,CAC3CC,cAAe,CACbC,YAAQC,EACRC,eAAWD,EACXE,YAAQF,EACRG,cAAUH,EACVI,YAAQJ,GAEVK,UAAW,CACTC,mBAAoB,GACpBC,YAAa,GACbC,SAAU,IAEZC,cAAUT,EACVU,WAAY,GACZC,eAAWX,GAQAY,EAAqBC,wBAChCC,OAAOC,OAAO,O,uKClBRC,EAAiBC,EAAQ,KAAzBD,aAEKE,EAAgB,SAACC,GAC5B,IAAQC,EAAkCD,EAAlCC,YAAalB,EAAqBiB,EAArBjB,OAAQC,EAAagB,EAAbhB,SAEvBkB,EAAS,IAAIC,WAAS,CAC1BpB,SACAkB,cACAjB,WACAoB,gBAAgB,EAChBC,gBAAgB,IAsBlB,OApBAH,EAAOI,gBAAgBC,KACrB,SAACC,EAAMC,GAAP,6BAAmB,UAAOC,GAYxB,aADqBF,EAAKE,MAX5B,wDAcA,CACEC,KAAM,kBACNC,KAAM,kBAGHV,GAGIW,EAGoB,sBAAG,UAAOX,EAAQY,GAAY,IAAD,IACtDC,EAAU,IAAIC,qBAAmBF,GAEjCG,QAAiBf,EAAOgB,KAAKH,GAC7BI,GACJ,SAAAF,EAASG,qBAAT,IAAyBC,KAAI,SAACC,GAC5B,MAAO,CACLC,OAAQD,EAAKE,OACbC,UAAM5C,EACN+B,KAAMU,EAAKE,OACXE,kBAAc7C,EACd8C,KAAM,EACNC,IAAKN,EAAKE,aAER,GACFK,GACJ,SAAAZ,EAASa,eAAT,IAAmBT,KAAI,SAACC,GACtB,MAAO,CACLC,OAAQ,GACRE,KAAMH,EAAKS,KACXnB,KAAI,MAAEU,OAAF,EAAEA,EAAMU,IACZN,aAAY,MAAEJ,OAAF,EAAEA,EAAMW,aACpBN,KAAI,MAAEL,OAAF,EAAEA,EAAMY,KACZN,IAAKN,EAAKU,UAER,GACR,MAAM,GAAN,WAAWb,GAAX,IAAuBU,OA1BQ,wDA6BpBM,EAGI,sBAAG,UAAOjC,EAAQY,GACjC,IACE,IAAMsB,QAAalC,EAAOgB,KAAK,IAAImB,oBAAkBvB,IAErD,OADAwB,QAAQC,IAAI,gBAAiBH,GACtBA,EACP,MAAOI,GACPF,QAAQC,IAAI,QAASC,OANR,wDAUJC,EAGI,sBAAG,UAAOvC,EAAQY,GACjC,IAEE,aADmBZ,EAAOgB,KAAK,IAAIwB,sBAAoB5B,IAEvD,MAAO0B,GACPF,QAAQC,IAAI,QAASC,OALR,wDA4BJG,GAfI,sBAAG,UAAOzC,EAAQjB,EAAQ2D,GACzC,IACE,IAAM9B,EAAoC,CACxC+B,OAAQ5D,EACR6D,OAAQ,CACNC,QAASH,EAAOvB,KAAI,SAAC2B,GAAD,MAAY,CAAEhB,IAAKgB,EAAMhB,UAIjD,aADmB9B,EAAOgB,KAAK,IAAI+B,uBAAqBnC,IAExD,MAAO0B,GACPF,QAAQC,IAAI,QAASC,OAXR,GAkBA,sBAAG,UAAOtC,EAAQY,GACjC,IAAMC,EAAU,IAAImC,mBAAiBpC,GAGrC,aAD+CZ,EAAOgB,KAAKH,MAH5C,yDAOJoC,EAAe,sBAAG,UAC7BC,EACAtC,GAEA,IAAMC,EAAU,IAAImC,mBAAiBpC,GAErC,aADkBjB,EAAauD,EAAUrC,EAAS,CAAEsC,UAAW,UALrC,wDA6GfC,GAhGI,sBAAG,UAAOpD,EAAQY,GACjC,IAAMC,EAAU,IAAImC,mBAAiBpC,GAC/B9B,QAAiBkB,EAAOqD,OAAOvE,WACrC+B,EAAQT,gBAAgBC,KACtB,SAACC,GAAD,6BAAU,UAAOE,GAEf,MAA0BA,EAAK8C,QAAvBC,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,KACTC,EAAuB3E,EAAvB2E,SAAUC,EAAa5E,EAAb4E,SAOlB,OANAC,MAASD,EAAJ,KAAiBD,EAAjB,IAA6B7C,EAAO+B,OAASa,EAAQ,CACxDD,QAASA,IACRK,MAAK,SAAC7C,GACPqB,QAAQC,IAAI,cAAetB,MAGtB,IAAI8C,SAAQ,SAACC,EAAUC,GAAX,OACjBA,EAAO,IAAIC,MAAM,8BAXrB,wDAcA,CACEvD,KAAM,kBACNC,KAAM,OAGV,UACQV,EAAOgB,KAAKH,GAClB,MAAOoD,QAzBM,GAsEgB,sBAAG,UAClCf,EACAgB,EACAnF,EACAoF,GAEA,IAAIC,EAAQ,CACVtC,IAAKoC,EACLvB,OAAQ5D,GAENoF,IACFC,EAAMC,KAAOF,GAGf,IAAMG,EAAc,IAAIrE,WAAS,CAC/BF,YAAamD,EAASG,OAAOtD,YAC7BlB,OAAQqE,EAASG,OAAOxE,OACxBC,SAAUoE,EAASG,OAAOvE,SAC1BoB,eAAgBgD,EAASG,OAAOnD,eAChCC,eAAgB+C,EAASG,OAAOlD,iBAE5BoE,EAAM,IAAIC,mBAAiBJ,GAGjC,aADuBE,EAAYtD,KAAKuD,MAvBT,GA0BR,sBAAG,UAC1BrB,EACAgB,EACAnF,EACA0F,EACAN,GAEA,IAAIC,EAAQ,CACVtC,IAAKoC,EACLvB,OAAQ5D,GAENoF,IACFC,EAAMC,KAAOF,GAEf,IAAMO,EAAU,IAAIC,iBAAe,IAE7BL,EAAc,IAAIrE,WAAS,CAC/BF,YAAamD,EAASG,OAAOtD,YAC7BlB,OAAQqE,EAASG,OAAOxE,OACxBC,SAAUoE,EAASG,OAAOvE,SAC1BoB,eAAgBgD,EAASG,OAAOnD,eAChCC,eAAgB+C,EAASG,OAAOlD,eAChCyE,eAAgBF,IAGZH,EAAM,IAAIC,mBAAiBJ,GAOjC,OALAM,EAAQG,GAAG,uBAAuB,SAACC,GACjCL,EAAeM,KAAKC,MAAOF,EAASG,OAASH,EAASI,MAAS,eAE1CZ,EAAYtD,KAAKuD,MA9BjB,+DA+DZY,GA5Bc,sBAAG,UAC5BjC,EACAgB,EACAnF,EACAoF,GAEA,IACE/B,QAAQC,IAAI,gCACZ,IAAM+C,EAAmB,IAAIC,SAAO,CAClCrF,OAAQkD,EACRtC,OAAQ,CAAE+B,OAAQ5D,EAAQ+C,IAAKoC,EAAUG,KAAMF,GAE/CmB,KAAM,GAGNC,mBAAmB,IAGrBH,EAAiBP,GAAG,sBAAsB,SAACC,GACzC1C,QAAQC,IAAI,cAAeyC,YAGvBM,EAAiBI,OACvB,MAAOC,GACPrD,QAAQC,IAAIoD,OAxBW,GA4BC,sBAAG,UAC7BvC,EACAwC,EACA3G,GAEA,IAAMqF,EAAQ,CACZtC,IAAK4D,EACL/C,OAAQ5D,GAEJwF,EAAM,IAAIoB,oBAAkBvB,GAElC,aADuBlB,EAASlC,KAAKuD,MAVX,2D,GAcL,sBAAG,UACxBrB,EACAtC,GAUAA,EAAOgF,kBAAkBC,UAAUC,KARZ,CACrBC,GAAI,YACJC,eAAgB,CAAC,IACjBC,eAAgB,CAAC,IACjBC,eAAgB,CAAC,IACjBC,cAAe,KACfC,cAAe,CAAC,uBAGlB,IAAMvF,EAAU,IAAIwF,uBAAqBzF,GAGzC,aADmDsC,EAASlC,KAAKH,MAf5C,G,iCC3UjByF,EAASC,UAAW7G,OAAO,CAC/B8G,UAAW,CAGTC,UAAW,MAIFC,EAA0C,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,QAASjG,EAAuB,EAAvBA,KAAMkG,EAAiB,EAAjBA,MACvE,YAAgBjI,IAAZgI,EACK,KAaF,mCACD,cAAC,aAAD,CACIA,QAASA,EACTjG,KAAMA,EACNmG,OAAQ,YAAkD,IAAD,IAA9CC,MAASC,EAAqC,EAArCA,MAAOC,EAA8B,EAA9BA,SAAUC,EAAoB,EAApBA,OACnC,OAAO,mCACD,cAACC,EAAA,QAAD,CACIN,MAAOA,EACPG,MAAOA,EACPI,aAAc,SAACC,GACbhF,QAAQC,IAAI,wBAAyB3B,EAAM,YAAa0G,GACxDJ,EAASI,IAEXH,OAAQA,EACRI,MAAOf,EAAOE,oB,wlBChC/B,IAAMc,GAAgC,WAC3C,MAAgCC,qBAAWhI,GAA3C,WAAOiI,EAAP,KAAiBC,EAAjB,KACQhJ,EAAkB+I,EAAlB/I,cACR,EAAoDiJ,kBAAQ,CAC1DC,cAAelJ,IADTkI,EAAR,EAAQA,QAASiB,EAAjB,EAAiBA,aAAcC,EAA/B,EAA+BA,UAAWC,EAA1C,EAA0CA,MAI1CC,qBAAU,WACRD,EAAMrJ,KACL,CAACA,IAEJ,MAAqBuJ,oBAAS,GAArBC,EAAT,YAEMC,EAAQ,sBAAG,YACfC,IACA,IAAMjG,EAAO2F,IAEbJ,EAAY,GAAD,MACND,GADM,IAET/I,cAAeyD,EACf9C,cAAUT,KAGZsJ,GAAS,GACTG,YAAW,WACTH,GAAS,KACR,KAIH,IAAM/E,EAAqBrD,EAAc,CACvCE,YAAa,CACXsI,YAAanG,EAAKxD,OAClB4J,gBAAiBpG,EAAKtD,WAExBC,OAAQqD,EAAKrD,OACbC,SAAUoD,EAAKpD,WAGjB6B,EAAUuC,EAAU,CAAEP,OAAQ,iBAAkB4F,OAAM,WACpDnG,QAAQC,IAAI,yDA3BF,qDAgCd,EAA8BmG,IAAMR,UAAkB,GAAtD,WAAOS,EAAP,KAAgBC,EAAhB,KACMP,EAA+B,kBAAMO,GAAYD,IAGjDnC,EAASC,UAAW7G,OAAO,CAC/BiJ,UAAW,CACTC,KAAM,GAERC,MAAO,CACLC,QAAS,GACTF,KAAM,EACNG,eAAgB,gBAElBC,OAAQ,CACNC,SAAU,GACVC,aAAc,IAEhB1C,UAAW,CACT2C,OAAQ,GACRC,YAAa,UACbC,kBAAmB,EACnBH,aAAc,IAEhBI,kBAAmB,CACjBV,KAAM,EACNG,eAAgB,mBAIpB,OACE,eAACQ,GAAA,QAAD,CACEC,SAA0B,QAAhBC,UAASC,GAAe,UAAY,SAC9CrC,MAAOf,EAAOqC,UAFhB,UAIE,eAACgB,EAAA,QAAD,WACE,eAACA,EAAA,QAAKC,QAAN,WACE,cAACC,EAAA,QAAD,CAAMC,QAAQ,gBAAd,+BACA,cAAC,EAAD,CAAYnD,QAASA,EAASjG,KAAK,SAASkG,MAAM,YAElD,cAAC,EAAD,CAAYD,QAASA,EAASjG,KAAK,YAAYkG,MAAM,eAErD,cAAC,EAAD,CAAYD,QAASA,EAASjG,KAAK,WAAWkG,MAAM,aAEpD,cAAC,EAAD,CAAYD,QAASA,EAASjG,KAAK,SAASkG,MAAM,WAElD,cAAC,EAAD,CAAYD,QAASA,EAASjG,KAAK,SAASkG,MAAM,cAEpD,cAAC+C,EAAA,QAAKI,QAAN,UAEE,cAACC,EAAA,QAAD,CAAQC,QAASrC,EAAaM,GAA9B,yBAGJ,cAACgC,EAAA,QAAD,CAAM7C,MAAOf,EAAOgD,kBAApB,SACE,cAACa,EAAA,QAAD,CACE1B,QAASA,EACT2B,UArD8B,kBAAM1B,GAAW,IAsD/C2B,OAAQ,CACNzD,MAAO,UACPqD,QAAS,cALb,0CCzGKK,GAA6B,WAKxC,OAAO,cAAC,GAAD,K,wCCNIC,GAA0B,SAAC7H,EAAiB9B,GACvD,OAAO8B,EAAOvB,KAAI,SAAC2B,GAAkB,IAAD,EAC5B0H,EAAmB1H,EAAMpC,KAAK+J,QAAQ7J,EAAOU,OAAQ,IAW3D,MAV+B,CAC7BoJ,QAAS5H,EAAMvB,KACfiJ,WACAG,SAAU7H,EAAMrB,KAChBmJ,UAAW9H,EAAMtB,aACjBqJ,UAAU,SAAA/H,EAAMzB,aAAN,IAAcyJ,QAAS,EACjCzJ,OAAQyB,EAAMzB,OACdE,KAAMuB,EAAMvB,KACZG,IAAKoB,EAAMpB,SCRJqJ,GAE0B,SAACvD,GACtC,IAAQ/I,EAAkB+I,EAAlB/I,cACAC,EAAwCD,EAAxCC,OAAQE,EAAgCH,EAAhCG,UAAWC,EAAqBJ,EAArBI,OAAQC,EAAaL,EAAbK,SACnC,EAAgCkM,mBAAQ,WACtC,OAAItM,GAAUE,GAAaE,EAIlB,CACLe,EAAc,CACZhB,SACAkB,YAAa,CACXsI,YAAa3J,EACb4J,gBAAiB1J,GAEnBE,cAEF,GAGG,MAACH,GAAW,KAClB,CAACD,EAAQE,EAAWC,EAAQC,IAlB/B,WAmBA,MAAO,CAnBP,Y,4ICRWmM,GAAwB,WAanC,OACE,8BChBSC,GAAa,SAACC,GACzB,OAAQA,GACN,IAAK,MACL,IAAK,OACL,IAAK,MACH,MAAO,QAET,QACE,MAAO,S,gQCKbC,KAAMC,OAAOC,MAEb,IAAMhF,GAASC,UAAW7G,OAAO,CAC/B6L,KAAM,GACNrH,SAAU,KAINsH,GAAW,SAAC1I,GAChB,IACM2I,EAAe3I,EAAM+H,SACvB,SAFO,kBAGJa,KAAK5I,EAAM0H,UAAU,IAAM,GAC5BmB,EAAgB7I,EAAM0H,SAASoB,MAAM,KAAKC,MAEhD,OAAQJ,GACN,IAAK,SACH,OACE,cAACK,GAAA,QAAD,CAASpL,KAAK,SAASqL,MAAM,UAAUtK,KAAM,GAAI4F,MAAOf,GAAOiF,OAEnE,QACE,OACE,cAACO,GAAA,QAAD,CACEpL,KAAMwK,GAAWS,GACjBI,MAAM,UACNtK,KAAM,GACN4F,MAAOf,GAAOiF,SAMlBS,GAAwB,SAAC,GAIgD,IAH7EC,EAG4E,EAH5EA,cAEGC,GACyE,EAF5EC,UAE4E,YACtEC,EAAM5D,IAAM6D,OAAyB,MAQ3C,OANA7D,IAAMT,WAAU,WACe,mBAAlBkE,GAA+BG,EAAIE,UAC5CF,EAAIE,QAAQL,eAAiBC,EAAKK,SAAWN,KAE9C,CAACG,EAAKH,IAGP,cAACO,GAAA,Q,mWAAD,EACEC,OAAQP,EAAKK,QAAU,UAAY,YACnCtC,QAAS,kBAAMiC,EAAKlF,YACpBoF,IAAKA,GAEDF,KAKGQ,GAAkB,WAC7B,IAAMC,EAAeC,gCA+ErB,MA9E8C,CAC5CD,EAAaE,SAAS,SAAU,CAC9BC,GAAI,SACJ9D,OAAQ,cAAG+D,MAAH,OAQJ,8BAEJC,KAAM,YAAc,IAAXC,EAAU,EAAVA,IACP,OAAQA,EAAIC,SAASrC,UAEnB,cAAC,GAAD,CAEI0B,QAASU,EAAIE,gBACblB,cAAegB,EAAIG,oBACnBpG,SAAUiG,EAAII,oBAMxBV,EAAaE,SAAS,WAAY,CAChCC,GAAI,WACJ9D,OAAQ,OACRgE,KAAM,SAACM,GACL,IAAML,EAAMK,EAAKL,IAAIC,SACf1C,EAAWyC,EAAIpC,SACjByC,EAAKC,WAAWC,MAAM,GAAI,GAC1BF,EAAKC,WACT,OACE,mCACE,eAAC1D,EAAA,QAAD,CAAMxC,MAAOf,GAAOpC,SAApB,UACGsH,GAASyB,GADZ,QAEGzC,UAQXmC,EAAaE,SAAS,WAAY,CAChCC,GAAI,WACJ9D,OAAQ,OACRgE,KAAM,SAACM,GAAD,OACJ,cAACzD,EAAA,QAAD,WACIyD,EAAKL,IAAIC,SAASrC,UAAY4C,mBAAYH,EAAKC,iBAMvDZ,EAAaE,SAAS,YAAa,CACjCC,GAAI,YACJ9D,OAAQ,gBACRgE,KAAM,SAACM,GACL,OACE,cAACzD,EAAA,QAAD,WACIyD,EAAKL,IAAIC,SAASrC,UAAYO,KAAMkC,EAAKC,YAAYG,eAO/Df,EAAagB,QAAQ,CACnBb,GAAI,UAEJE,KAAM,kBAAM,cAAC,GAAD,QAEdY,QAAO,SAACxM,GACR,MAAuB,QAAhBqI,UAASC,IAA2B,aAAZtI,EAAK0L,O,SCjJ3Be,GAAgB,SAACC,GAC5B,OAAIA,EAAK,IACA,KACEA,GAAM,KAAOA,EAAK,IACpB,KACEA,GAAM,KAAOA,EAAK,IACpB,KACEA,GAAM,KAAOA,EAAK,KACpB,KACEA,GAAM,KACR,WADF,GCPHC,GAASC,WAAWC,IAAI,UACxBC,GAAyBL,GAAcE,GAAOI,OAEvCC,GAAgB,WAC3B,MAAoCpG,mBAAqBkG,IAAzD,WAAOG,EAAP,KAAmBC,EAAnB,KAaA,OAXAvG,qBAAU,WACR,IAAMwG,EAAoCP,WAAWQ,iBACnD,UACA,YAAyB,IAAtBT,EAAqB,EAArBA,OACKG,GADgB,EAAbO,OACsBZ,GAAcE,EAAOI,QACpDG,EAAcJ,MAGlB,OAAO,wBAAMK,OAAN,EAAMA,EAAcG,YAC1B,IAEIL,GCGH/H,GAASC,UAAW7G,OAAO,CAC/BiP,UAAW,CACTxF,OAAQ,QAEVyF,WAAY,CACVC,WAAY,QAEd7B,KAAM,GAIN8B,eAAgB,CACdC,UAAW,OAEbC,MAAO,CACLrB,QAAS,OACTsB,WAAY,YAWHC,GAAoD,SAAC,GAK3C,IAJrBxM,EAIoB,EAJpBA,OACAuH,EAGoB,EAHpBA,QACAkF,EAEoB,EAFpBA,UACAC,EACoB,EADpBA,aAEA,EAAwB5G,IAAMR,UAAkB,kBAAMtF,GAAU,MAAhE,WAAOR,EAAP,KAAamN,EAAb,KACA,EAA8B7G,IAAMR,SAAuB,IAA3D,WAAOsH,EAAP,KAAgBC,EAAhB,KACA,EAA8BvH,mBAAS0E,MAAvC,WAAO8C,EAAP,KAAgBC,EAAhB,KACA,EAAsCzH,mBAAS,GAA/C,WAAO0H,EAAP,KAAoBC,EAApB,KACMzB,EAAaE,KACnBpD,mBAAQ,YC3Dc,WACtB,IAAM+C,EAASC,WAAWC,IAAI,UAC9B,MAAO,CAAC,MAAM2B,SAAS/B,GAAcE,EAAOI,QD0DtC0B,GAGFJ,EAAW/C,MAFX+C,EAAW/C,KAAkBkB,QAAO,SAACkC,GAAD,MAA0B,aAAdA,EAAOhD,SAIxD,CAACoB,IACJnG,qBAAU,WACRgF,EAAMgD,oBACNV,EAAQ3M,GAAU,IAClBiN,EAAe,KACd,OAACjN,OAAD,EAACA,EAAQvB,KAAI,SAAA2B,GAAK,OAAIA,EAAMpB,OAAKsO,KAAK,OACzC,IAAMjD,EAAQkD,yBAAc,CAC1B/N,OACAsN,UACAU,MAAO,CACLZ,WAEFa,gBAAiBZ,EACjBa,gBAAiBA,6BACjBC,kBAAmBA,+BACnBC,sBAAuBA,qCAEnBC,EAAexD,EAAMyD,sBAAsBC,KAEjD1I,qBAAU,WACRgF,EAAM2D,YAAY,GAAKhB,KACtB,CAACA,IAEJ,IAcMiB,EAAW,SACf7D,GAEyB,IADzB8D,EACwB,wDACxB,OAAQ9D,GACN,IAAK,SACH,OAAI8D,EACK,CACLC,SAAU,GACVC,SAAU,WACVC,KAAM,GAGH,CACLF,SAAU,IAGd,IAAK,WACH,MAAO,CAAE9B,UAAW,OAEtB,IAAK,WACH,MAAO,CACLhG,eAAgB,MAChBiI,YAAa,IAGjB,QACE,MAAO,KASb,OACE,qCACE,cAAC,SAAD,CAAQC,SAAS,mBAAjB,UACe,MAAZV,OAAA,EAAAA,EAAczF,QAAS,GACtB,cAACoG,GAAA,QAAD,CACE3F,KAAK,SACLxE,MAAM,SACNkD,QAAS,WAVjBmF,EAAamB,EAAapP,KAAI,SAAC8L,GAAD,OAASA,EAAIC,kBAgBzC,cAAC,WAAoBiE,OAArB,CAA4B9J,MAAOf,GAAOqI,UAA1C,SACG5B,EAAMqE,kBAAkBjQ,KAAI,SAACkQ,GAAD,OAC3B,cAAC,WAAD,UACGA,EAAY9N,QAAQpC,KAAI,SAAC6H,EAAQsI,GAAT,aACvB,cAAC,WAAoBC,MAArB,CAEElK,MAAOsJ,EAAS3H,EAAO8D,IAAI,GAF7B,SAIG9D,EAAOwI,cACJ,KAEA,eAAC3H,EAAA,QAAD,CAEI4H,QAASzI,EAAO8G,OAAO4B,0BAF3B,UAKGC,sBACC3I,EAAO8G,OAAO8B,UAAU5I,OACxBA,EAAO6I,cAPX,SASG,CACCC,IACE,cAACC,GAAA,QAAD,CAAWrR,KAAK,UAAU2G,MAAOf,GAAOsI,aAE1CoD,KACE,cAACD,GAAA,QAAD,CAAWrR,KAAK,YAAY2G,MAAOf,GAAOsI,cAE5C5F,EAAO8G,OAAOmC,gBAhBlB,EAgB8C,SAtB7CjJ,EAAO8D,QAHHuE,EAAYvE,SAiC/B,cAACoF,GAAA,QAAD,CACEC,SAAU,aAnGQ,SAAC,GAIT,IAHdC,EAGa,EAHbA,kBACAC,EAEa,EAFbA,cACAC,EACa,EADbA,YAGA,OAEEF,EAAkBjJ,OAASkJ,EAAcE,GACzCD,EAAYnJ,OAJU,IA+FdqJ,CADyB,EAAlBC,eAETrQ,QAAQC,IAAI,mCACZsN,EAAeD,EAAc,KAJnC,SASE,eAAC,WAAD,WACGP,GAAa,cAACuD,GAAA,QAAD,CAAmBC,WAAS,IACzC5F,EAAM6F,cAAcnC,KAAKtP,KAAI,SAAC8L,GAAD,OAC5B,cAAC,WAAoB4F,IAArB,CAEE5I,QAAS,WACPA,EAAQgD,EAAIC,WAHhB,SAMGD,EAAI6F,kBAAkB3R,KAAI,SAAC6L,EAAMsE,GAAP,OACzB,cAAC,WAAoByB,KAArB,CAEE1L,MAAOsJ,EAAS3D,EAAK8C,OAAOhD,IAF9B,SAIG6E,sBAAW3E,EAAK8C,OAAO8B,UAAU5E,KAAMA,EAAK6E,eAHxC7E,EAAKF,QAPTG,EAAIH,OAeb,cAAC,WAAoBkG,WAArB,CACEC,KAAMlG,EAAMmG,WAAWC,WAAWC,UAAY,EAC9CC,cAAetG,EAAMuG,eACrBC,aAAc,SAACN,GAAD,OAAUlG,EAAMyG,aAAaP,EAAO,IAClDrM,MAAUmG,EAAMmG,WAAWC,WAAWC,UAAY,EAA7C,OACIrG,EAAMuG,0B,oBE9KrBhN,GAASC,UAAW7G,OAAO,CAC/B+T,aAAc,CAEZ1K,eAAgB,SAChBkG,WAAY,UAGdyE,UAAW,CAGTC,gBAAiB,QACjBC,aAAc,GACd9K,QAAS,GACTmG,WAAY,UAUd4E,OAAQ,CACND,aAAc,GACd9K,QAAS,GACTgL,UAAW,GAEbC,WAAY,CACVJ,gBAAiB,WAEnBK,YAAa,CACXL,gBAAiB,WAEnBM,UAAW,CAGTC,UAAW,UAGbC,UAAW,CACTjL,aAAc,GACdgL,UAAW,YAIAE,GAnFE,SAAC,GAIuC,IAHvDC,EAGsD,EAHtDA,UACAC,EAEsD,EAFtDA,QACAC,EACsD,EADtDA,SAEA,OAAKF,EAIH,cAACG,GAAA,QAAD,UAEE,cAACC,GAAA,QAAD,CAGEhM,QAAS4L,EAKTjK,UAAWkK,EARb,SAUE,cAACpK,EAAA,QAAD,CAAM7C,MAAOf,GAAOmN,aAApB,SACE,cAACvJ,EAAA,QAAD,CAAM7C,MAAOf,GAAOoN,UAApB,SACGa,UAjBF,M,omBCTJ,IAAMG,GAAW,SAAC,GAIyC,IAHhEH,EAG+D,EAH/DA,SACAI,EAE+D,EAF/DA,aACGnU,EAC4D,WAC/D,OACM,cAACqJ,EAAA,QAAD,SAAUrJ,GAAV,IAAgB6G,MAAOsN,EAAe,CAACrO,GAAOsO,WAAa,GAA3D,SACKL,MAKPjO,GAASC,UAAW7G,OAAO,CAC/BkV,UAAW,CACTC,mBAAoB,e,UCRXC,GAAuBtV,wBAClCC,OAAOC,OAAO,K,UCFHqV,GAAgB,sBAAG,UAC9B9V,GAUA,aARuB+V,mBAAM,CAC3BC,OAAQ,MACRC,IAAQC,4DACR5R,QAAS,CACP6R,OAAQ,mBACRC,cAAc,SAAUpW,MAGZiD,QAXW,sDCchBoT,IDAgB,sBAAG,UAC9BrW,EACAF,EACA2C,GAeA,aAbuBsT,mBAAM,CAC3BC,OAAQ,OACRC,IAAQC,qEACR5R,QAAS,CACP6R,OAAQ,mBACRC,cAAc,SAAUpW,GAE1BiD,KAAM,CACJqT,SAAUxW,EACVyW,eAAgB9T,EAChB+T,uBAAwB,UAGZvT,QAlBW,GClBE,sBAAG,UAChCsF,GAEA,MAA8BA,EAAS/I,cAA/BC,EAAR,EAAQA,OAAQE,EAAhB,EAAgBA,UACV8W,EDPCC,KCO6BjX,EDPzB,ICOiCE,GAE5C,aAD4BmW,GAAiBW,MALhB,GAkBE,sBAAG,UAClClO,EACAC,EACAvE,EACAxB,GAEA,OAAgB8F,EAAS/I,cAAcK,SDgBvB8W,cAAchG,SAAS,qBCNxBiG,EAAiB3S,EAAU,CACtCpB,IAAKJ,EACLiB,OAAQ6E,EAAS/I,cAAcM,eAgBpB8W,EAAiBrO,EAASpI,SAAU,CAC/C0C,IAAKJ,EACLiB,OAAQ6E,EAAS/I,cAAcM,YApCJ,6D,qkBCNjC,IAAM+W,GAAU,SAAC,GAA+D,IAA7DhT,EAA4D,EAA5DA,MAAOwR,EAAqD,EAArDA,QACxB,GAD6E,EAA5CjT,OACDkG,qBAAWhI,IAA3C,WAAOiI,EAAP,KAAiBC,EAAjB,KACQhJ,EAAkB+I,EAAlB/I,cAER,EAAgB8I,qBAAWuN,IAApBiB,EAAP,YACA,EAAkC/N,oBAAS,GAA3C,WAAOgO,EAAP,KAAkBC,EAAlB,KACA,EAAsCjO,mBAASlF,GAA/C,WAAOb,EAAP,KAAoBiU,EAApB,KACA,EAAwBlO,mBAASlF,EAAM0H,UAAvC,WAAOpD,EAAP,KAAa+O,EAAb,KACA,EAAmBpL,GAAYvD,GAAxBtE,EAAP,YACMkT,EAAahI,KACnB,EAAgDpG,oBAAS,GAAzD,WAAOqO,EAAP,KAAyBC,EAAzB,KAEAvO,qBAAU,WACRmO,EAAepT,KACd,CAACA,IAEJ,IAAMyT,EAAU,sBAAG,YACjBD,GAAoB,GACpBL,GAAa,GACbC,GAAe,SAACpT,GAAD,UAAC,MACXA,GADU,IAEb0H,SAAUpD,aAENoP,EAActT,EAAU,CAC5BP,OAAQlE,EAAcM,OACtB+C,IAAKgB,EAAMpB,IAAI+I,QAAQ3H,EAAM0H,SAAUpD,GACvCqP,WAAYhY,EAAcM,OAAS,IAAM+D,EAAMpB,YAE3Ca,EAAYW,EAAU,CAC1BpB,IAAKgB,EAAMpB,IACXiB,OAAQlE,EAAcM,SAExB0I,EAAY,SAAKD,GAAN,IAAgBlI,UAAW,IAAIoX,QAC1CpC,OAjBc,qDAoBVqC,EAAY,sBAAG,YACnBL,GAAoB,GACpB,IAAMM,EAAe,CACnBjU,OAAQlE,EAAcM,OACtB+C,IAAKG,EAAYP,WAEba,EAAYW,EAAU0T,GAC5BnP,EAAY,SAAKD,GAAN,IAAgBlI,UAAW,IAAIoX,QAC1CpC,OARgB,qDAWZuC,EAAc,sBAAG,YACrB,IAAMC,QAAaxB,GACjB9N,EACAC,EACAvE,EACAJ,EAAMpB,KAEFqV,EAAIC,SAASC,cAAc,KACjCF,EAAEG,KAAOJ,EACTC,EAAEI,SAAWrU,EAAMpB,IACnBqV,EAAE1P,MAAMsG,QAAU,OAClBqJ,SAASI,KAAKC,YAAYN,GAC1BA,EAAEO,QACFP,EAAErI,YAbgB,qDAiBpB,OACE,mCACE,eAACxE,EAAA,QAAD,CACE7C,MACE,CAAC,KAAM,MAAMuI,SAASwG,GAClB,CAAC9P,GAAOiR,YACR,CAACjR,GAAOkR,MAJhB,UAOE,cAACC,EAAA,QAAD,CACE1B,MAAOA,EACPxK,KAAK,QACLtB,QAASqK,EACTjN,MAAOf,GAAOoR,cAEhB,eAACxN,EAAA,QAAD,CACE7C,MACE,CAAC,KAAM,MAAMuI,SAASwG,GAClB,CAAC9P,GAAOqR,eAAgBrR,GAAOsR,UAC/B,CAACtR,GAAOuR,SAAUvR,GAAOsR,UAJjC,UAOE,cAAC/N,EAAA,QAAD,CACEC,QAAQ,gBACRzC,MAAO,CAACf,GAAOwR,WAAYxR,GAAO4C,cAFpC,SAIE,cAAC4C,GAAA,QAAD,CAASiK,MAAOA,EAAOrV,KAAK,OAAOe,KAAM,QAE3C,cAACoI,EAAA,QAAD,CAAMC,QAAQ,gBAAgBzC,MAAOf,GAAOwR,WAA5C,SACG9B,EACC,cAAC9O,EAAA,QAAD,CACEH,MAAOiP,EAAY5O,EAAH,MAAUnF,OAAV,EAAUA,EAAauI,SACvCrD,aAAc,SAACC,GAAD,OAAU+O,EAAQ/O,MAH1B,MAMRnF,OANQ,EAMRA,EAAauI,WAGjB,cAACX,EAAA,QAAD,UAAO4D,mBAAY3K,EAAM6H,YACzB,eAACT,EAAA,QAAD,CAAM7C,MAAO,CAACf,GAAOsR,SAAUtR,GAAOyR,YAAtC,UACG/B,EACC,cAACyB,EAAA,QAAD,CAAY1B,MAAOA,EAAOxK,KAAK,QAAQtB,QAASsM,IAEhD,cAACkB,EAAA,QAAD,CACE1B,MAAOA,EACPxK,KAAK,SACLtB,QAAS,kBAAMgM,GAAa,MAGhC,cAACwB,EAAA,QAAD,CAAY1B,MAAOA,EAAOxK,KAAK,YAAYtB,QAAS0M,IACpD,cAACc,EAAA,QAAD,CACE1B,MAAOA,EACPxK,KAAK,WACLtB,QAAS4M,IAEVR,GAAoB,cAAC,WAAD,gBAS3B/P,GAASC,UAAW7G,OAAO,CAC/B6X,WAAY,CACV5D,gBAAiB,sBAEnB6D,KAAM,CACJ7J,QAAS,OACTqK,SAAU,GAEZN,YAAa,CACX/J,QAAS,OACTuG,UAAW,QACX/K,OAAQ,IAEVD,aAAc,CACZA,aAAc,IAEhB4O,WAAY,CACV5D,UAAW,UAEb0D,SAAU,CACR7O,eAAgB,SAChBkG,WAAY,UAEd8I,WAAY,CACVE,cAAe,OAEjBJ,SAAU,CACRK,SAAU,OACVtP,KAAM,EACNoP,SAAU,EACVG,OAAQ,IAEVR,eAAgB,CACdhE,gBAAiB,qBACjBuE,SAAU,QACVtP,KAAM,EACNoP,SAAU,EACVG,OAAQ,M,6BC/KNC,GAAkB,CAAC,MAAO,OAAQ,OAyB3BC,GAAuB,SAAC,GAYjB,IAXlBjX,EAWiB,EAXjBA,KACA6I,EAUiB,EAVjBA,QACA7K,EASiB,EATjBA,SACAkZ,EAQiB,EARjBA,cACA9Q,EAOiB,EAPjBA,SAQA,EAAkBQ,qBAAlB,WAAOuQ,EAAP,KAAUC,EAAV,KACA,EAA0BxQ,wBAA4BrJ,GAAtD,WAAOsF,EAAP,KAAcwU,EAAd,KAEA,EAA4BzQ,oBAAS,GAArC,WAAO/C,EAAP,KAAeyT,EAAf,KACA,EAA2B1Q,oBAAS,GAA3B2Q,EAAT,YACMhN,EAAgBvK,EAAKoJ,SAASoB,MAAM,KAAKC,MACzC+M,EAAUR,GAAgBxI,SAASjE,GACnCkN,EAAYzX,EAAKyJ,SAAuC,SAA5BK,GAAWS,GACvCmN,EAAY1X,EAAKuJ,SAAW,IAClC5C,qBAAU,WACH3G,EAAKyJ,UACJ+N,GAAWE,IAKbH,GAAe,GACflW,EAASrD,EAAU,CACjB0C,IAAKV,EAAKM,IACViB,OAAQ6E,EAAS/I,cAAcM,SAE9B6E,MAAK,SAAC7C,GAtCa,IAACgY,KAuCJhY,EAASsD,KAtC3B,IAAI2U,SAASD,EAAQ,KAuCfE,OACArV,MAAK,SAACsV,GACL,IAAMC,EAAqB,IAAIC,WAC/BD,EAAmBE,cAAcH,GACjCC,EAAmBG,OAAS,WAC1B,IAAMC,EAASJ,EAAmBK,OAClChB,EAAKe,GACLb,GAAU,OAGbnQ,OAAM,SAACtE,GACNwU,EAASxU,SAGdsE,OAAM,SAACtE,GACNwU,EAASxU,SAIhB,CAACqU,IAMJ,OACE,eAACmB,GAAA,QAAD,CAAkBxP,QALG,WACrBA,EAAQ7I,IAIR,UACGwX,GAAWE,EACV7T,IAAWhB,EACT,cAACyV,GAAA,QAAD,CAAOC,OAAQ,CAAEC,IAAKrB,EAAEsB,YAAcxS,MAAOf,GAAOwT,UAEpD,cAAChO,GAAA,QAAD,CAASpL,KAAK,iBAAiBe,KAAM,IAAK4F,MAAOf,GAAOyT,YAG1D,cAACjO,GAAA,QAAD,CAASpL,KAAMmY,EAAiBpX,KAAM,IAAK4F,MAAOf,GAAOiF,OAE3D,cAAC1B,EAAA,QAAD,CACExC,MAAOf,GAAOkE,SACdP,QAAS,WACPA,EAAQ7I,IAHZ,SAMGA,EAAKoJ,eAORlE,GAASC,UAAW7G,OAAO,CAC/Boa,QAAS,CACP3L,MAAO,OACPhF,OAAQ,KAEVoC,KAAM,CACJ9E,UAAW,IAEbuT,QAAS,GACTxP,SAAU,CACRyP,OAAQ,EACR/F,UAAW,UAEb6F,UAAW,CACThO,MAAO,SC/HEmO,GAAsB,SAAC,GAMhB,IALlB9Y,EAKiB,EALjBA,KACA6I,EAIiB,EAJjBA,QAKM0B,EAAgBvK,EAAKoJ,SAASoB,MAAM,KAAKC,MACzCgN,EAAYzX,EAAKyJ,SAAuC,SAA5BK,GAAWS,GAM7C,OACE,eAAC8N,GAAA,QAAD,CAAkBxP,QALG,WACrBA,EAAQ7I,IAIR,UACE,cAAC0K,GAAA,QAAD,CAASpL,KAAMmY,EAAiBpX,KAAM,IAAK4F,MAAOf,GAAOiF,OACzD,cAAC1B,EAAA,QAAD,CACExC,MAAOf,GAAOkE,SACdP,QAAS,WACPA,EAAQ7I,IAHZ,SAMGA,EAAKoJ,eAMRlE,GAASC,UAAW7G,OAAO,CAC/B6L,KAAM,CACJ9E,UAAW,IAEbuT,QAAS,GACTxP,SAAU,CACRyP,OAAQ,EACR/F,UAAW,UAEb6F,UAAW,CACThO,MAAO,SCtCEoO,GAAkB,SAAC,GAYZ,IAXlB/Y,EAWiB,EAXjBA,KACA6I,EAUiB,EAVjBA,QACA7K,EASiB,EATjBA,SACAkZ,EAQiB,EARjBA,cACA9Q,EAOiB,EAPjBA,SAQMmE,EAAgBvK,EAAKoJ,SAASoB,MAAM,KAAKC,MAE/C,OACE,cAAC3B,EAAA,QAAD,CAAM7C,MAAOf,GAAOlF,KAApB,SACI,WACA,OAAQuK,GACN,IAAK,MACL,IAAK,OACL,IAAK,MACH,OACE,cAAC,GAAD,CACEvK,KAAMA,EACN6I,QAASA,EACT7K,SAAUA,EACVkZ,cAAeA,EACf9Q,SAAUA,IAGhB,QACE,OAAO,cAAC,GAAD,CAAqBpG,KAAMA,EAAM6I,QAASA,KAfrD,MAsBF3D,GAASC,UAAW7G,OAAO,CAC/B0B,KAAM,CACJgZ,eAAgB,EAChBC,iBAAkB,GAClBlR,OAAQ,IACRwE,QAAS,OACT/E,KAAM,EACN0R,SAAU,SACVpG,UAAW,YCrCT5N,GAASC,UAAW7G,OAAO,CAC/BsN,KAAM,CACJ+B,UAAW,OACXmJ,SAAU,QACVqC,aAAc,QAEhBzL,eAAgB,CACdC,UAAW,OAEbC,MAAO,CACLrB,QAAS,OACTsB,WAAY,UAEduL,mBAAoB,CAClB7M,QAAS,UAUA8M,GAAmD,SAAC,GAI1C,IAHrB/X,EAGoB,EAHpBA,OACAuH,EAEoB,EAFpBA,QACAkF,EACoB,EADpBA,UAEA,EAAmB5H,qBAAmChI,GAA/CiI,EAAP,YACA,EAAkCuD,GAAYvD,GAA9C,WAAOpI,EAAP,KAAiBkZ,EAAjB,KACA,EAAwB9P,IAAMR,UAAkB,kBAAMtF,GAAU,MAAhE,WAAOR,EAAP,KAAamN,EAAb,KACA,EAAsCrH,mBAAS,GAA/C,WAAO0H,EAAP,KAAoBC,EAApB,KACA,EAAoC3H,mBAAS,GAA7C,WAAO0S,EAAP,KAAmBC,EAAnB,KACMvE,EAAahI,KAEnBpD,mBAAQ,WACL,CAAC,KAAM,MAAM4E,SAASwG,GAAcuE,EAAc,GAAKA,EAAc,KACrE,CAACvE,IAEJrO,qBAAU,WACRsH,EAAQ3M,GAAU,IAClBiN,EAAe,KACd,CAACjN,IACJ,IAAMqK,EAAQkD,yBAAc,CAC1B/N,OACAsN,QAAS9C,KACT0D,gBAAiBA,6BACjBE,sBAAuBA,qCAGnBsK,EAAQ7N,EAAM6F,cAAciI,SAAS1Z,KAAI,SAACC,GAAD,OAAUA,EAAK8L,YAE9DnF,qBAAU,WACRgF,EAAM2D,YAAY,GAAKhB,KACtB,CAACA,IAgBJ,OACE,mCACE,eAACwC,GAAA,QAAD,CACEC,SAAU,aAjBQ,SAAC,GAIT,IAHdC,EAGa,EAHbA,kBACAC,EAEa,EAFbA,cACAC,EACa,EADbA,YAGA,OAEEF,EAAkBjJ,OAASkJ,EAAcE,GACzCD,EAAYnJ,OAJU,IAadqJ,CADyB,EAAlBC,eAETrQ,QAAQC,IAAI,mCACZsN,EAAeD,EAAc,KAJnC,UAQGP,GAAa,cAACuD,GAAA,QAAD,CAAmBC,WAAS,IAE1C,eAACzI,EAAA,QAAD,WACE,cAAC4Q,GAAA,QAAD,CAEEN,mBAAoBlU,GAAOkU,mBAC3BE,WAAYA,EACZxY,KAAM0Y,EACNG,WAAY,YAAgC,IAA7B3Z,EAA4B,EAA5BA,KACb,OACE,cAAC,GAAD,CACEA,KAAMA,EACN6I,QAASA,EACT7K,SAAUA,EACVkZ,cAAeA,EACf9Q,SAAUA,KAIhBwT,aAAc,SAAC5Z,GAAD,OAAiBA,EAAKoJ,WAhBtC,kBACyBkQ,GAiBzB,sCAOGhO,GAAuB,WASlC,MAPqB,CADAE,gCAENC,SAAS,WAAY,CAChCC,GAAI,WACJ9D,OAAQ,OACRgE,KAAM,SAACM,GAAD,OAAU,kC,oBCjIhBhH,GAASC,UAAW7G,OAAO,CAC/Bub,OAAQ,CACN9M,MAAO,IACP+M,KAAM,SAIGC,GAAU,SAAC,GAAwD,IAAtDC,EAAqD,EAArDA,aAAcC,EAAuC,EAAvCA,YAAaC,EAA0B,EAA1BA,OACnD,OACE,mCACE,cAAC9G,GAAA,QAAD,UACE,eAAC+G,GAAA,QAAD,CACE9S,QAAS2S,EACT/T,MAAOf,GAAO2U,OACdO,aAAa,EAHf,UAKE,cAACD,GAAA,QAAOhK,MAAR,oBACA,cAACgK,GAAA,QAAO3R,QAAR,UACE,cAACC,EAAA,QAAD,UACE,yFAGJ,eAAC0R,GAAA,QAAOxR,QAAR,WACE,cAACC,EAAA,QAAD,CACEC,QAAS,WACPqR,KAFJ,kBAOA,cAACtR,EAAA,QAAD,CACEC,QAAS,WACPoR,KAFJ,4BC5BN/U,GAASC,UAAW7G,OAAO,CAC/Bsa,QAAS,CACPrM,QAAS,UAaA8N,GAAqB,SAAC,GAOR,IANzBtX,EAMwB,EANxBA,KACA/E,EAKwB,EALxBA,SACAiC,EAIwB,EAJxBA,OACA5C,EAGwB,EAHxBA,cACAid,EAEwB,EAFxBA,UACAC,EACwB,EADxBA,QAEA,EAA4CnT,WAAe,GAA3D,WAAO/D,EAAP,KAAuBmX,EAAvB,KAEA,EAAyCpT,YAAe,GAAxD,WAAO4S,EAAP,KAAqBS,EAArB,KAEMC,EAAW,SAAC3X,GAChBf,EACEhE,EACAiC,EAAS8C,EAAKzD,KACdjC,EAAcM,QACd,SAAC+F,GACC8W,EAAkB9W,KAEpBX,GAECP,MAAK,WACJ8X,OAEDnT,OAAM,WACLoT,QAkBN,OAdAnT,aAAgB,WACWrD,EACvB/F,EACAiC,EAAS8C,EAAKzD,KACdjC,EAAcM,QAGb6E,MAAK,SAACmY,GACLF,GAAiB,MAElBtT,OAAM,WACLuT,EAAS3X,QAEZ,IAED,qCACE,cAAC+F,EAAA,QAAD,CAAM7C,MAAOf,GAAO0T,QAApB,SACE,eAACnQ,EAAA,QAAD,wBACa1F,EAAKzD,KADlB,MAC2B+D,EAD3B,SAIF,cAAC,GAAD,CACE4W,YAAa,WACXS,EAAS3X,GACT0X,GAAiB,IAEnBP,OAAQ,WACNI,IACAG,GAAiB,IAEnBT,aAAcA,QCxEhB9U,GAASC,UAAW7G,OAAO,CAC/Bsc,kBAAmB,CACjBd,KAAM,QAGRe,cAAe,CAEbtI,gBAAiB,OACjBxF,MAAO,IACPhF,OAAQ,IAEV+S,aAAc,CACZnQ,MAAO,SAEToQ,gBAAiB,CACfrT,QAAS,GACTmP,cAAe,OAEjBmE,kBAAmB,CACjBvN,WAAY,GAEdoM,OAAQ,CACN9M,MAAO,IACP+M,KAAM,SAYGmB,GAAa,SAAC,GAMA,IALzB7U,EAKwB,EALxBA,SACApI,EAIwB,EAJxBA,SACAiC,EAGwB,EAHxBA,OACAib,EAEwB,EAFxBA,SACAC,EACwB,EADxBA,aAEQ9d,EAAkB+I,EAAlB/I,cAER,EAAyBuJ,oBAAS,GAAzBwU,EAAT,YACA,EAA0CxU,wBACxCrJ,GADF,WAAO8d,EAAP,KAAsBC,EAAtB,KAIA,OACE,qCACE,eAAC7S,EAAA,QAAD,gCAAyBxI,KAEzB,eAAC6I,EAAA,QAAD,CAAM7C,MAAOf,GAAO6V,gBAApB,UACGM,GACCE,MAAMC,KAAKH,GAAetb,KAAI,SAACgD,GAAD,OAC5B,cAAC,GAAD,CACE9C,OAAQA,EACR8C,KAAMA,EACN1F,cAAeA,EACfW,SAAUA,EACVsc,UAAW,WACTY,IACAC,KAEFZ,QAAS,kBAGf,cAAClE,EAAA,QAAD,CACElM,KAAK,eACLtB,QAAO,KAAE,YACP,IAAM4S,QAAmBC,oBAAiC,CACxDC,UAAU,IAEZP,GAAa,GACb,IAAIQ,EAAkB,MAAGH,OAAH,EAAGA,EAAYI,OAErC,GADAP,EAAiBM,GACG,QAAhBvT,UAASC,GAAc,CACzB,IAAMwT,QAAavZ,MAAMkZ,EAAWjD,KAEpCoD,EAAW,OADQE,EAAKjE,qBClFzBkE,GAAe,SAAC,GAYT,IAXlB3V,EAWiB,EAXjBA,SACApI,EAUiB,EAVjBA,SACAiC,EASiB,EATjBA,OACAib,EAQiB,EARjBA,SACAC,EAOiB,EAPjBA,aAQA,EAAoC/T,IAAMR,SAAS,IAAnD,WAAOoV,EAAP,KAAmBC,EAAnB,KACMC,EAAY,sBAAG,YACnB,IAAMpZ,EAAWkZ,QACXha,EACJhE,EACAiC,EAAS6C,EAAW,IACpBsD,EAAS/I,cAAcM,QAEzBud,IACAC,OARgB,qDAUlB,OACE,eAACrS,EAAA,QAAD,WACE,cAACL,EAAA,QAAD,4BACA,cAAC3C,EAAA,QAAD,CACEN,MAAM,OACNG,MAAOqW,EACPjW,aAAc,SAACC,GAAD,OAAUiW,EAAcjW,MAExC,cAAC4C,EAAA,QAAD,CACEuB,KAAK,SACLgS,KAAK,YACLlW,MAAOf,GAAOkX,cACdvT,QAAS,WACPqT,IAAe/U,OAAM,SAAC9C,GACpBrD,QAAQC,IAAI,8BAA+BoD,OANjD,sBAgBAa,GAASC,UAAW7G,OAAO,CAC/B8d,cAAe,CACb/W,UAAW,U,+kBCpDf,IAAMgX,GAAiB,sBAAG,UAAOzd,EAAkB0d,EAAe9c,GAC9D,OAAO,IAAIiD,QAAJ,sBAAY,UAAO8Z,GACtB,IAAM9c,EAAU,IAAI+c,wBAAJ,MAA8Bhd,IACxCG,QAAiBf,EAAOgB,KAAKH,GACnC,GAAIE,EAAS8c,sBAAuB,CAChC,IAAM3b,QAAaub,GAAkBzd,EAAQ0d,EAAT,GAAC,MAAqB9c,GAAtB,IAA8Bkd,kBAAmB/c,EAAS8c,yBAC9FF,EAAQ,GAAD,WAAK5c,EAASa,UAAd,IAA2BM,UAElCyb,EAAQ,IAAI5c,EAASa,cAPtB,0DADY,0DAaVmc,GAAoB,sBAAG,UAAO/d,EAAkBjB,EAAgB2D,GACzE,aAAa,IAAImB,QAAJ,sBAAY,UAAO8Z,GAC5B,IAAM1c,EAAUyB,EAAOkL,QAAO,SAAA9K,GAAK,OAAIA,EAAM+H,YACvClJ,EAAQe,EAAOkL,QAAO,SAAA9K,GAAK,OAAKA,EAAM+H,YACtCjK,EAAoC,CACtC+B,OAAQ5D,GAENif,QAAwBna,QAAQoa,IAAIhd,EAAQE,IAAR,sBAAY,UAAOuc,GAEzD,aAD2BD,GAAkBzd,EAAQ0d,EAAT,GAAC,MAAqB9c,GAAtB,IAA8BU,OAAQoc,EAAOhc,UADnD,wDAIpCwc,EAAS,cAAOF,EAAgBG,QAAvB,IAAkCxc,IAC3CiV,EAA0C,CAC5CjU,OAAQ5D,EACR6D,OAAQ,CAAEC,QAASqb,EAAU/c,KAAI,SAAAC,GAAI,MAAK,CAAEU,IAAKV,EAAKU,KAAOV,EAAKM,UAEhEb,EAAU,IAAIkC,uBAAqB6T,GAEzC+G,QADuB3d,EAAOgB,KAAKH,OAhB1B,0DADgB,0D,qkBCM1B,IAAMud,GAAuB,WAAO,IAAD,IACxC,EAA0CpW,wBACxCrJ,GADF,WAAO0f,EAAP,KAAsBC,EAAtB,KAGA,EAAoC9V,IAAMR,UAAS,GAAnD,WAAOuW,EAAP,KAAmBC,EAAnB,KACA,EAAoDhW,IAAMR,UAAS,GAAnE,WAAOyW,EAAP,KAA2BC,EAA3B,KACA,EACElW,IAAMR,UAAS,GADjB,WAAO2W,EAAP,KAAiCC,EAAjC,KAGA,EAA0B5W,mBAAS,IAAnC,WAAO6W,EAAP,KAAcC,EAAd,KACA,EAAmBvX,qBAAmChI,GAA/CiI,EAAP,YACA,EAAkCuD,GAAYvD,GAA9C,WAAOpI,EAAP,KAAiBkZ,EAAjB,KACA,EAAsC9P,IAAMR,UAAS,GAArD,WAAO+W,EAAP,KAAoBC,EAApB,KACA,EAAkChX,mBAAuB,CACvDrF,OAAQ6E,EAAS/I,cAAcM,OAC/BuC,OAAQ,GACR2d,UAAW,MAHb,WAAOC,EAAP,KAAkBC,EAAlB,KAKApX,qBAAU,WACRoX,EAAa,SAAKD,GAAN,IAAiBvc,OAAQ6E,EAAS/I,cAAcM,YAC3D,CAACyI,EAAUpI,IAEd,MCvC0B,SAC1BY,EACAof,EACAxe,GAGsC,IAFtCie,EAEqC,uDAFrB,GAChBvf,EACqC,uCAC/B+f,EAAgBC,oBACpB,CACE,YACAT,EACAje,EAAO+B,QAAU,GACjB/B,EAAOqe,WAAa,GACpBre,EAAOU,QAAU,GACjBhC,GAAa,IAPa,KAS5B,YACE,IACE,IAAM4C,QAAavB,EAAUX,EAAQY,GAErC,OADe2J,GAAwBrI,EAAMtB,GAE7C,MAAOqD,GACP7B,QAAQC,IAAI,0BAA2B4B,GAEzC,MAAO,MAET,CACEsb,QAASH,EACTI,sBAAsB,IAG1B,OAAOH,EDQ8BI,CACnCrgB,EACAkZ,EACA4G,EACAL,EACArX,EAASlI,WALH4C,EAAR,EAAQA,KAAMiN,EAAd,EAAcA,UAAWuQ,EAAzB,EAAyBA,QAQnBC,EAAY,SAACte,GACjB8d,EAAa,SAAKD,GAAN,IAAiB5d,OAAQD,MAEjC4I,GAAU,SAACnH,GACXA,EAAM+H,SACR8U,EAAU7c,EAAMzB,QAEhBid,EAAiBxb,IAqBf8c,GAAY,CAAI,UAAJ,oBAAiBV,EAAU5d,aAA3B,EAAiB,EAAkBsK,MAAM,OACrDiU,GAAUD,GAAaze,KAAI,SAACC,EAAMkQ,GACtC,IAAMwO,EAAiBxO,KAAsB,MAAZsO,QAAA,EAAAA,GAAc9U,QAAS,EACxD,OACE,eAAC,GAAD,CAEE6J,cAAemL,EACf7V,QAAS,YAbW,SAACqH,GAAyB,IAAD,EAE3CyO,GADY,SAAGb,EAAU5d,aAAb,EAAG,EAAkBsK,MAAM,MACX4B,MAAM,EAAG8D,GAAOtB,KAAK,KAAxC,IACf2P,EAAwB,MAAdI,EAAoB,GAAKA,GAW7BC,CAAkB1O,IAJtB,eAQIwO,GACA,cAACG,GAAA,QAAD,CAAUvf,KAAK,sBAAsBqL,MAAM,UAAUtK,KAAM,KAE5DL,IAXH,UACiBkQ,MAefgL,GAAW,WACfwC,EAAS,GAAG/Z,KAAKmb,WAInB,OACE,mCACG5H,EACC,qCACE,cAAC,SAAD,CAAQrH,SAAS,WAAjB,SACE,cAACwG,EAAA,QAAD,CACE0I,UAAQ,EACR5U,KAAK,SACLtB,QAAS,WACPqS,UAIN,cAAC,SAAD,CAAQrL,SAAS,OAAjB,UACG,SAAAiO,EAAU5d,aAAV,IAAkBwJ,QAAS,GAC1B,cAAC2M,EAAA,QAAD,CACElM,KAAK,aACLtB,QAAS,YA3DI,WACzB,IAAM5I,EAAS6d,EAAU5d,OACzB,GAAe,KAAXD,EAAe,CACjB,IAAM0e,EAAY1e,EAAO+e,UACvB,EACA/e,EAAO+e,UAAU,EAAG/e,EAAOyJ,OAAS,GAAGuV,YAAY,KAAO,GAE5DV,EAAUI,IAqDEO,QAKR,eAACpW,EAAA,QAAD,CAAM7C,MAAOf,GAAOia,KAApB,UACE,eAACrW,EAAA,QAAD,CAAM7C,MAAOf,GAAOka,SAApB,UACGd,GAAW,cAAC7V,EAAA,QAAD,CAAMC,QAAQ,gBAAd,oBACZ,eAACI,EAAA,QAAD,CAAM7C,MAAOf,GAAOma,mBAApB,UACE,cAAC5W,EAAA,QAAD,CAAMC,QAAQ,aAAazC,MAAOf,GAAO9C,KAAzC,SACGqc,KAEH,eAAC3V,EAAA,QAAD,CAAM7C,MAAOf,GAAOoa,YAApB,UACE,cAAC,aAAD,CAAYhgB,KAAK,qBACjB,cAACwQ,GAAA,QAAD,CACE3F,KAAK,YACLxE,MAAM,OACN0F,QAAwB,IAAhBsS,EAAwB,UAAY,YAC5C9U,QAAS,kBAAM+U,GAAe,MAEhC,cAAC9N,GAAA,QAAD,CACE3F,KAAK,QACLxE,MAAM,QACN0F,QAAwB,IAAhBsS,EAAuB,UAAY,YAC3C9U,QAAS,kBAAM+U,GAAe,YAKpC,cAAC,GAAD,CACE3K,UAAWoK,EACXnK,QAAS,WACPoK,GAAsB,IAH1B,SAME,cAAC,GAAD,CACElX,SAAUA,EACVpI,SAAUA,EACViC,OAAQ6d,EAAU5d,OAClBgb,SAAUA,GACVC,aAAc,WACZmC,GAAsB,QAK5B,cAAC,GAAD,CACErK,UAAWsK,EACXrK,QAAS,WACPsK,GAA4B,IAHhC,SAME,cAAC,GAAD,CACEpX,SAAUA,EACVpI,SAAUA,EACViC,OAAQ6d,EAAU5d,OAClBgb,SAAUA,GACVC,aAAc,WACZqC,GAA4B,QAKjCG,EACC,mCACE,cAAC,GAAD,CACErc,OAAQR,EACR+H,QAASA,GACTkF,UAAWA,EACXC,aAAY,sBAAE,UAAO1M,SACbqb,GAAqB3e,EAAUoI,EAAS/I,cAAcM,OAAQ2D,GACpE4Z,QAFU,0DAQhB,cAAC,GAAD,CACE5Z,OAAQR,EACR+H,QAASA,GACTkF,UAAWA,IAIf,cAACwR,GAAA,QAAIC,MAAL,CACEC,cAAc,OACdtV,KAAK,OACLuV,cAAe,YAAe,IAAZC,EAAW,EAAXA,KAChBvC,EAAcuC,IAEhBA,KAAMxC,EACNtU,QAAS,kBAAMuU,GAAeD,IAC9B9V,SAAO,EACPpB,MAAO,CAACf,GAAO0a,UACfC,QAAS,CACP,CACE1V,KAAM,OACN3E,MAAO,SACPqD,QAAS,kBAAMyU,GAAsB,KAEvC,CACEnT,KAAM,SACN3E,MAAO,aACPqD,QAAS,kBAAM2U,GAA4B,WAKlDP,GACC,cAAC,GAAD,CACEhd,OAAQ6d,EAAU5d,OAClBgT,QAAS,kBAAMgK,OAAiB3f,IAChCmE,MAAOub,UAMf,cAAC1U,EAAA,QAAD,CAAMtC,MAAOf,GAAO4a,aAApB,SACE,cAACrX,EAAA,QAAD,mGAWJvD,GAASC,UAAW7G,OAAO,CAC/B8D,KAAM,CACJmK,QAAS,OACTwK,OAAQ,GACRvP,KAAM,GAERoY,SAAU,CACR/G,OAAQ,GACRkH,MAAO,GACPrQ,SAAU,YAEZoQ,aAAc,CACZ/I,OAAQ,GACRrP,QAAS,IAEXyX,KAAM,CACJtI,cAAe,MACftK,QAAS,OACT/E,KAAM,EACNoP,SAAU,GAEZwI,SAAU,CACR5X,KAAM,EACNQ,YAAa,OACbgY,iBAAkB,EAClBnJ,cAAe,UAEjByI,YAAa,CACX/S,QAAS,OACTsK,cAAe,OAEjBwI,mBAAoB,CAClB9S,QAAS,OACTsK,cAAe,SE7RJ,SAASoJ,KACtB,OACE,cAAC,GAAD,I,cCMWlQ,GARA,SAACmQ,GAAD,OACb,eAACC,GAAA,QAAOpQ,OAAR,CAAeoM,KAAK,iBAAiBiE,UAAU,EAA/C,UACE,cAAC,aAAD,CAAY9gB,KAAK,SACjB,cAAC6gB,GAAA,QAAO3X,QAAR,CAAgBoF,MAAOsS,EAAMtS,QAC7B,cAAC,aAAD,CAAYtO,KAAK,iBCgCN+gB,GAhCoB,WACjC,MAA0BjZ,WAAe,GAAzC,WAAO8I,EAAP,KAAcoQ,EAAd,KACA,EAAiBlZ,WAAe,CAC9B,CAAE9G,IAAK,SAAUsN,MAAO,SAAU2S,YAAa,UAC/C,CACEjgB,IAAK,oBACLsN,MAAO,oBACP2S,YAAa,UALVC,EAAP,YASMC,EAAcC,UAAiBC,SAAS,CAC5Crf,OAAQ2e,GACRW,kBAAmB1X,KAGrB,MAAoB,QAAhBb,UAASC,GACJ,KAIP,qCACE,cAAC,GAAD,CAAQsF,MAAM,SACd,cAAC8S,EAAA,QAAD,CACEG,gBAAiB,CAAE3Q,QAAOsQ,UAC1BM,cAAeR,EACfG,YAAaA,Q,UC7BfM,GAAwC,sBAAG,UAAOpb,GACtD,UACQqb,WAAaC,QALc,mBAKiBC,KAAKC,UAAUxb,IACjE,MAAOtB,QAHmC,sDAQxC+c,GAA8B,sBAAG,YACrC,IACE,IAAMzb,QAAcqb,WAAaK,QAbA,oBAcjC,GAAc,OAAV1b,EAEF,OAAOA,EAET,MAAOtB,IAGT,MAAO,MAV2B,qDAa9Bid,GAAyC,SAACC,GAC9C,IACE,OAAOL,KAAKM,MAAMD,GAClB,MAAO1e,GACP,MAAO,KAIE4e,GAA6D,sBAAG,YAAwC,IAAjCC,EAAgC,uDAAT,KACnG/b,QAAcyb,KACpB,OACSE,GADL3b,GAGa+b,MALuD,qDAS7DC,GAA8C,sBAAG,UAAOhc,GAEnE,aADMob,GAAUpb,GACT,QAFkD,sDCrC5C,SAASic,KAatB,OACE,mCACE,cAAC,GAAD,M,mlBClBC,IAAMjN,GAAe,SACvBkN,kBADuB,IAE1BC,UAAW,EACXC,QAAS,EACTC,OAAO,MACFH,iBAAaG,UCKdC,GAAcC,QACa,cAA7BvV,OAAOwV,SAAS9f,UAEe,UAA7BsK,OAAOwV,SAAS9f,UAEhBsK,OAAOwV,SAAS9f,SAAS+f,MACvB,2DAuCN,SAASC,GAAgBC,EAAOrgB,GAC9BsgB,UAAUC,cACPC,SAASH,GACT9f,MAAK,SAACkgB,GACLA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB9T,QACfyT,UAAUC,cAAcO,YAI1B/hB,QAAQC,IACN,+GAKEgB,GAAUA,EAAO+gB,UACnB/gB,EAAO+gB,SAASN,KAMlB1hB,QAAQC,IAAI,sCAGRgB,GAAUA,EAAOqY,WACnBrY,EAAOqY,UAAUoI,WAO5Bvb,OAAM,SAACtE,GACN7B,QAAQ6B,MAAM,4CAA6CA,M,+NC9EnE,IAAMogB,GAAQC,oBAIRhe,GAASC,UAAW7G,OAAO,CAC/B6kB,eAAgB,CACdtM,cAAe,OAEjBjO,OAAQ,CACNwa,OAAQ,MACRC,YAAa,WAuEjB,IAAMC,GAAgB,SAAC,GAAwD,IAAtDnQ,EAAqD,EAArDA,SACvB,EAAgBhN,qBAAWuN,IAApBiB,EAAP,YACA,OAAO,cAAC,UAAD,CAAeA,MAAOA,EAAtB,SAA8BxB,KAGxBoQ,GAxEf,WACE,IAAMC,EAAa5c,mBAAS+N,IAC5B,EC1B0C,SAACvX,GAC3C,MAAkBwJ,mBAAuCxJ,GAAzD,WAAO+Z,EAAP,KAAUC,EAAV,KACA,EAAgCxQ,oBAAS,GAAzC,WAAO6c,EAAP,KAAiBC,EAAjB,KAaA,OAZA9Z,mBAAQ,WACN6X,GACEP,KAAKC,UAAU/jB,IACfoF,MAAK,SAAA1B,GACLsW,EAAKtW,GACL4iB,GAAY,MAEXvc,OAAM,WACLnG,QAAQC,IAAI,6EAEf,CAAC7D,IAEG,CAAE0D,KAAMqW,EAAGsM,YDYhBE,CAA6BvmB,GADjBwmB,EAAd,EAAQ9iB,KAA4B2iB,EAApC,EAAoCA,SAG9BI,EAAmBjd,mBAASgd,GAClC,MAAwDC,EAAxD,GAAOC,EAAP,KAA6BC,EAA7B,KAEApd,qBAAU,WACRod,EAAwBH,KACvB,CAACA,IAEJjd,qBAAU,WACJ8c,GACF9B,G,mWAAsB,IAAKmC,MAE5B,CAACA,EAAsBL,IAE1B,IAAMO,EAAoB,SAAC,GAAD,IAAGC,EAAH,EAAGA,WAAH,MAA0B,CAClDC,YAAa,SAAChE,GAAD,OAAW,cAACzX,EAAA,QAAD,oBAExB0b,YAAa,kBACX,eAACrb,EAAA,QAAD,CAAM7C,MAAOf,GAAOie,eAApB,UACE,cAAC,aAAD,CAAY7jB,KAAK,aACjB,cAAC+W,EAAA,QAAD,CACEpQ,MAAOf,GAAO0D,OACduB,KAAK,OACLtB,QAAS,kBAAMob,EAAWG,SAAS,WAErC,cAAC/N,EAAA,QAAD,CACEpQ,MAAOf,GAAO0D,OACduB,KAAK,OACLtB,QAAS,kBAAMob,EAAWG,SAAS,wBAM3C,OACE,cAAC1Q,GAAqB2Q,SAAtB,CAA+B1e,MAAO6d,EAAtC,SACE,cAAC,GAAD,UACE,cAAC,iBAAD,UACE,eAACrlB,EAAmBkmB,SAApB,CAA6B1e,MAAOke,EAApC,UACmB,QAAhBxb,UAASC,IACR,cAACgc,EAAA,QAAD,UACE,eAACrB,GAAMsB,UAAP,WACE,cAACtB,GAAMuB,OAAP,CACEllB,KAAK,OACLmlB,UAAWxE,GACXyE,QAASV,IAEX,cAACf,GAAMuB,OAAP,CACEllB,KAAK,cACLmlB,UAAW7C,GACX8C,QAASV,SAKjB,cAACW,GAAD,eDtEH,SAAkB1iB,GAEvB,GAAuB,kBAAmBsgB,UAAW,CAGnD,GADkB,IAAIqC,IAAIC,IAAwBlY,OAAOwV,SAASrM,MACpDgP,SAAWnY,OAAOwV,SAAS2C,OAIvC,OAGFnY,OAAOS,iBAAiB,QAAQ,WAC9B,IAAMkV,EAAWuC,sBAEb5C,KAgEV,SAAiCK,EAAOrgB,GAEtCM,MAAM+f,EAAO,CACXngB,QAAS,CAAE,iBAAkB,YAE5BK,MAAK,SAAC7C,GAEL,IAAMolB,EAAcplB,EAASwC,QAAQ0K,IAAI,gBAEnB,MAApBlN,EAAS0L,QACO,MAAf0Z,IAA8D,IAAvCA,EAAYC,QAAQ,cAG5CzC,UAAUC,cAAcyC,MAAMziB,MAAK,SAACkgB,GAClCA,EAAawC,aAAa1iB,MAAK,WAC7BmK,OAAOwV,SAASgD,eAKpB9C,GAAgBC,EAAOrgB,MAG1BkF,OAAM,WACLnG,QAAQC,IACN,oEAvFAmkB,CAAwB9C,EAAOrgB,GAI/BsgB,UAAUC,cAAcyC,MAAMziB,MAAK,WACjCxB,QAAQC,IACN,+GAMJohB,GAAgBC,EAAOrgB,OCwDjCojB,GEzGO,IAAMC,GAAiBlnB,wBAAcC,OAAOC,OAAO,OCc1D,IAUeinB,GALQ,CACrBC,SAAS,EACThF,OAPiC,CACjC,CAAEpe,KAAM,eAAgBqiB,UAAW,cAAC7C,GAAD,IAAiB6D,kBAAkB,GACtE,CAAErjB,KAAM,IAAKqiB,UAAW,eChBX,WACb,OACE,+BDcsB,IAAUgB,kBAAkB,K,qkBEf/C,IAAMC,GAAgD,SAAC,GAA2C,IAAzCvS,EAAwC,EAAxCA,SAC9D,EAAwC/L,IAAMjB,WAAWmf,IAAzD,WAAOK,EAAP,KAAqBC,EAArB,KAOA,OANAjf,qBAAU,YACqB,IAAzBgf,EAAaH,SACfI,EAAgB,SAAKD,GAAN,IAAoBH,SAAS,OAG7C,CAACG,EAAaH,QAASG,EAAanF,SAChC,mCACJrN,K,oBCTC0S,GAAc,IAAIC,eAET,SAASC,GAAT,GAA6E,IAAnD5S,EAAkD,EAAlDA,SACvC,OACE,cAAC,uBAAD,CAAqBvU,OAAQinB,GAA7B,SACG1S,ICFA,IAAMkR,GAAW,SAAC,GAAwD,IAAtDlR,EAAqD,EAArDA,SACnBwS,EAAe/e,mBAAS4Z,IAa9B,OACM,cAACuF,GAAD,UACI,cAACT,GAAejB,SAAhB,CAAyB1e,MAAOggB,EAAhC,SACI,cAAC,GAAD,UACKxS,SCZN6S,GARa,WAC1B,OACE,cAAC,GAAD,UACE,cAAC,GAAD,OCFS7gB,UAAW7G,OAAO,CAC/BiJ,UAAW,CACTC,KAAM,EACN+K,gBAAiB,OACjB1E,WAAY,SACZlG,eAAgB,YAGL,SAAS4b,KACtB,OACI,cAAC,GAAD,IAGN0C,kBAAsB1C,ICXtB0C,kBAAsB1C,M","file":"static/js/app.8590e500.chunk.js","sourcesContent":["/**\r\n * This context will hold all of our application data like the current\r\n * user's api Keys, currently viewed directory, etc\r\n */\r\n\r\nimport { S3Client } from '@aws-sdk/client-s3'\r\nimport React, { createContext } from 'react'\r\nimport { BackblazeB2Config } from '../../services/types'\r\n\r\nexport interface ApplicationState {\r\n  s3credentials: {\r\n    apiKey: string | undefined\r\n    apiSecret: string | undefined\r\n    region: string | undefined\r\n    endpoint: string | undefined\r\n    bucket: string | undefined\r\n  }\r\n  backblaze: BackblazeB2Config | undefined\r\n  otherStuff: string | undefined\r\n  s3client: S3Client | undefined\r\n  mutatedAt: Date | undefined\r\n}\r\n\r\nexport const initialData: ApplicationState = {\r\n  s3credentials: {\r\n    apiKey: undefined,\r\n    apiSecret: undefined,\r\n    region: undefined,\r\n    endpoint: undefined,\r\n    bucket: undefined\r\n  },\r\n  backblaze: {\r\n    authorizationToken: '',\r\n    downloadUrl: '',\r\n    s3ApiUrl: ''\r\n  },\r\n  s3client: undefined,\r\n  otherStuff: '',\r\n  mutatedAt: undefined\r\n}\r\n\r\nexport type ApplicationContextType = [\r\n  ApplicationState,\r\n  React.Dispatch<React.SetStateAction<ApplicationState>>\r\n]\r\n\r\nexport const ApplicationContext = createContext<ApplicationContextType>(\r\n  Object.create(null)\r\n)\r\n","import {\r\n  S3Client,\r\n  ListObjectsCommand,\r\n  GetObjectCommand,\r\n  GetObjectCommandInput,\r\n  GetObjectCommandOutput,\r\n  DeleteObjectCommand,\r\n  DeleteObjectCommandInput,\r\n  CopyObjectCommandInput,\r\n  CopyObjectCommand,\r\n  HeadObjectCommandInput,\r\n  HeadObjectCommand,\r\n  PutObjectCommandInput,\r\n  PutObjectCommand,\r\n  PutBucketCorsCommandInput,\r\n  PutBucketCorsCommand,\r\n  CORSRule,\r\n  PutBucketCorsCommandOutput,\r\n  DeleteObjectsCommandInput,\r\n  DeleteObjectsCommand\r\n} from '@aws-sdk/client-s3'\r\nimport { XhrHttpHandler } from '@aws-sdk/xhr-http-handler'\r\nimport { S3Initializer, GetAssetArgs, Asset } from './types'\r\nimport 'react-native-url-polyfill/auto'\r\nimport 'react-native-get-random-values'\r\nimport { Upload } from '@aws-sdk/lib-storage'\r\n// eslint-disable-next-line\r\nimport { v4 as uuidv4 } from 'uuid'\r\n// eslint-disable-next-line\r\nconst { getSignedUrl } = require('@aws-sdk/s3-request-presigner')\r\n\r\nexport const buildS3Client = (initializationData: S3Initializer): S3Client => {\r\n  const { credentials, region, endpoint } = initializationData\r\n\r\n  const client = new S3Client({\r\n    region,\r\n    credentials,\r\n    endpoint,\r\n    bucketEndpoint: false,\r\n    forcePathStyle: true\r\n  })\r\n  client.middlewareStack.add(\r\n    (next, context) => async (args) => {\r\n      // args.request.headers[\"Custom-Header\"] = \"value\";\r\n      // eslint-disable-next-line\r\n      //\r\n      // @ts-expect-error\r\n      // delete args.request.headers[\"amz-sdk-request\"];\r\n      // delete args.request.headers[\"amz-sdk-invocation-id\"];//x-amz-content-sha256\r\n      // delete args.request.headers[\"x-amz-content-sha256\"];\r\n      // args.request.headers[\"date\"] = (new Date()).toUTCString();\r\n      // delete args.request.headers[\"x-amz-date\"];\r\n      // delete args.request.headers[\"x-amz-user-agent\"];\r\n      const result = await next(args)\r\n      return result\r\n    },\r\n    {\r\n      step: 'finalizeRequest',\r\n      name: 'removeHeaders'\r\n    }\r\n  )\r\n  return client\r\n}\r\n\r\nexport const getAssets: (\r\n  client: S3Client,\r\n  params: GetAssetArgs\r\n) => Promise<Asset[] | undefined> = async (client, params) => {\r\n  const command = new ListObjectsCommand(params)\r\n\r\n  const response = await client.send(command)\r\n  const folders: Asset[] =\r\n    response.CommonPrefixes?.map((item) => {\r\n      return {\r\n        prefix: item.Prefix,\r\n        etag: undefined,\r\n        name: item.Prefix,\r\n        lastModified: undefined,\r\n        size: 0,\r\n        key: item.Prefix\r\n      }\r\n    }) || []\r\n  const files: Asset[] =\r\n    response.Contents?.map((item) => {\r\n      return {\r\n        prefix: '',\r\n        etag: item.ETag,\r\n        name: item?.Key,\r\n        lastModified: item?.LastModified,\r\n        size: item?.Size,\r\n        key: item.Key\r\n      }\r\n    }) || []\r\n  return [...folders, ...files]\r\n}\r\n\r\nexport const updateAsset: (\r\n  client: S3Client,\r\n  params: CopyObjectCommandInput\r\n) => Promise<any> = async (client, params) => {\r\n  try {\r\n    const data = await client.send(new CopyObjectCommand(params))\r\n    console.log('updated asset', data)\r\n    return data // For unit tests.\r\n  } catch (err) {\r\n    console.log('Error', err)\r\n  }\r\n}\r\n\r\nexport const deleteAsset: (\r\n  client: S3Client,\r\n  params: DeleteObjectCommandInput\r\n) => Promise<any> = async (client, params) => {\r\n  try {\r\n    const data = await client.send(new DeleteObjectCommand(params))\r\n    return data // For unit tests.\r\n  } catch (err) {\r\n    console.log('Error', err)\r\n  }\r\n}\r\n\r\nexport const deleteAssets: (\r\n  client: S3Client,\r\n  bucket: string,\r\n  assets: Array<{ Key: string }>\r\n) => Promise<any> = async (client, bucket, assets) => {\r\n  try {\r\n    const params: DeleteObjectsCommandInput = {\r\n      Bucket: bucket,\r\n      Delete: {\r\n        Objects: assets.map((asset) => ({ Key: asset.Key }))\r\n      }\r\n    }\r\n    const data = await client.send(new DeleteObjectsCommand(params))\r\n    return data\r\n  } catch (err) {\r\n    console.log('Error', err)\r\n  }\r\n}\r\n\r\nexport const getAsset: (\r\n  client: S3Client,\r\n  params: GetObjectCommandInput\r\n) => Promise<any> = async (client, params) => {\r\n  const command = new GetObjectCommand(params)\r\n\r\n  const response: GetObjectCommandOutput = await client.send(command)\r\n  return response\r\n}\r\n\r\nexport const getDownloadLink = async (\r\n  s3Client: S3Client,\r\n  params: GetObjectCommandInput\r\n): Promise<string> => {\r\n  const command = new GetObjectCommand(params)\r\n  const url = await getSignedUrl(s3Client, command, { expiresIn: 3600 })\r\n  return url\r\n}\r\n\r\n/* eslint-disable */\r\nexport const getAssetV2: (\r\n  client: S3Client,\r\n  params: GetObjectCommandInput\r\n) => Promise<any> = async (client, params) => {\r\n  const command = new GetObjectCommand(params)\r\n  const endpoint = await client.config.endpoint()\r\n  command.middlewareStack.add(\r\n    (next) => async (args: any) => {\r\n      // @ts-ignore\r\n      const { headers, path } = args.request\r\n      const { hostname, protocol } = endpoint\r\n      fetch(`${protocol}//${hostname}/${params.Bucket}${path}`, {\r\n        headers: headers,\r\n      }).then((response) => {\r\n        console.log('Response = ', response)\r\n      })\r\n\r\n      return new Promise((_resolve, reject) =>\r\n        reject(new Error('Intentional Failure'))\r\n      )\r\n    },\r\n    {\r\n      step: 'finalizeRequest',\r\n      name: 'rH',\r\n    }\r\n  )\r\n  try {\r\n    await client.send(command)\r\n  } catch (error) { }\r\n  /* eslint-enable */\r\n\r\n  /* return new Promise((resolve, reject) => {\r\n    RNFetchBlob.fetch(\"GET\", \"http://www.example.com/images/img1.png\", {\r\n      Authorization: \"Bearer access-token...\",\r\n      // more headers  ..\r\n    })\r\n      .then((res) => {\r\n        let status = res.info().status;\r\n\r\n        if (status == 200) {\r\n          // the conversion is done in native code\r\n          let base64Str = res.base64();\r\n          // the following conversions are done in js, it's SYNC\r\n          let text = res.text();\r\n          let json = res.json();\r\n        } else {\r\n          // handle other status codes\r\n        }\r\n      })\r\n      // Something went wrong:\r\n      .catch((errorMessage, statusCode) => {\r\n        // error handling\r\n      });\r\n  }) */\r\n}\r\n\r\n/* eslint-disable */\r\nexport const buildClient = (\r\n  region: string,\r\n  apiKey: string,\r\n  apiSecret: string,\r\n  endpoint: string\r\n) => {\r\n  return buildS3Client({\r\n    region,\r\n    credentials: {\r\n      accessKeyId: apiKey,\r\n      secretAccessKey: apiSecret,\r\n    },\r\n    endpoint,\r\n  })\r\n}\r\n\r\nexport const uploadFileS3Original = async (\r\n  s3Client: S3Client,\r\n  filename: string,\r\n  bucket: string,\r\n  file?: File\r\n) => {\r\n  let input = {\r\n    Key: filename,\r\n    Bucket: bucket,\r\n  } as PutObjectCommandInput\r\n  if (file) {\r\n    input.Body = file\r\n  }\r\n\r\n  const newS3Client = new S3Client({\r\n    credentials: s3Client.config.credentials,\r\n    region: s3Client.config.region,\r\n    endpoint: s3Client.config.endpoint,\r\n    bucketEndpoint: s3Client.config.bucketEndpoint,\r\n    forcePathStyle: s3Client.config.forcePathStyle,\r\n  })\r\n  const cmd = new PutObjectCommand(input)\r\n\r\n  const response = await newS3Client.send(cmd)\r\n  return response\r\n}\r\nexport const uploadFileS3 = async (\r\n  s3Client: S3Client,\r\n  filename: string,\r\n  bucket: string,\r\n  uploadProgress: (progressPercent: number) => void,\r\n  file?: File\r\n) => {\r\n  let input = {\r\n    Key: filename,\r\n    Bucket: bucket,\r\n  } as PutObjectCommandInput\r\n  if (file) {\r\n    input.Body = file\r\n  }\r\n  const handler = new XhrHttpHandler({})\r\n\r\n  const newS3Client = new S3Client({\r\n    credentials: s3Client.config.credentials,\r\n    region: s3Client.config.region,\r\n    endpoint: s3Client.config.endpoint,\r\n    bucketEndpoint: s3Client.config.bucketEndpoint,\r\n    forcePathStyle: s3Client.config.forcePathStyle,\r\n    requestHandler: handler,\r\n  })\r\n\r\n  const cmd = new PutObjectCommand(input)\r\n\r\n  handler.on('xhr.upload.progress', (progress) => {\r\n    uploadProgress(Math.round((progress.loaded / progress.total) * 100))\r\n  })\r\n  const response = await newS3Client.send(cmd)\r\n\r\n  return response\r\n}\r\n\r\nexport const uploadFileS3V2 = async (\r\n  s3Client: S3Client,\r\n  filename: string,\r\n  bucket: string,\r\n  file?: File\r\n) => {\r\n  try {\r\n    console.log('Uploading file with progress')\r\n    const parallelUploads3 = new Upload({\r\n      client: s3Client,\r\n      params: { Bucket: bucket, Key: filename, Body: file },\r\n\r\n      tags: [\r\n        /*...*/\r\n      ], // optional tags\r\n      leavePartsOnError: false, // optional manually handle dropped parts\r\n    })\r\n\r\n    parallelUploads3.on('httpUploadProgress', (progress) => {\r\n      console.log('Progress = ', progress)\r\n    })\r\n\r\n    await parallelUploads3.done()\r\n  } catch (e) {\r\n    console.log(e)\r\n  }\r\n}\r\n\r\nexport const checkFileExists = async (\r\n  s3Client: S3Client,\r\n  fileKey: string,\r\n  bucket: string\r\n) => {\r\n  const input = {\r\n    Key: fileKey,\r\n    Bucket: bucket,\r\n  } as HeadObjectCommandInput\r\n  const cmd = new HeadObjectCommand(input)\r\n  const response = await s3Client.send(cmd)\r\n  return response\r\n}\r\n\r\nexport const updateCors = async (\r\n  s3Client: S3Client,\r\n  params: PutBucketCorsCommandInput\r\n): Promise<PutBucketCorsCommandOutput> => {\r\n  const rule: CORSRule = {\r\n    ID: 'allaccess',\r\n    AllowedHeaders: [''],\r\n    AllowedMethods: [''],\r\n    AllowedOrigins: [''],\r\n    MaxAgeSeconds: 3600,\r\n    ExposeHeaders: ['x-bz-content-sha1'],\r\n  }\r\n  params.CORSConfiguration.CORSRules.push(rule)\r\n  const command = new PutBucketCorsCommand(params)\r\n\r\n  const response: PutBucketCorsCommandOutput = await s3Client.send(command)\r\n  return response\r\n}\r\n","import { Controller } from 'react-hook-form'\nimport { StyleSheet } from 'react-native'\nimport { TextInput } from 'react-native-paper'\nimport React from 'react'\n\nconst styles = StyleSheet.create({\n  textInput: {\n    // borderColor: \"#000000\",\n    // borderBottomWidth: 1,\n    marginTop: 20\n  }\n})\n\nexport const InputField: (props: any) => JSX.Element = ({ control, name, label }: any) => {\n  if (control === undefined) {\n    return null\n  }\n  /* const {\n          field: { onChange, onBlur, value, ref },\n          fieldState: { invalid, isTouched, isDirty },\n          formState: { touchedFields, dirtyFields }\n      } = useController({\n          name,\n          control,\n          rules: { required: true },\n          defaultValue: \"\",\n      }); */\n\n  return <>\n        <Controller\n            control={control}\n            name={name}\n            render={({ field: { value, onChange, onBlur } }: any) => {\n              return <>\n                    <TextInput\n                        label={label}\n                        value={value}\n                        onChangeText={(text) => {\n                          console.log('[InputChange] name = ', name, ' value = ', text)\n                          onChange(text)\n                        }}\n                        onBlur={onBlur}\n                        style={styles.textInput}\n                    />\n                </>\n            }}\n        />\n    </>\n}\n","import React, { useContext, useEffect, useState } from 'react'\nimport { useForm } from 'react-hook-form'\nimport { ApplicationContext } from '../../contexts/application/ApplicationContext'\nimport { buildS3Client, getAssets } from '../../services/s3'\nimport { Text, Card, Snackbar } from 'react-native-paper'\nimport { InputField } from '../Input/InputField'\nimport { Button } from '../Button'\nimport { KeyboardAvoidingView, Platform, StyleSheet, View } from 'react-native'\nimport { S3Client } from '@aws-sdk/client-s3'\n\nexport const SaveCredentialsForm: React.FC = () => {\n  const [appState, setAppState] = useContext(ApplicationContext)\n  const { s3credentials } = appState\n  const { control, handleSubmit, getValues, reset } = useForm({\n    defaultValues: s3credentials\n  })\n\n  useEffect(() => {\n    reset(s3credentials)\n  }, [s3credentials])\n\n  const [, setSaved] = useState(false)\n\n  const onSubmit = async (): void => {\n    onToggleSnackBar()\n    const data = getValues()\n\n    setAppState({\n      ...appState,\n      s3credentials: data as any,\n      s3client: undefined\n    })\n\n    setSaved(true)\n    setTimeout(() => {\n      setSaved(false)\n    }, 1000)\n    /**\n     * Build the s3 client here\n     */\n    const s3Client: S3Client = buildS3Client({\n      credentials: {\n        accessKeyId: data.apiKey,\n        secretAccessKey: data.apiSecret\n      },\n      region: data.region,\n      endpoint: data.endpoint\n    })\n\n    getAssets(s3Client, { Bucket: 'testinghumza' }).catch(() => {\n      console.log('[SaveCredentialsForm] Promise failure getAssets')\n    })\n  }\n\n  // snackbar\n  const [visible, setVisible] = React.useState<boolean>(false)\n  const onToggleSnackBar: () => void = () => setVisible(!visible)\n  const onDismissSnackBar: () => void = () => setVisible(false)\n\n  const styles = StyleSheet.create({\n    container: {\n      flex: 1\n    },\n    inner: {\n      padding: 24,\n      flex: 1,\n      justifyContent: 'space-around'\n    },\n    header: {\n      fontSize: 36,\n      marginBottom: 48\n    },\n    textInput: {\n      height: 40,\n      borderColor: '#000000',\n      borderBottomWidth: 1,\n      marginBottom: 36\n    },\n    snackBarContainer: {\n      flex: 1,\n      justifyContent: 'space-between'\n    }\n  })\n\n  return (\n    <KeyboardAvoidingView\n      behavior={Platform.OS === 'ios' ? 'padding' : 'height'}\n      style={styles.container}\n    >\n      <Card>\n        <Card.Content>\n          <Text variant=\"headlineSmall\">API Configuration</Text>\n          <InputField control={control} name=\"apiKey\" label=\"API KEY\" />\n\n          <InputField control={control} name=\"apiSecret\" label=\"Api Secret\" />\n\n          <InputField control={control} name=\"endpoint\" label=\"Endpoint\" />\n\n          <InputField control={control} name=\"bucket\" label=\"Bucket\" />\n\n          <InputField control={control} name=\"region\" label=\"Region\" />\n        </Card.Content>\n        <Card.Actions>\n          {/* eslint-disable-next-line */}\n          <Button onPress={handleSubmit(onSubmit)}>Submit</Button>\n        </Card.Actions>\n      </Card>\n      <View style={styles.snackBarContainer}>\n        <Snackbar\n          visible={visible}\n          onDismiss={onDismissSnackBar}\n          action={{\n            label: 'Dismiss',\n            onPress: () => {\n              // Do something\n            }\n          }}\n        >\n          Credentials are saved!\n        </Snackbar>\n      </View>\n    </KeyboardAvoidingView>\n  )\n}\n","import { SaveCredentialsForm } from '../SaveCredentialsForm'\nimport React from 'react'\n\nexport const ApiConfiguration: React.FC = () => {\n  /**\n   **\n   Testing online code editor\n   * **/\n  return <SaveCredentialsForm />\n}\n","import { Asset, GetAssetArgs } from '../services/s3/types'\nimport { Asset as AppAssetType } from '../services/types'\nexport const S3TypeToInternalAdapter = (assets: Asset[], params: GetAssetArgs): AppAssetType[] => {\n  return assets.map((asset: Asset) => {\n    const fileName: string = asset.name.replace(params.Prefix, '')\n    const appAsset: AppAssetType = {\n      assetId: asset.etag,\n      fileName,\n      fileSize: asset.size,\n      updatedAt: asset.lastModified,\n      isFolder: asset.prefix?.length > 0,\n      prefix: asset.prefix,\n      etag: asset.etag,\n      key: asset.key\n    }\n    return appAsset\n  })\n}\n","import { S3Client } from '@aws-sdk/client-s3'\nimport { useMemo } from 'react'\nimport { ApplicationState } from '../contexts/application/ApplicationContext'\nimport { buildS3Client } from '../services/s3'\n\nexport const useS3Client: (\n  appState: ApplicationState\n) => [S3Client | undefined, boolean] = (appState: ApplicationState) => {\n  const { s3credentials } = appState\n  const { apiKey, apiSecret, region, endpoint } = s3credentials\n  const [client, isInitialized] = useMemo(() => {\n    if (apiKey && apiSecret && endpoint) {\n      // console.log('[useS3Client] Building S3 Client region = ', region)\n      // console.log('[useS3Client] Building S3 Client apiKey = ', apiKey)\n\n      return [\n        buildS3Client({\n          region,\n          credentials: {\n            accessKeyId: apiKey,\n            secretAccessKey: apiSecret\n          },\n          endpoint\n        }),\n        true\n      ]\n    }\n    return [undefined, false]\n  }, [apiKey, apiSecret, region, endpoint])\n  return [client, isInitialized]\n}\n","import React from 'react'\n\nexport const ContextMenu: React.FC = () => {\n  /*\n  const [anchorEl] = React.useState<null | HTMLElement>(null)\n  const open = Boolean(anchorEl) */\n  /*\n  const _handleClick = (event: React.MouseEvent<HTMLElement>) => {\n    setAnchorEl(event.currentTarget);\n  };\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n  */\n\n  return (\n    <>\n    </>)\n}\n","export const fileToIcon = (fileExt: string): string => {\n  switch (fileExt) {\n    case 'png':\n    case 'jpeg':\n    case 'jpg':\n      return 'image'\n\n    default:\n      return 'file'\n  }\n}\n","import React, { HTMLProps } from 'react'\nimport { ColumnDef, createColumnHelper } from '@tanstack/react-table'\nimport prettyBytes from 'pretty-bytes'\nimport dayjs from 'dayjs'\nimport relativeTime from 'dayjs/plugin/relativeTime'\nimport { Feather } from '@expo/vector-icons'\nimport { Platform, StyleSheet } from 'react-native'\nimport { Checkbox, Text } from 'react-native-paper'\n\nimport { ContextMenu } from '../ContextMenu'\nimport { Asset } from '../../services/types'\nimport { fileToIcon } from '../../services/file-icon-service'\n\ndayjs.extend(relativeTime)\n\nconst styles = StyleSheet.create({\n  icon: {},\n  filename: {}\n})\n\n// icons for different file types or folders\nconst iconType = (asset: Asset): JSX.Element => {\n  const re = /(?:\\.([^.]+))?$/\n  const internalType = asset.isFolder\n    ? 'folder'\n    : re.exec(asset.fileName)[1] || ''\n  const fileExtension = asset.fileName.split('.').pop()\n\n  switch (internalType) {\n    case 'folder':\n      return (\n        <Feather name=\"folder\" color=\"#ffbd43\" size={22} style={styles.icon} />\n      )\n    default:\n      return (\n        <Feather\n          name={fileToIcon(fileExtension) as any}\n          color=\"#6565d6\"\n          size={22}\n          style={styles.icon}\n        />\n      )\n  }\n}\n\nconst IndeterminateCheckbox = ({\n  indeterminate,\n  className = '',\n  ...rest\n}: { indeterminate?: boolean } & HTMLProps<HTMLInputElement>): JSX.Element => {\n  const ref = React.useRef<HTMLInputElement>(null)\n\n  React.useEffect(() => {\n    if (typeof indeterminate === 'boolean' && ref.current) {\n      ref.current.indeterminate = !rest.checked && indeterminate\n    }\n  }, [ref, indeterminate])\n\n  return (\n    <Checkbox\n      status={rest.checked ? 'checked' : 'unchecked'}\n      onPress={() => rest.onChange()}\n      ref={ref}\n      // className={className + ' cursor-pointer'}\n      {...rest}\n    />\n  )\n}\n\nexport const DataGridColumns = (): any => {\n  const columnHelper = createColumnHelper<Asset>()\n  const columns: Array<ColumnDef<Asset, any>> = [\n    columnHelper.accessor('select', {\n      id: 'select',\n      header: ({ table }) => (\n        /* <IndeterminateCheckbox\n          {...{\n            checked: table.getIsAllRowsSelected(),\n            indeterminate: table.getIsSomeRowsSelected(),\n            onChange: table.getToggleAllRowsSelectedHandler()\n          }}\n        /> */\n          <></>\n      ),\n      cell: ({ row }) => {\n        return !row.original.isFolder &&\n        (\n          <IndeterminateCheckbox\n            {...{\n              checked: row.getIsSelected(),\n              indeterminate: row.getIsSomeSelected(),\n              onChange: row.toggleSelected\n            }}\n          />\n        )\n      }\n    }),\n    columnHelper.accessor('fileName', {\n      id: 'fileName',\n      header: 'Name',\n      cell: (info) => {\n        const row = info.row.original\n        const fileName = row.isFolder\n          ? info.getValue().slice(0, -1)\n          : info.getValue()\n        return (\n          <>\n            <Text style={styles.filename}>\n              {iconType(row)} &nbsp;\n              {fileName}\n            </Text>\n          </>\n        )\n      }\n    }),\n\n    // Display file size\n    columnHelper.accessor('fileSize', {\n      id: 'fileSize',\n      header: 'Size',\n      cell: (info) => (\n        <Text>\n          {!info.row.original.isFolder && prettyBytes(info.getValue())}\n        </Text>\n      )\n    }),\n\n    // Dispaly last modified\n    columnHelper.accessor('updatedAt', {\n      id: 'updatedAt',\n      header: 'Last Modified',\n      cell: (info) => {\n        return (\n          <Text>\n            {!info.row.original.isFolder && dayjs(info.getValue()).fromNow()}\n          </Text>\n        )\n      }\n    }),\n\n    // Display column size\n    columnHelper.display({\n      id: 'actions',\n\n      cell: () => <ContextMenu />\n    })\n  ].filter((item) => {\n    return Platform.OS !== 'web' ? item.id === 'fileName' : true\n  })\n  return columns\n}\n","export type ScreenType = 'xs' | 'sm' | 'md' | 'lg' | 'xl' | 'xxl'\n\nexport const getScreenType = (px: number): ScreenType => {\n  if (px < 576) {\n    return 'xs'\n  } else if (px >= 576 && px < 768) {\n    return 'md'\n  } else if (px >= 768 && px < 992) {\n    return 'lg'\n  } else if (px >= 992 && px < 1200) {\n    return 'xl'\n  } else if (px >= 1200) {\n    return 'xxl'\n  }\n}\n","import { useEffect, useState } from 'react'\nimport { Dimensions, EmitterSubscription } from 'react-native'\nimport { getScreenType, ScreenType } from './constants'\n\nconst window = Dimensions.get('window')\nconst screenType: ScreenType = getScreenType(window.width)\n\nexport const useScreenSize = (): string => {\n  const [dimensions, setDimensions] = useState<ScreenType>(screenType)\n\n  useEffect(() => {\n    const subscription: EmitterSubscription = Dimensions.addEventListener(\n      'change',\n      ({ window, screen }) => {\n        const screenType: ScreenType = getScreenType(window.width)\n        setDimensions(screenType)\n      }\n    )\n    return () => subscription?.remove()\n  }, [])\n\n  return dimensions\n}\n","import React, { Fragment, useEffect, useMemo, useState } from 'react'\nimport {\n  flexRender,\n  getCoreRowModel,\n  getPaginationRowModel,\n  getSortedRowModel,\n  SortingState,\n  useReactTable\n} from '@tanstack/react-table'\nimport {\n  ActivityIndicator,\n  DataTable as ReactPaperDataTable,\n  Text,\n  ToggleButton\n} from 'react-native-paper'\nimport { ScrollView, StyleSheet } from 'react-native'\nimport { AntDesign } from '@expo/vector-icons'\n\nimport { DataGridColumns } from './dataTableColumns'\nimport { Asset } from '../../services/types'\nimport { useScreenSize } from '../../services/rn-responsive-design/useScreenSize'\nimport { isMobile } from '../../services/rn-responsive-design/utils'\nimport { Portal } from '@gorhom/portal'\n\nconst styles = StyleSheet.create({\n  tableHead: {\n    height: 'auto'\n  },\n  sorterIcon: {\n    marginLeft: '10px'\n  },\n  cell: {\n    // flexBasis: 'auto',\n    // paddingRight: '30px',\n  },\n  cellFirstChild: {\n    flexBasis: '50%'\n  },\n  title: {\n    display: 'flex',\n    alignItems: 'center'\n  }\n})\n\nexport interface DataTableProps {\n  assets: Asset[] | undefined\n  onPress: (asset: Asset) => void\n  isLoading: boolean\n  deleteAssets: (assets: Asset[]) => void\n}\n\nexport const DataTable: (props: DataTableProps) => JSX.Element = ({\n  assets,\n  onPress,\n  isLoading,\n  deleteAssets\n}: DataTableProps) => {\n  const [data, setData] = React.useState<Asset[]>(() => assets || [])\n  const [sorting, setSorting] = React.useState<SortingState>([])\n  const [columns, setColumns] = useState(DataGridColumns())\n  const [currentPage, setCurrentPage] = useState(1)\n  const screenType = useScreenSize()\n  useMemo(() => {\n    if (isMobile()) {\n      setColumns(DataGridColumns().filter((column) => column.id === 'fileName'))\n    } else {\n      setColumns(DataGridColumns())\n    }\n  }, [screenType])\n  useEffect(() => {\n    table.resetRowSelection()\n    setData(assets || [])\n    setCurrentPage(1)\n  }, [assets?.map(asset => asset.key).join(',')])\n  const table = useReactTable({\n    data,\n    columns,\n    state: {\n      sorting\n    },\n    onSortingChange: setSorting,\n    getCoreRowModel: getCoreRowModel(),\n    getSortedRowModel: getSortedRowModel(),\n    getPaginationRowModel: getPaginationRowModel()\n  })\n  const selectedRows = table.getSelectedRowModel().rows\n\n  useEffect(() => {\n    table.setPageSize(20 * currentPage)\n  }, [currentPage])\n\n  const isCloseToBottom = ({\n    layoutMeasurement,\n    contentOffset,\n    contentSize\n  }): boolean => {\n    const paddingToBottom = 20\n    return (\n      /* eslint-disable */\n      layoutMeasurement.height + contentOffset.y >=\n      contentSize.height - paddingToBottom\n      /* eslint-enable */\n    )\n  }\n\n  const getStyle = (\n    id: string,\n    isHeader: boolean = false\n  ): React.CSSProperties => {\n    switch (id) {\n      case 'select': {\n        if (isHeader) {\n          return {\n            maxWidth: 50,\n            position: 'relative',\n            top: -3\n          }\n        }\n        return {\n          maxWidth: 50\n        }\n      }\n      case 'fileName': {\n        return { flexBasis: '50%' }\n      }\n      case 'fileSize': {\n        return {\n          justifyContent: 'end',\n          marginRight: 30\n        }\n      }\n      default: {\n        return {}\n      }\n    }\n  }\n\n  const deleteMultipleAssets = (): void => {\n    deleteAssets(selectedRows.map((row) => row.original))\n  }\n\n  return (\n    <>\n      <Portal hostName=\"listassetsheader\">\n        {selectedRows?.length > 0 && (\n          <ToggleButton\n            icon=\"delete\"\n            value=\"delete\"\n            onPress={() => {\n              deleteMultipleAssets()\n            }}\n          />\n        )}\n      </Portal>\n      <ReactPaperDataTable.Header style={styles.tableHead}>\n        {table.getHeaderGroups().map((headerGroup) => (\n          <Fragment key={headerGroup.id}>\n            {headerGroup.headers.map((header, index) => (\n              <ReactPaperDataTable.Title\n                key={header.id}\n                style={getStyle(header.id, true)}\n              >\n                {header.isPlaceholder\n                  ? null\n                  : (\n                    <Text\n                      {...{\n                        onClick: header.column.getToggleSortingHandler()\n                      }}\n                    >\n                      {flexRender(\n                        header.column.columnDef.header,\n                        header.getContext()\n                      )}\n                      {{\n                        asc: (\n                          <AntDesign name=\"arrowup\" style={styles.sorterIcon} />\n                        ),\n                        desc: (\n                          <AntDesign name=\"arrowdown\" style={styles.sorterIcon} />\n                        )\n                      }[header.column.getIsSorted() as string] ?? null}\n                    </Text>\n                    )}\n              </ReactPaperDataTable.Title>\n            ))}\n          </Fragment>\n        ))}\n      </ReactPaperDataTable.Header>\n      <ScrollView\n        onScroll={({ nativeEvent }) => {\n          if (isCloseToBottom(nativeEvent)) {\n            console.log('[Scroll] Scroll close to bottom')\n            setCurrentPage(currentPage + 1)\n            // table.setPageSize(20 * 2)\n          }\n        }}\n      >\n        <ReactPaperDataTable>\n          {isLoading && <ActivityIndicator animating />}\n          {table.getRowModel().rows.map((row) => (\n            <ReactPaperDataTable.Row\n              key={row.id}\n              onPress={() => {\n                onPress(row.original)\n              }}\n            >\n              {row.getVisibleCells().map((cell, index) => (\n                <ReactPaperDataTable.Cell\n                  key={cell.id}\n                  style={getStyle(cell.column.id)}\n                >\n                  {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                </ReactPaperDataTable.Cell>\n              ))}\n            </ReactPaperDataTable.Row>\n          ))}\n          <ReactPaperDataTable.Pagination\n            page={table.getState().pagination.pageIndex + 1}\n            numberOfPages={table.getPageCount()}\n            onPageChange={(page) => table.setPageIndex(page - 1)}\n            label={`${table.getState().pagination.pageIndex + 1\n              } of ${table.getPageCount()}`}\n          />\n        </ReactPaperDataTable>\n      </ScrollView>\n    </>\n  )\n}\n","import { Dimensions } from 'react-native'\nimport { getScreenType } from './constants'\n\nexport const isMobile = (): boolean => {\n  const window = Dimensions.get('window')\n  return ['xs'].includes(getScreenType(window.width))\n}\n","/* eslint-disable */\nimport React from 'react'\nimport { StyleSheet, View } from 'react-native'\n\nimport { Modal, Portal } from 'react-native-paper'\n\nexport interface ModalProps {\n  isVisible: boolean\n  onClose: () => void\n}\n\nconst AppModal = ({\n  isVisible,\n  onClose,\n  children,\n}: React.PropsWithChildren<ModalProps>): JSX.Element => {\n  if (!isVisible) {\n    return null\n  }\n  return (\n    <Portal>\n      {/* <View style={styles.centeredView}> */}\n      <Modal\n        // animationType=\"slide\"\n        // transparent={true}\n        visible={isVisible}\n        // onRequestClose={() => {\n        //   Alert.alert('Modal has been closed.')\n        //   onClose()\n        // }}\n        onDismiss={onClose}\n      >\n        <View style={styles.centeredView}>\n          <View style={styles.modalView}>\n            {children}\n            {/* <Pressable\n              style={[styles.button, styles.buttonClose]}\n              onPress={() => onClose()}\n            > */}\n            {/* </Pressable> */}\n          </View>\n        </View>\n      </Modal>\n      {/* </View> */}\n    </Portal>\n  )\n}\n\nconst styles = StyleSheet.create({\n  centeredView: {\n    // flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    // marginTop: 22\n  },\n  modalView: {\n    // margin: 20,\n    // width: 200,\n    backgroundColor: 'white',\n    borderRadius: 20,\n    padding: 30,\n    alignItems: 'center',\n    // shadowColor: '#000',\n    // shadowOffset: {\n    //   width: 0,\n    //   height: 2\n    // },\n    // shadowOpacity: 0.25,\n    // shadowRadius: 4,\n    // elevation: 5\n  },\n  button: {\n    borderRadius: 20,\n    padding: 10,\n    elevation: 2,\n  },\n  buttonOpen: {\n    backgroundColor: '#F194FF',\n  },\n  buttonClose: {\n    backgroundColor: '#2196F3',\n  },\n  textStyle: {\n    // color: 'white',\n    // fontWeight: 'bold',\n    textAlign: 'center',\n    // marginTop: 10\n  },\n  modalText: {\n    marginBottom: 15,\n    textAlign: 'center',\n  },\n})\n\nexport default AppModal\n","import React, { PropsWithChildren } from 'react'\nimport { StyleSheet } from 'react-native'\nimport { Text, TextProps } from 'react-native-paper'\n\nexport interface TextLinkProps {\n  isUnderlined: boolean\n}\n\nexport const TextLink = ({\n  children,\n  isUnderlined,\n  ...args\n}: PropsWithChildren<TextLinkProps & TextProps>): JSX.Element => {\n  return (\n        <Text {...args} style={isUnderlined ? [styles.underline] : []}>\n            {children}\n        </Text>\n  )\n}\n\nconst styles = StyleSheet.create({\n  underline: {\n    textDecorationLine: 'underline'\n  }\n})\n","/**\n * This context will hold all of our application data like the current\n * user's api Keys, currently viewed directory, etc\n */\n\nimport React, { createContext } from 'react'\n\nexport const initialData: Object = {}\n\nexport type ThemeContextType = [\n  Object,\n  React.Dispatch<React.SetStateAction<Object>>\n]\n\nexport const ThemeContextInternal = createContext<ThemeContextType>(\n  Object.create({})\n)\n","import axios from 'axios'\nimport { BackblazeB2Config } from '../types'\n\nexport const getBaseUrl = (): string => 'https://api.backblazeb2.com/b2api/v2/'\n\nexport const getAuthorizationToken = (key: string, secret: string): string => {\n  return btoa(`${key}:${secret}`)\n}\n\nexport interface authorizationType {\n  [key: string]: string\n}\n\nexport const authorizeAccount = async (\n  authorizationToken: string\n): Promise<{ [key: string]: string }> => {\n  const response = await axios({\n    method: 'GET',\n    url: `${getBaseUrl()}b2_authorize_account`,\n    headers: {\n      Accept: 'application/json',\n      Authorization: `Basic ${authorizationToken}`\n    }\n  })\n  return response.data\n}\n\nexport const getDownloadToken = async (\n  authorizationToken: string,\n  bucket: string,\n  key: string\n): Promise<authorizationType> => {\n  const response = await axios({\n    method: 'POST',\n    url: `${getBaseUrl()}b2_get_download_authorization`,\n    headers: {\n      Accept: 'application/json',\n      Authorization: `Basic ${authorizationToken}`\n    },\n    data: {\n      bucketId: bucket,\n      fileNamePrefix: key,\n      validDurationInSeconds: 86400\n    }\n  })\n  return response.data\n}\n\nexport const isBackblaze = (endpoint: string): boolean => {\n  return endpoint.toLowerCase().includes('backblazeb2')\n}\n\nexport const getDownloadUrl = (\n  config: BackblazeB2Config,\n  bucket: string,\n  fileKey: string\n): string => {\n  const { downloadUrl } = config\n  return `${downloadUrl}/file/${bucket}/${fileKey}?Authorization=${config.authorizationToken}`\n}\n","import { S3Client } from '@aws-sdk/client-s3'\nimport { ApplicationState } from '../../contexts/application/ApplicationContext'\nimport {\n  authorizeAccount,\n  getAuthorizationToken,\n  isBackblaze\n} from '../backblaze/backblaze'\nimport { getDownloadLink as S3GetDownloadUrl } from '../s3'\n\nexport const getBackblazeB2Data = async (\n  appState: ApplicationState\n): Promise<{ [key: string]: string }> => {\n  const { apiKey, apiSecret } = appState.s3credentials\n  const token = getAuthorizationToken(apiKey, apiSecret)\n  const backblazeData = await authorizeAccount(token)\n  return backblazeData\n}\n\nexport const isBackblazeB2TokenValid = (\n  appState: ApplicationState\n): boolean => {\n  const lastUpdated: number = appState.backblaze.updatedAt.getTime() / 1000\n  const timeNow: number = new Date().getTime() / 1000\n  const difference = timeNow - lastUpdated\n  return difference < 86400\n}\n\nexport const getDownloadLinkByKey = async (\n  appState: ApplicationState,\n  setAppState: React.Dispatch<React.SetStateAction<ApplicationState>>,\n  s3Client: S3Client,\n  key: string\n): Promise<string> => {\n  if (isBackblaze(appState.s3credentials.endpoint)) {\n    /* const token = getAuthorizationToken(\n      appState.s3credentials.apiKey,\n      appState.s3credentials.apiSecret\n    ) */\n    /* const authToken = await getDownloadToken(\n      token,\n      appState.s3credentials.bucket,\n      key\n    ) */\n    return await S3GetDownloadUrl(s3Client, {\n      Key: key,\n      Bucket: appState.s3credentials.bucket\n    })\n\n    /* if (isBackblazeB2TokenValid(appState)) {\n      return getDownloadUrl(\n        appState.backblaze,\n        appState.s3credentials.bucket,\n        key\n      )\n    } else {\n      const backblazeData = await getBackblazeB2Data(appState)\n      const b2Data = BackblazeB2AuthToLocalAdapter(backblazeData)\n      setAppState({ ...appState, backblaze: b2Data })\n      return getDownloadUrl(b2Data, appState.s3credentials.bucket, key)\n    } */\n  } else {\n    return await S3GetDownloadUrl(appState.s3client, {\n      Key: key,\n      Bucket: appState.s3credentials.bucket\n    })\n  }\n}\n","import React, { useState, useContext, useEffect } from 'react'\nimport { Feather } from '@expo/vector-icons'\nimport { ActivityIndicator, StyleSheet, View } from 'react-native'\nimport { IconButton, Text, TextInput } from 'react-native-paper'\n\nimport { Asset } from '../../services/types'\nimport { ThemeContextInternal } from '../../contexts/theme/ThemeContextInternal'\nimport { ApplicationContext } from '../../contexts/application/ApplicationContext'\nimport { updateAsset as s3UpdateAsset, deleteAsset } from '../../services/s3'\nimport { useS3Client } from '../../hooks/useS3Client'\nimport { getDownloadLinkByKey } from '../../services/cross-service-storage/cross-service-storage'\nimport { useScreenSize } from '../../services/rn-responsive-design/useScreenSize'\n\nimport prettyBytes from 'pretty-bytes'\n\nexport interface PreviewPropsType {\n  asset: Asset\n  prefix: string\n  onClose: () => void\n}\n\nconst Preview = ({ asset, onClose, prefix }: PreviewPropsType): JSX.Element => {\n  const [appState, setAppState] = useContext(ApplicationContext)\n  const { s3credentials } = appState\n\n  const [theme] = useContext(ThemeContextInternal)\n  const [isEditing, setIsEditing] = useState(false)\n  const [updateAsset, setUpdateAsset] = useState(asset)\n  const [text, setText] = useState(asset.fileName)\n  const [s3Client] = useS3Client(appState)\n  const screenSize = useScreenSize()\n  const [performingAction, setPerformingAction] = useState(false)\n\n  useEffect(() => {\n    setUpdateAsset(asset)\n  }, [asset])\n\n  const handleSave = async (): Promise<void> => {\n    setPerformingAction(true)\n    setIsEditing(false)\n    setUpdateAsset((asset) => ({\n      ...asset,\n      fileName: text\n    }))\n    await s3UpdateAsset(s3Client, {\n      Bucket: s3credentials.bucket,\n      Key: asset.key.replace(asset.fileName, text),\n      CopySource: s3credentials.bucket + '/' + asset.key\n    })\n    await deleteAsset(s3Client, {\n      Key: asset.key,\n      Bucket: s3credentials.bucket\n    })\n    setAppState({ ...appState, mutatedAt: new Date() })\n    onClose()\n  }\n\n  const handleDelete = async (): Promise<void> => {\n    setPerformingAction(true)\n    const deleteParams = {\n      Bucket: s3credentials.bucket,\n      Key: updateAsset.key\n    }\n    await deleteAsset(s3Client, deleteParams)\n    setAppState({ ...appState, mutatedAt: new Date() })\n    onClose()\n  }\n\n  const handleDownload = async (): Promise<void> => {\n    const link = await getDownloadLinkByKey(\n      appState,\n      setAppState,\n      s3Client,\n      asset.key\n    )\n    const a = document.createElement('a')\n    a.href = link\n    a.download = asset.key\n    a.style.display = 'none'\n    document.body.appendChild(a)\n    a.click()\n    a.remove()\n  }\n\n  /* eslint-disable */\n  return (\n    <>\n      <View\n        style={\n          ['xs', 'md'].includes(screenSize)\n            ? [styles.mainMobile]\n            : [styles.main]\n        }\n      >\n        <IconButton\n          theme={theme}\n          icon=\"close\"\n          onPress={onClose}\n          style={styles.closeButton}\n        />\n        <View\n          style={\n            ['xs', 'md'].includes(screenSize)\n              ? [styles.section2Mobile, styles.centered]\n              : [styles.section2, styles.centered]\n          }\n        >\n          <Text\n            variant=\"headlineSmall\"\n            style={[styles.textCenter, styles.marginBottom]}\n          >\n            <Feather theme={theme} name=\"file\" size={100} />\n          </Text>\n          <Text variant=\"headlineSmall\" style={styles.textCenter}>\n            {isEditing ? (\n              <TextInput\n                value={isEditing ? text : updateAsset?.fileName}\n                onChangeText={(text) => setText(text)}\n              />\n            ) : (\n              updateAsset?.fileName\n            )}\n          </Text>\n          <Text>{prettyBytes(asset.fileSize)}</Text>\n          <View style={[styles.centered, styles.horizontal]}>\n            {isEditing ? (\n              <IconButton theme={theme} icon=\"check\" onPress={handleSave} />\n            ) : (\n              <IconButton\n                theme={theme}\n                icon=\"pencil\"\n                onPress={() => setIsEditing(true)}\n              />\n            )}\n            <IconButton theme={theme} icon=\"trash-can\" onPress={handleDelete} />\n            <IconButton\n              theme={theme}\n              icon=\"download\"\n              onPress={handleDownload}\n            />\n            {performingAction && <ActivityIndicator />}\n          </View>\n        </View>\n      </View>\n    </>\n  )\n}\n/* eslint-enable */\n\nconst styles = StyleSheet.create({\n  mainMobile: {\n    backgroundColor: 'rgb(242, 242, 242)'\n  },\n  main: {\n    display: 'flex',\n    flexGrow: 1\n  },\n  closeButton: {\n    display: 'flex',\n    textAlign: 'right',\n    height: 50\n  },\n  marginBottom: {\n    marginBottom: 10\n  },\n  textCenter: {\n    textAlign: 'center'\n  },\n  centered: {\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  horizontal: {\n    flexDirection: 'row'\n  },\n  section2: {\n    minWidth: '30vw',\n    flex: 1,\n    flexGrow: 1,\n    margin: 20\n  },\n  section2Mobile: {\n    backgroundColor: 'rgb(242, 242, 242)',\n    minWidth: '100vw',\n    flex: 1,\n    flexGrow: 1,\n    margin: 20\n  }\n})\n\nexport { Preview }\n","import React, { useEffect, useState } from 'react'\nimport { StyleSheet, Image, TouchableOpacity } from 'react-native'\nimport { Text } from 'react-native-paper'\nimport { Feather } from '@expo/vector-icons'\nimport { Asset } from '../../services/types'\nimport { getAsset } from '../../services/s3'\nimport { GetObjectCommandOutput, S3Client } from '@aws-sdk/client-s3'\nimport { ApplicationState } from '../../contexts/application/ApplicationContext'\nimport { fileToIcon } from '../../services/file-icon-service'\n// import { RNFetchBlob } from 'rn-fetch-blob'\n\nconst imageExtensions = ['png', 'jpeg', 'jpg']\n\n/*\nasync function collectStream(stream: ReadableStream): Promise<Uint8Array> {\n  let res = new Uint8Array(0)\n  const reader = stream.getReader()\n  let isDone = false\n  while (!isDone) {\n    const { done, value } = await reader.read()\n    if (value) {\n      const prior = res\n      res = new Uint8Array(prior.length + value.length)\n      res.set(prior)\n      res.set(value, prior.length)\n    }\n    isDone = done\n  }\n  return res\n}\n*/\n\nexport const mobileResponse = (stream): Response => {\n  return new Response(stream, {})\n}\n\nexport const GridItemImagePreview = ({\n  item,\n  onPress,\n  s3client,\n  s3Initialized,\n  appState\n}: {\n  item: Asset\n  onPress: any\n  s3client: S3Client\n  s3Initialized: boolean\n  appState: ApplicationState\n}): JSX.Element => {\n  const [d, setD] = useState<string | ArrayBuffer>()\n  const [error, setError] = useState<Error | undefined>(undefined)\n\n  const [loaded, setLoaded] = useState(false)\n  const [, setShowPreview] = useState(false)\n  const fileExtension = item.fileName.split('.').pop()\n  const isImage = imageExtensions.includes(fileExtension)\n  const fileIcon = !item.isFolder ? fileToIcon(fileExtension) : 'folder'\n  const loadImage = item.fileSize < 1000000\n  useEffect(() => {\n    if (!item.isFolder) {\n      if (isImage && loadImage) {\n        /* getAssetV2(s3client, {\n          Key: item.key,\n          Bucket: appState.s3credentials.bucket,\n        }) */\n        setShowPreview(true)\n        getAsset(s3client, {\n          Key: item.key,\n          Bucket: appState.s3credentials.bucket\n        })\n          .then((response: GetObjectCommandOutput) => {\n            mobileResponse(response.Body)\n              .blob()\n              .then((blobIn) => {\n                const fileReaderInstance = new FileReader()\n                fileReaderInstance.readAsDataURL(blobIn)\n                fileReaderInstance.onload = () => {\n                  const base64 = fileReaderInstance.result\n                  setD(base64)\n                  setLoaded(true)\n                }\n              })\n              .catch((error: Error) => {\n                setError(error)\n              })\n          })\n          .catch((error: Error) => {\n            setError(error)\n          })\n      }\n    }\n  }, [s3Initialized])\n\n  const onPressPreview = (): void => {\n    onPress(item)\n  }\n  /* eslint-disable */\n  return (\n    <TouchableOpacity onPress={onPressPreview}>\n      {isImage && loadImage ? (\n        loaded && !error ? (\n          <Image source={{ uri: d.toString() }} style={styles.preview} />\n        ) : (\n          <Feather name=\"alert-triangle\" size={100} style={styles.errorIcon} />\n        )\n      ) : (\n        <Feather name={fileIcon as any} size={100} style={styles.icon} />\n      )}\n      <Text\n        style={styles.fileName}\n        onPress={() => {\n          onPress(item)\n        }}\n      >\n        {item.fileName}\n      </Text>\n    </TouchableOpacity>\n  )\n  /** eslint-enable */\n}\n\nconst styles = StyleSheet.create({\n  preview: {\n    width: '100%',\n    height: 200,\n  },\n  icon: {\n    marginTop: 20,\n  },\n  wrapper: {},\n  fileName: {\n    bottom: 0,\n    textAlign: 'center',\n  },\n  errorIcon: {\n    color: 'red',\n  },\n})\n","import React from 'react'\nimport { StyleSheet, TouchableOpacity } from 'react-native'\nimport { Text } from 'react-native-paper'\nimport { Feather } from '@expo/vector-icons'\nimport { Asset } from '../../services/types'\nimport { fileToIcon } from '../../services/file-icon-service'\n// import { RNFetchBlob } from 'rn-fetch-blob'\n\nexport const GridItemFilePreview = ({\n  item,\n  onPress\n}: {\n  item: Asset\n  onPress: any\n}): JSX.Element => {\n  const fileExtension = item.fileName.split('.').pop()\n  const fileIcon = !item.isFolder ? fileToIcon(fileExtension) : 'folder'\n\n  const onPressPreview = (): void => {\n    onPress(item)\n  }\n\n  return (\n    <TouchableOpacity onPress={onPressPreview}>\n      <Feather name={fileIcon as any} size={100} style={styles.icon} />\n      <Text\n        style={styles.fileName}\n        onPress={() => {\n          onPress(item)\n        }}\n      >\n        {item.fileName}\n      </Text>\n    </TouchableOpacity>\n  )\n}\n\nconst styles = StyleSheet.create({\n  icon: {\n    marginTop: 20\n  },\n  wrapper: {},\n  fileName: {\n    bottom: 0,\n    textAlign: 'center'\n  },\n  errorIcon: {\n    color: 'red'\n  }\n})\n","import React from 'react'\nimport { StyleSheet, View } from 'react-native'\nimport { Asset } from '../../services/types'\nimport { S3Client } from '@aws-sdk/client-s3'\nimport { ApplicationState } from '../../contexts/application/ApplicationContext'\nimport { GridItemImagePreview } from './ImagePreview'\nimport { GridItemFilePreview } from './FilePreview'\n// import { RNFetchBlob } from 'rn-fetch-blob'\n\nexport const GridItemPreview = ({\n  item,\n  onPress,\n  s3client,\n  s3Initialized,\n  appState\n}: {\n  item: Asset\n  onPress: any\n  s3client: S3Client\n  s3Initialized: boolean\n  appState: ApplicationState\n}): JSX.Element => {\n  const fileExtension = item.fileName.split('.').pop()\n\n  return (\n    <View style={styles.item}>\n      {(() => {\n        switch (fileExtension) {\n          case 'png':\n          case 'jpeg':\n          case 'jpg':\n            return (\n              <GridItemImagePreview\n                item={item}\n                onPress={onPress}\n                s3client={s3client}\n                s3Initialized={s3Initialized}\n                appState={appState}\n              />\n            )\n          default:\n            return <GridItemFilePreview item={item} onPress={onPress} />\n        }\n      })()}\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  item: {\n    marginVertical: 8,\n    marginHorizontal: 16,\n    height: 200,\n    display: 'flex',\n    flex: 1,\n    overflow: 'hidden',\n    textAlign: 'center'\n  }\n})\n","import React, { useContext, useEffect, useMemo, useState } from 'react'\nimport {\n  createColumnHelper,\n  getCoreRowModel,\n  getPaginationRowModel,\n  useReactTable\n} from '@tanstack/react-table'\nimport { ActivityIndicator } from 'react-native-paper'\nimport { FlatList, ScrollView, StyleSheet, View } from 'react-native'\n\nimport { Asset } from '../../services/types'\nimport { GridItemPreview } from '../GridItemPreview'\nimport {\n  ApplicationContext,\n  ApplicationContextType\n} from '../../contexts/application/ApplicationContext'\nimport { useS3Client } from '../../hooks/useS3Client'\nimport { useScreenSize } from '../../services/rn-responsive-design/useScreenSize'\n\nconst styles = StyleSheet.create({\n  cell: {\n    flexBasis: 'auto',\n    minWidth: '105px',\n    paddingRight: '15px'\n  },\n  cellFirstChild: {\n    flexBasis: '78%'\n  },\n  title: {\n    display: 'flex',\n    alignItems: 'center'\n  },\n  columnWrapperStyle: {\n    display: 'flex'\n  }\n})\n\nexport interface DataTableProps {\n  assets: Asset[] | undefined\n  onPress: (asset: Asset) => void\n  isLoading: boolean\n}\n\nexport const DataGrid: (props: DataTableProps) => JSX.Element = ({\n  assets,\n  onPress,\n  isLoading\n}: DataTableProps) => {\n  const [appState] = useContext<ApplicationContextType>(ApplicationContext)\n  const [s3client, s3Initialized] = useS3Client(appState)\n  const [data, setData] = React.useState<Asset[]>(() => assets || [])\n  const [currentPage, setCurrentPage] = useState(1)\n  const [numColumns, setNumColumns] = useState(4)\n  const screenSize = useScreenSize()\n\n  useMemo(() => {\n    ;['xs', 'md'].includes(screenSize) ? setNumColumns(3) : setNumColumns(4)\n  }, [screenSize])\n\n  useEffect(() => {\n    setData(assets || [])\n    setCurrentPage(1)\n  }, [assets])\n  const table = useReactTable({\n    data,\n    columns: DataGridColumns(),\n    getCoreRowModel: getCoreRowModel(),\n    getPaginationRowModel: getPaginationRowModel()\n  })\n\n  const items = table.getRowModel().flatRows.map((item) => item.original)\n\n  useEffect(() => {\n    table.setPageSize(20 * currentPage)\n  }, [currentPage])\n\n  const isCloseToBottom = ({\n    layoutMeasurement,\n    contentOffset,\n    contentSize\n  }): boolean => {\n    const paddingToBottom = 20\n    return (\n      /* eslint-disable */\n      layoutMeasurement.height + contentOffset.y >=\n      contentSize.height - paddingToBottom\n      /* eslint-enable */\n    )\n  }\n\n  return (\n    <>\n      <ScrollView\n        onScroll={({ nativeEvent }) => {\n          if (isCloseToBottom(nativeEvent)) {\n            console.log('[Scroll] Scroll close to bottom')\n            setCurrentPage(currentPage + 1)\n          }\n        }}\n      >\n        {isLoading && <ActivityIndicator animating />}\n\n        <View>\n          <FlatList\n            key={`flatlistassets-${numColumns}`}\n            columnWrapperStyle={styles.columnWrapperStyle}\n            numColumns={numColumns}\n            data={items}\n            renderItem={({ item }: { item: Asset }) => {\n              return (\n                <GridItemPreview\n                  item={item}\n                  onPress={onPress}\n                  s3client={s3client}\n                  s3Initialized={s3Initialized}\n                  appState={appState}\n                />\n              )\n            }}\n            keyExtractor={(item: Asset) => item.fileName}\n          ></FlatList>\n          <></>\n        </View>\n      </ScrollView>\n    </>\n  )\n}\n\nexport const DataGridColumns: any = () => {\n  const columnHelper = createColumnHelper<Asset>()\n  const columns: any = [\n    columnHelper.accessor('fileName', {\n      id: 'fileName',\n      header: 'Name',\n      cell: (info) => <></>\n    })\n  ]\n  return columns\n}\n","import React from 'react'\nimport { Text, Dialog, Button, Portal } from 'react-native-paper'\nimport { StyleSheet } from 'react-native'\n\n/* eslint-disable */\nconst styles = StyleSheet.create({\n  dialog: {\n    width: 250,\n    left: '39%',\n  },\n})\n\nexport const Dialog_ = ({ showOverwite, onOverwrite, onSkip }): JSX.Element => {\n  return (\n    <>\n      <Portal>\n        <Dialog\n          visible={showOverwite}\n          style={styles.dialog}\n          dismissable={false}\n        >\n          <Dialog.Title>Alert</Dialog.Title>\n          <Dialog.Content>\n            <Text>\n              <>File already exists, do you want to overwrite</>\n            </Text>\n          </Dialog.Content>\n          <Dialog.Actions>\n            <Button\n              onPress={() => {\n                onSkip()\n              }}\n            >\n              Skip\n            </Button>\n            <Button\n              onPress={() => {\n                onOverwrite()\n              }}\n            >\n              Yes\n            </Button>\n          </Dialog.Actions>\n        </Dialog>\n      </Portal>\n    </>\n  )\n}\n","import { StyleSheet, View } from 'react-native'\nimport * as React from 'react'\nimport { checkFileExists, uploadFileS3 } from '../../services/s3'\nimport { S3Client } from '@aws-sdk/client-s3'\nimport { Dialog_ } from './Dialog'\nimport { Text } from 'react-native-paper'\n\nconst styles = StyleSheet.create({\n  wrapper: {\n    display: 'flex'\n  }\n})\n\nexport interface Props {\n  file: File\n  s3client: S3Client\n  prefix: string\n  s3credentials: any\n  onSuccess: () => void\n  onError: () => void\n}\n\nexport const FileUploadProgress = ({\n  file,\n  s3client,\n  prefix,\n  s3credentials,\n  onSuccess,\n  onError\n}: Props): JSX.Element => {\n  const [uploadProgress, setUploadProgress] = React.useState(0)\n\n  const [showOverwite, setShowOverwrite] = React.useState(false)\n\n  const onUpload = (file: File): void => {\n    uploadFileS3(\n      s3client,\n      prefix + file.name,\n      s3credentials.bucket,\n      (progress) => {\n        setUploadProgress(progress)\n      },\n      file\n    )\n      .then(() => {\n        onSuccess()\n      })\n      .catch(() => {\n        onError()\n      })\n  }\n\n  React.useEffect(() => {\n    const resultFileExists = checkFileExists(\n      s3client,\n      prefix + file.name,\n      s3credentials.bucket\n    )\n    resultFileExists\n      .then((_x) => {\n        setShowOverwrite(true)\n      })\n      .catch(() => {\n        onUpload(file)\n      })\n  }, [])\n  return (\n    <>\n      <View style={styles.wrapper}>\n        <Text>\n          Uploading {file.name} : {uploadProgress}%\n        </Text>\n      </View>\n      <Dialog_\n        onOverwrite={() => {\n          onUpload(file)\n          setShowOverwrite(false)\n        }}\n        onSkip={() => {\n          onSuccess()\n          setShowOverwrite(false)\n        }}\n        showOverwite={showOverwite}\n      />\n    </>\n  )\n}\n","import { S3Client } from '@aws-sdk/client-s3'\n// import { Upload } from '@aws-sdk/lib-storage'\nimport * as _DocumentPicker from 'expo-document-picker'\nimport { IconButton, Text } from 'react-native-paper'\nimport React, { useState } from 'react'\nimport { View, StyleSheet, Platform } from 'react-native'\nimport { ApplicationState } from '../../contexts/application/ApplicationContext'\nimport { FileUploadProgress } from '../FileUploadProgress'\n\n/* eslint-disable */\nconst styles = StyleSheet.create({\n  snackbarcontainer: {\n    left: '-45%',\n    // marginTop: 20\n  },\n  snackbarinner: {\n    // padding: 10,\n    backgroundColor: 'grey',\n    width: 250,\n    height: 50,\n  },\n  snackbartext: {\n    color: 'white',\n  },\n  uploadcontainer: {\n    padding: 10,\n    flexDirection: 'row',\n  },\n  activityindicator: {\n    marginLeft: 5,\n  },\n  dialog: {\n    width: 250,\n    left: '39%',\n  },\n})\n\ntype Props = {\n  appState: ApplicationState\n  s3client: S3Client\n  prefix: string\n  doReload: () => void\n  doCloseModal: () => void\n}\n\nexport const UploadFile = ({\n  appState,\n  s3client,\n  prefix,\n  doReload,\n  doCloseModal,\n}: Props): JSX.Element => {\n  const { s3credentials } = appState\n\n  const [, setIsLoading] = useState(false)\n  const [filesToUpload, setFilesToUpload] = useState<FileList | undefined>(\n    undefined\n  )\n\n  return (\n    <>\n      <Text>Upload location : {prefix}</Text>\n\n      <View style={styles.uploadcontainer}>\n        {filesToUpload &&\n          Array.from(filesToUpload).map((file) => (\n            <FileUploadProgress\n              prefix={prefix}\n              file={file}\n              s3credentials={s3credentials}\n              s3client={s3client}\n              onSuccess={() => {\n                doReload()\n                doCloseModal()\n              }}\n              onError={() => {}}\n            />\n          ))}\n        <IconButton\n          icon=\"cloud-upload\"\n          onPress={async () => {\n            const selectFile = await _DocumentPicker.getDocumentAsync({\n              multiple: true,\n            })\n            setIsLoading(true)\n            let toUpload: FileList = selectFile?.output\n            setFilesToUpload(toUpload)\n            if (Platform.OS === 'ios') {\n              const resp = await fetch(selectFile.uri)\n              const blob = await resp.blob()\n              toUpload = [blob]\n              /*StreamingUploader(\n                  s3client,\n                  s3credentials.bucket,\n                  selectFile.name,\n                  blob\n                )*/\n            }\n          }}\n        />\n      </View>\n    </>\n  )\n}\n\n// export const StreamingUploader = async (\n//     s3Client: S3Client,\n//     Bucket: string,\n//     Key: string,\n//     Body: any\n// ) => {\n//     try {\n//         const parallelUploads3 = new Upload({\n//             client: s3Client,\n//             params: { Bucket, Key, Body },\n\n//             tags: [\n//                 /*...*/\n//             ], // optional tags\n//             queueSize: 4, // optional concurrency configuration\n//             partSize: 1024 * 1024 * 5, // optional size of each part, in bytes, at least 5MB\n//             leavePartsOnError: false, // optional manually handle dropped parts\n//         })\n\n//         parallelUploads3.on('httpUploadProgress', (progress) => {\n//             console.log(progress)\n//         })\n\n//         await parallelUploads3.done()\n//     } catch (e) {\n//         console.log(e)\n//     }\n// }\n","import { S3Client } from '@aws-sdk/client-s3'\nimport React from 'react'\nimport { StyleSheet, View } from 'react-native'\nimport { Button, Text, TextInput } from 'react-native-paper'\nimport { ApplicationState } from '../../contexts/application/ApplicationContext'\nimport { uploadFileS3 } from '../../services/s3'\n\nexport const CreateFolder = ({\n  appState,\n  s3client,\n  prefix,\n  doReload,\n  doCloseModal\n}: {\n  prefix: string\n  s3client: S3Client\n  appState: ApplicationState\n  doReload: () => void\n  doCloseModal: () => void\n}): JSX.Element => {\n  const [folderName, setFolderName] = React.useState('')\n  const createFolder = async (): Promise<void> => {\n    const filename = folderName\n    await uploadFileS3(\n      s3client,\n      prefix + filename + '/',\n      appState.s3credentials.bucket\n    )\n    doReload()\n    doCloseModal()\n  }\n  return (\n    <View>\n      <Text>Create Folder</Text>\n      <TextInput\n        label=\"Name\"\n        value={folderName}\n        onChangeText={(text) => setFolderName(text)}\n      />\n      <Button\n        icon=\"folder\"\n        mode=\"contained\"\n        style={styles.ButtonWrapper}\n        onPress={() => {\n          createFolder().catch((e) => {\n            console.log('[CreateFolder] Exception = ', e)\n          })\n        }}\n      >\n        Save\n      </Button>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  ButtonWrapper: {\n    marginTop: '10px'\n  }\n})\n","\n/* eslint-disable */\nimport { DeleteObjectsCommand, DeleteObjectsCommandInput, ListObjectsV2Command, ListObjectsV2CommandInput, S3Client } from '@aws-sdk/client-s3'\nimport { Asset } from '../services/types'\n\nconst getInfiniteAssets = async (client: S3Client, folder: Asset, params: ListObjectsV2CommandInput): Promise<any[]> => {\n    return new Promise(async (resolve) => {\n        const command = new ListObjectsV2Command({ ...params })\n        const response = await client.send(command)\n        if (response.NextContinuationToken) {\n            const data = await getInfiniteAssets(client, folder, { ...params, ContinuationToken: response.NextContinuationToken })\n            resolve([...response.Contents, ...data])\n        } else {\n            resolve([...response.Contents])\n        }\n    })\n}\n\nexport const deleteMultipleAssets = async (client: S3Client, bucket: string, assets: Asset[]): Promise<any> => {\n    return await new Promise(async (resolve,) => {\n        const folders = assets.filter(asset => asset.isFolder);\n        const files = assets.filter(asset => !asset.isFolder);\n        const params: ListObjectsV2CommandInput = {\n            Bucket: bucket,\n        }\n        const allFolderAssets = await Promise.all(folders.map(async (folder): Promise<any> => {\n            const folderAssets = await getInfiniteAssets(client, folder, { ...params, Prefix: folder.key });\n            return folderAssets;\n        }))\n        const allAssets = [...allFolderAssets.flat(), ...files]\n        const deleteParams: DeleteObjectsCommandInput = {\n            Bucket: bucket,\n            Delete: { Objects: allAssets.map(item => ({ Key: item.Key || item.key })) }\n        }\n        const command = new DeleteObjectsCommand(deleteParams)\n        const response = await client.send(command)\n        resolve(response)\n    })\n}\n","import React, { useContext, useEffect, useState } from 'react'\nimport { StyleSheet, View } from 'react-native'\nimport { Ionicons } from '@expo/vector-icons'\nimport { Text, IconButton, Card, FAB, ToggleButton } from 'react-native-paper'\nimport { Portal, PortalHost } from '@gorhom/portal'\nimport {\n  ApplicationContext,\n  ApplicationContextType\n} from '../../contexts/application/ApplicationContext'\nimport { useGetAssets } from '../../hooks/useGetAssets'\nimport { useS3Client } from '../../hooks/useS3Client'\nimport { DataTable } from '../DataTable'\n\nimport { Asset } from '../../services/types'\nimport { GetAssetArgs } from '../../services/s3/types'\nimport AppModal from '../Modal'\nimport { TextLink } from '../TextLink'\nimport { Preview } from '../Preview'\nimport { DataGrid } from '../DataGrid'\n\nimport { UploadFile } from '../UploadFile'\nimport { CreateFolder } from '../CreateFolder/CreateFolder'\nimport { deleteMultipleAssets } from '../../actions/deleteMultipleAssets'\n\nexport const ListAssets: React.FC = () => {\n  const [selectedAsset, setSelectedAsset] = useState<Asset | undefined>(\n    undefined\n  )\n  const [isExtended, setIsExtended] = React.useState(false)\n  const [uploadModalVisible, setUploadModalVisible] = React.useState(false)\n  const [createFolderModalVisible, setCreateFolderModalVisible] =\n    React.useState(false)\n\n  const [rerun, setRerun] = useState('')\n  const [appState] = useContext<ApplicationContextType>(ApplicationContext)\n  const [s3client, s3Initialized] = useS3Client(appState)\n  const [isTableView, setIsTableView] = React.useState(true)\n  const [dataQuery, setDataQuery] = useState<GetAssetArgs>({\n    Bucket: appState.s3credentials.bucket,\n    Prefix: '',\n    Delimiter: '/'\n  })\n  useEffect(() => {\n    setDataQuery({ ...dataQuery, Bucket: appState.s3credentials.bucket })\n  }, [appState, s3client])\n\n  const { data, isLoading, isError } = useGetAssets(\n    s3client,\n    s3Initialized,\n    dataQuery,\n    rerun,\n    appState.mutatedAt\n  )\n\n  const setPrefix = (prefix: string): void => {\n    setDataQuery({ ...dataQuery, Prefix: prefix })\n  }\n  const onPress = (asset: Asset): void => {\n    if (asset.isFolder) {\n      setPrefix(asset.prefix)\n    } else {\n      setSelectedAsset(asset)\n    }\n  }\n\n  const goBack: () => void = () => {\n    const prefix = dataQuery.Prefix\n    if (prefix !== '') {\n      const newPrefix = prefix.substring(\n        0,\n        prefix.substring(0, prefix.length - 1).lastIndexOf('/') + 1\n      )\n      setPrefix(newPrefix)\n    }\n  }\n\n  const goToPrefixByIndex = (index: number): void => {\n    const dirPathArray = dataQuery.Prefix?.split('/')\n    const newPrefix = `${dirPathArray.slice(0, index).join('/')}/`\n    setPrefix(newPrefix === '/' ? '' : newPrefix)\n  }\n\n  const dirPathArray = ['bucket', ...dataQuery.Prefix?.split('/')]\n  const dirPath = dirPathArray.map((item, index) => {\n    const isLastFragment = index === dirPathArray?.length - 1\n    return (\n      <TextLink\n        key={`dirPath${index}`}\n        isUnderlined={!isLastFragment}\n        onPress={() => {\n          goToPrefixByIndex(index)\n        }}\n      >\n        /\n        {!isLastFragment && (\n          <Ionicons name=\"folder-open-outline\" color=\"#ffbd43\" size={22} />\n        )}\n        {item}\n      </TextLink>\n    )\n  })\n\n  const doReload = (): void => {\n    setRerun(`${Math.random()}`)\n  }\n\n  /* eslint-disable */\n  return (\n    <>\n      {s3Initialized ? (\n        <>\n          <Portal hostName=\"Reloader\">\n            <IconButton\n              animated\n              icon=\"reload\"\n              onPress={() => {\n                doReload()\n              }}\n            />\n          </Portal>\n          <Portal hostName=\"Back\">\n            {dataQuery.Prefix?.length > 0 && (\n              <IconButton\n                icon=\"arrow-left\"\n                onPress={() => {\n                  goBack()\n                }}\n              />\n            )}\n          </Portal>\n          <View style={styles.root}>\n            <View style={styles.section1}>\n              {isError && <Text variant=\"headlineSmall\">Error </Text>}\n              <View style={styles.actionBarContainer}>\n                <Text variant=\"bodyMedium\" style={styles.path}>\n                  {dirPath}\n                </Text>\n                <View style={styles.buttonGroup}>\n                  <PortalHost name=\"listassetsheader\" />\n                  <ToggleButton\n                    icon=\"dots-grid\"\n                    value=\"grid\"\n                    status={isTableView === false ? 'checked' : 'unchecked'}\n                    onPress={() => setIsTableView(false)}\n                  />\n                  <ToggleButton\n                    icon=\"table\"\n                    value=\"table\"\n                    status={isTableView === true ? 'checked' : 'unchecked'}\n                    onPress={() => setIsTableView(true)}\n                  />\n                </View>\n              </View>\n\n              <AppModal\n                isVisible={uploadModalVisible}\n                onClose={() => {\n                  setUploadModalVisible(false)\n                }}\n              >\n                <UploadFile\n                  appState={appState}\n                  s3client={s3client}\n                  prefix={dataQuery.Prefix}\n                  doReload={doReload}\n                  doCloseModal={() => {\n                    setUploadModalVisible(false)\n                  }}\n                />\n              </AppModal>\n\n              <AppModal\n                isVisible={createFolderModalVisible}\n                onClose={() => {\n                  setCreateFolderModalVisible(false)\n                }}\n              >\n                <CreateFolder\n                  appState={appState}\n                  s3client={s3client}\n                  prefix={dataQuery.Prefix}\n                  doReload={doReload}\n                  doCloseModal={() => {\n                    setCreateFolderModalVisible(false)\n                  }}\n                />\n              </AppModal>\n\n              {isTableView ? (\n                <>\n                  <DataTable\n                    assets={data}\n                    onPress={onPress}\n                    isLoading={isLoading}\n                    deleteAssets={async (assets) => {\n                      await deleteMultipleAssets(s3client, appState.s3credentials.bucket, assets)\n                      doReload()\n                    }\n                    }\n                  />\n                </>\n              ) : (\n                <DataGrid\n                  assets={data}\n                  onPress={onPress}\n                  isLoading={isLoading}\n                />\n              )}\n\n              <FAB.Group\n                backdropColor=\"none\"\n                icon=\"plus\"\n                onStateChange={({ open }) => {\n                  setIsExtended(open)\n                }}\n                open={isExtended}\n                onPress={() => setIsExtended(!isExtended)}\n                visible\n                style={[styles.fabStyle]}\n                actions={[\n                  {\n                    icon: 'plus',\n                    label: 'Upload',\n                    onPress: () => setUploadModalVisible(true),\n                  },\n                  {\n                    icon: 'folder',\n                    label: 'New Folder',\n                    onPress: () => setCreateFolderModalVisible(true),\n                  },\n                ]}\n              />\n            </View>\n            {selectedAsset && (\n              <Preview\n                prefix={dataQuery.Prefix}\n                onClose={() => setSelectedAsset(undefined)}\n                asset={selectedAsset}\n              />\n            )}\n          </View>\n        </>\n      ) : (\n        <Card style={styles.errorMessage}>\n          <Text>\n            S3 Client has not been initialized, please update your API\n            Configuration first.\n          </Text>\n        </Card>\n      )}\n    </>\n    /* eslint-enable */\n  )\n}\n\nconst styles = StyleSheet.create({\n  path: {\n    display: 'flex',\n    margin: 10,\n    flex: 1\n  },\n  fabStyle: {\n    bottom: 45,\n    right: 25,\n    position: 'absolute'\n  },\n  errorMessage: {\n    margin: 12,\n    padding: 10\n  },\n  root: {\n    flexDirection: 'row',\n    display: 'flex',\n    flex: 1,\n    flexGrow: 1\n  },\n  section1: {\n    flex: 3,\n    borderColor: 'gray',\n    borderRightWidth: 2,\n    flexDirection: 'column'\n  },\n  buttonGroup: {\n    display: 'flex',\n    flexDirection: 'row'\n  },\n  actionBarContainer: {\n    display: 'flex',\n    flexDirection: 'row'\n  }\n})\n","import { S3Client } from '@aws-sdk/client-s3'\nimport { useQuery, UseQueryResult } from '@tanstack/react-query'\nimport { S3TypeToInternalAdapter } from '../adapters/s3'\nimport { getAssets } from '../services/s3'\nimport { GetAssetArgs } from '../services/s3/types'\nimport { Asset } from '../services/types'\n\nexport const useGetAssets = (\n  client: S3Client,\n  clientInitialized: boolean,\n  params: GetAssetArgs,\n  rerun: string = '',\n  mutatedAt: Date | undefined\n): UseQueryResult<Asset[], unknown> => {\n  const queryResponse = useQuery(\n    [\n      'getAssets',\n      rerun,\n      params.Bucket || '',\n      params.Delimiter || '',\n      params.Prefix || '',\n      mutatedAt || ''\n    ],\n    async () => {\n      try {\n        const data = await getAssets(client, params)\n        const assets = S3TypeToInternalAdapter(data, params)\n        return assets\n      } catch (error) {\n        console.log('[useGetAssets] Error : ', error)\n      }\n      return []\n    },\n    {\n      enabled: clientInitialized,\n      refetchOnWindowFocus: false\n    }\n  )\n  return queryResponse\n}\n","import React from 'react'\r\nimport { ListAssets } from '../../components/ListAssets'\r\n\r\nexport default function Dashboard (): JSX.Element {\r\n  return (\r\n    <ListAssets />\r\n  )\r\n}\r\n","import React from 'react'\nimport { Appbar } from 'react-native-paper'\nimport { PortalHost } from '@gorhom/portal'\nconst Header = (props: any): JSX.Element => (\n  <Appbar.Header mode=\"center-aligned\" elevated={true}>\n    <PortalHost name=\"Back\" />\n    <Appbar.Content title={props.title} />\n    <PortalHost name=\"Reloader\" />\n  </Appbar.Header>\n)\n\nexport default Header\n","import * as React from 'react'\nimport { Platform } from 'react-native'\nimport { BottomNavigation } from 'react-native-paper'\nimport { ApiConfiguration } from '../ApiConfiguration/index'\nimport Dashboard from '../../pages/dashboard'\nimport Header from '../Header'\n\nconst MobileNavigation: React.FC = () => {\n  const [index, setIndex] = React.useState(0)\n  const [routes] = React.useState([\n    { key: 'assets', title: 'Assets', focusedIcon: 'folder' },\n    {\n      key: 'api_configuration',\n      title: 'API Configuration',\n      focusedIcon: 'cogs'\n    }\n  ])\n\n  const renderScene = BottomNavigation.SceneMap({\n    assets: Dashboard,\n    api_configuration: ApiConfiguration\n  })\n\n  if (Platform.OS === 'web') {\n    return null\n  }\n\n  return (\n    <>\n      <Header title=\"BYOS\" />\n      <BottomNavigation\n        navigationState={{ index, routes }}\n        onIndexChange={setIndex}\n        renderScene={renderScene}\n      />\n    </>\n  )\n}\n\nexport default MobileNavigation\n","import AsyncStorage from '@react-native-async-storage/async-storage'\nexport const ApplicationStorageKey = 'byos/application'\nexport const DomainStorageKey = 'byos/domain'\n\nconst storeData: (value: any) => Promise<void> = async (value: any) => {\n  try {\n    await AsyncStorage.setItem(ApplicationStorageKey, JSON.stringify(value))\n  } catch (e) {\n    // saving error\n  }\n}\n\nconst getData: () => Promise<string> = async () => {\n  try {\n    const value = await AsyncStorage.getItem(ApplicationStorageKey)\n    if (value !== null) {\n      // value previously stored\n      return value\n    }\n  } catch (e) {\n    // error reading value\n  }\n  return ''\n}\n\nconst parseJson: (jsonString: string) => any = (jsonString: string) => {\n  try {\n    return JSON.parse(jsonString)\n  } catch (error) {\n    return {}\n  }\n}\n\nexport const getApplicationStateLS: (defaultValue: string) => Promise<any> = async (defaultValue: string = '{}') => {\n  const value = await getData()\n  if (value) {\n    return parseJson(value)\n  }\n  return parseJson(defaultValue)\n}\n\n// eslint-disable-next-line @typescript-eslint/no-misused-promises\nexport const setApplicationStateLS: (value: Object) => void = async (value: any) => {\n  await storeData(value)\n  return null\n}\n","import React from 'react'\r\n// import { useLinkClickHandler } from 'react-router-dom'\r\nimport { SaveCredentialsForm } from '../../components/SaveCredentialsForm'\r\n// import { useNavigate } from 'react-router-dom'\r\n\r\nexport default function Credentials (): JSX.Element {\r\n  // const [isOpen, setIsOpen] = useState(false)\r\n  // const navigate = useNavigate()\r\n  // const onClick = useLinkClickHandler('/credentials')\r\n  // useEffect(() => {\r\n  //     setIsOpen(true)\r\n  // }, [onClick, setIsOpen])\r\n\r\n  // const handleClose = () => {\r\n  //     setIsOpen(false)\r\n  //     navigate('/')\r\n  // }\r\n\r\n  return (\r\n    <>\r\n      <SaveCredentialsForm />\r\n    </>\r\n  )\r\n}\r\n","import { MD3LightTheme as DefaultTheme, MD3Theme } from 'react-native-paper'\n\nexport const theme: MD3Theme = {\n  ...DefaultTheme,\n  roundness: 2,\n  version: 3,\n  colors: {\n    ...DefaultTheme.colors\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === \"localhost\" ||\n      // [::1] is the IPv6 localhost address.\n      window.location.hostname === \"[::1]\" ||\n      // 127.0.0.0/8 are considered localhost for IPv4.\n      window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n      )\n  );\n  \n  export function register(config) {\n    const isEnvProduction = process.env.NODE_ENV === \"production\";\n    if (isEnvProduction && \"serviceWorker\" in navigator) {\n      // The URL constructor is available in all browsers that support SW.\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n      if (publicUrl.origin !== window.location.origin) {\n        // Our service worker won't work if PUBLIC_URL is on a different origin\n        // from what our page is served on. This might happen if a CDN is used to\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n        return;\n      }\n  \n      window.addEventListener(\"load\", () => {\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n  \n        if (isLocalhost) {\n          // This is running on localhost. Let's check if a service worker still exists or not.\n          checkValidServiceWorker(swUrl, config);\n  \n          // Add some additional logging to localhost, pointing developers to the\n          // service worker/PWA documentation.\n          navigator.serviceWorker.ready.then(() => {\n            console.log(\n              \"This web app is being served cache-first by a service \" +\n                \"worker. To learn more, visit https://cra.link/PWA\"\n            );\n          });\n        } else {\n          // Is not localhost. Just register service worker\n          registerValidSW(swUrl, config);\n        }\n      });\n    }\n  }\n  \n  function registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n      .register(swUrl)\n      .then((registration) => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          if (installingWorker == null) {\n            return;\n          }\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === \"installed\") {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the updated precached content has been fetched,\n                // but the previous service worker will still serve the older\n                // content until all client tabs are closed.\n                console.log(\n                  \"New content is available and will be used when all \" +\n                    \"tabs for this page are closed. See https://cra.link/PWA.\"\n                );\n  \n                // Execute callback\n                if (config && config.onUpdate) {\n                  config.onUpdate(registration);\n                }\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log(\"Content is cached for offline use.\");\n  \n                // Execute callback\n                if (config && config.onSuccess) {\n                  config.onSuccess(registration);\n                }\n              }\n            }\n          };\n        };\n      })\n      .catch((error) => {\n        console.error(\"Error during service worker registration:\", error);\n      });\n  }\n  \n  function checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n      headers: { \"Service-Worker\": \"script\" },\n    })\n      .then((response) => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        const contentType = response.headers.get(\"content-type\");\n        if (\n          response.status === 404 ||\n          (contentType != null && contentType.indexOf(\"javascript\") === -1)\n        ) {\n          // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then((registration) => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          // Service worker found. Proceed as normal.\n          registerValidSW(swUrl, config);\n        }\n      })\n      .catch(() => {\n        console.log(\n          \"No internet connection found. App is running in offline mode.\"\n        );\n      });\n  }\n  \n  export function unregister() {\n    if (\"serviceWorker\" in navigator) {\n      navigator.serviceWorker.ready\n        .then((registration) => {\n          registration.unregister();\n        })\n        .catch((error) => {\n          console.error(error.message);\n        });\n    }\n  }\n  ","import React, { useContext, useEffect, useState } from 'react'\r\nimport { Platform, View, StyleSheet } from 'react-native'\r\nimport { NavigationContainer } from '@react-navigation/native'\r\nimport { createNativeStackNavigator } from '@react-navigation/native-stack'\r\nimport { Provider as PaperProvider, Text, IconButton } from 'react-native-paper'\r\nimport { PortalHost, PortalProvider } from '@gorhom/portal'\r\n\r\nimport {\r\n  ApplicationContext,\r\n  initialData\r\n} from './contexts/application/ApplicationContext'\r\nimport MobileView from './components/MobileView'\r\nimport { setApplicationStateLS } from './services/localstorage'\r\nimport { useGetApplicationStateFromLs } from './hooks/useGetApplicationStateFromLS'\r\nimport Dashboard from './pages/dashboard'\r\nimport Credentials from './pages/credentials'\r\nimport { theme } from './theme'\r\nimport { ThemeContextInternal } from './contexts/theme/ThemeContextInternal'\r\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration'\r\nconst Stack = createNativeStackNavigator()\r\n/**\r\n *\r\n */\r\nconst styles = StyleSheet.create({\r\n  ButtonsWrapper: {\r\n    flexDirection: 'row'\r\n  },\r\n  Button: {\r\n    border: '1px',\r\n    borderStyle: 'solid'\r\n  }\r\n})\r\n\r\nfunction App (): JSX.Element {\r\n  const themeState = useState(theme)\r\n  const { data: savedApplicationData, isLoaded } =\r\n    useGetApplicationStateFromLs(initialData)\r\n\r\n  const applicationState = useState(savedApplicationData)\r\n  const [applicationStateData, setApplicationStateData] = applicationState\r\n\r\n  useEffect(() => {\r\n    setApplicationStateData(savedApplicationData)\r\n  }, [savedApplicationData])\r\n\r\n  useEffect(() => {\r\n    if (isLoaded) {\r\n      setApplicationStateLS({ ...applicationStateData })\r\n    }\r\n  }, [applicationStateData, isLoaded])\r\n\r\n  const navigationButtons = ({ navigation }): any => ({\r\n    headerTitle: (props) => <Text>BYOS</Text>,\r\n    // Add a placeholder button without the `onPress` to avoid flicker\r\n    headerRight: () => (\r\n      <View style={styles.ButtonsWrapper}>\r\n        <PortalHost name=\"Reloader\" />\r\n        <IconButton\r\n          style={styles.Button}\r\n          icon=\"home\"\r\n          onPress={() => navigation.navigate('Home')}\r\n        />\r\n        <IconButton\r\n          style={styles.Button}\r\n          icon=\"cogs\"\r\n          onPress={() => navigation.navigate('Credentials')}\r\n        />\r\n      </View>\r\n    )\r\n  })\r\n\r\n  return (\r\n    <ThemeContextInternal.Provider value={themeState}>\r\n      <ThemeProvider>\r\n        <PortalProvider>\r\n          <ApplicationContext.Provider value={applicationState}>\r\n            {Platform.OS === 'web' && (\r\n              <NavigationContainer>\r\n                <Stack.Navigator>\r\n                  <Stack.Screen\r\n                    name=\"Home\"\r\n                    component={Dashboard}\r\n                    options={navigationButtons}\r\n                  />\r\n                  <Stack.Screen\r\n                    name=\"Credentials\"\r\n                    component={Credentials}\r\n                    options={navigationButtons}\r\n                  />\r\n                </Stack.Navigator>\r\n              </NavigationContainer>\r\n            )}\r\n            <MobileView />\r\n          </ApplicationContext.Provider>\r\n        </PortalProvider>\r\n      </ThemeProvider>\r\n    </ThemeContextInternal.Provider>\r\n  )\r\n}\r\n\r\nconst ThemeProvider = ({ children }: React.PropsWithChildren): JSX.Element => {\r\n  const [theme] = useContext(ThemeContextInternal)\r\n  return <PaperProvider theme={theme}>{children}</PaperProvider>\r\n}\r\n\r\nexport default App\r\n\r\nserviceWorkerRegistration.register()\r\n","import { useMemo, useState } from 'react'\nimport { ApplicationState } from '../contexts/application/ApplicationContext'\nimport { getApplicationStateLS } from '../services/localstorage'\n\ninterface ApplicationStateHookReturn {\n  data: ApplicationState | undefined\n  isLoaded: boolean\n}\n\nexport const useGetApplicationStateFromLs = (initialData: ApplicationState | undefined): ApplicationStateHookReturn => {\n  const [d, setD] = useState<ApplicationState | undefined>(initialData)\n  const [isLoaded, setIsLoaded] = useState(false)\n  useMemo(() => {\n    getApplicationStateLS(\n      JSON.stringify(initialData)\n    ).then(data => {\n      setD(data)\n      setIsLoaded(true)\n    })\n      .catch(() => {\n        console.log('[useGetApplicationStateFromLs] Promise failure getApplicationStateLS')\n      })\n  }, [initialData])\n\n  return { data: d, isLoaded }\n}\n","import { createContext } from 'react'\r\n\r\nexport const RoutingContext = createContext(Object.create(null))\r\n","import React from 'react'\r\nimport Home from '../pages/home'\r\nimport Credentials from '../pages/credentials'\r\n\r\nexport interface InternalRouteDef {\r\n  path: string\r\n  component: JSX.Element\r\n  showInNavigation: boolean\r\n\r\n}\r\n\r\nexport interface RoutingObjectDef {\r\n  isReady: boolean\r\n  routes: InternalRouteDef\r\n}\r\n\r\nconst routes: InternalRouteDef[] = [\r\n  { path: '/credentials', component: <Credentials />, showInNavigation: true },\r\n  { path: '/', component: <Home />, showInNavigation: true }\r\n]\r\n\r\nconst internalRoutes = {\r\n  isReady: false,\r\n  routes\r\n}\r\n\r\nexport default internalRoutes\n","import React from 'react'\n\nexport default function Home (): JSX.Element {\n  return (\n    <>\n    </>\n  )\n}\n","import React, { useEffect } from 'react'\r\nimport { RoutingContext } from '../contexts/routing/RoutingContext'\r\n\r\nexport const BasicProvider: (children: any) => JSX.Element = ({ children }: React.PropsWithChildren) => {\r\n  const [routingState, setRoutingState] = React.useContext(RoutingContext)\r\n  useEffect(() => {\r\n    if (routingState.isReady === false) {\r\n      setRoutingState({ ...routingState, isReady: true })\r\n    }\r\n    // eslint-disable-next-line\r\n  }, [routingState.isReady, routingState.routes])\r\n  return <>\r\n    {children}\r\n  </>\r\n}\r\n","import React from 'react'\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query'\n\nconst queryClient = new QueryClient()\n\nexport default function QueryProvider ({ children }: React.PropsWithChildren): JSX.Element {\n  return (\n    <QueryClientProvider client={queryClient}>\n      {children}\n    </QueryClientProvider>\n  )\n}\n","import React, { useState } from 'react'\r\nimport { RoutingContext } from '../contexts/routing/RoutingContext'\r\nimport routes from '../routes'\r\nimport { BasicProvider } from './BasicProvider'\r\nimport QueryProvider from './QueryProvider'\r\n\r\nexport const Provider = ({ children }: React.PropsWithChildren): JSX.Element => {\r\n  const routingState = useState(routes)\r\n\r\n  /**\r\n       if (useAzureLogin) {\r\n          return <QueryProvider>\r\n              <RoutingContext.Provider value={routingState}>\r\n                  <AzureAdProvider >\r\n                      {children}\r\n                  </AzureAdProvider>\r\n              </RoutingContext.Provider>\r\n          </QueryProvider>\r\n      }else\r\n      { */\r\n  return (\r\n        <QueryProvider>\r\n            <RoutingContext.Provider value={routingState}>\r\n                <BasicProvider>\r\n                    {children}\r\n                </BasicProvider>\r\n            </RoutingContext.Provider>\r\n        </QueryProvider>)\r\n}\r\n","import React from 'react'\nimport BAap from './App'\nimport { Provider } from './providers/Provider'\n\nconst ExportApp: React.FC = () => {\n  return (\n    <Provider>\n      <BAap />\n    </Provider>\n  )\n}\n\nexport default ExportApp\n","import { StatusBar } from 'expo-status-bar';\nimport { StyleSheet, Text, View } from 'react-native';\nimport BYOSApp from \"./src/ExportApp\";\nimport { registerRootComponent } from 'expo';\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\nexport default function App() {\n  return (\n      <BYOSApp/>\n  );\n}\nregisterRootComponent(App);\n\n\n\n","import { registerRootComponent } from 'expo'\n\nimport App from './App'\n\n// registerRootComponent calls AppRegistry.registerComponent('main', () => App);\n// It also ensures that whether you load the app in Expo Go or in a native build,\n// the environment is set up appropriately\nregisterRootComponent(App)\n"],"sourceRoot":""}