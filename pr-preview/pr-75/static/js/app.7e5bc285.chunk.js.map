{"version":3,"sources":["src/contexts/application/ApplicationContext.ts","src/services/s3/index.ts","src/components/Input/InputField.tsx","src/services/backblaze/backblaze.ts","src/components/SaveCredentialsForm/index.tsx","src/components/ApiConfiguration/index.tsx","src/adapters/s3.ts","src/hooks/useS3Client.ts","src/components/ContextMenu/index.tsx","src/services/file-icon-service/index.ts","src/components/DataTable/dataTableColumns.tsx","src/components/DataTable/index.tsx","src/components/Modal/index.tsx","src/components/TextLink.tsx","src/services/rn-responsive-design/components/Block.tsx","src/contexts/theme/ThemeContextInternal.ts","src/components/Preview/index.tsx","src/components/GridItemPreview/ImagePreview.tsx","src/components/GridItemPreview/FilePreview.tsx","src/components/GridItemPreview/index.tsx","src/components/DataGrid/index.tsx","src/components/ListAssets/index.tsx","src/hooks/useGetAssets.ts","src/pages/dashboard/index.tsx","src/components/Header/index.tsx","src/components/MobileView/index.tsx","src/services/localstorage/index.ts","src/pages/credentials/index.tsx","src/theme/index.ts","src/App.tsx","src/hooks/useGetApplicationStateFromLS.ts","src/contexts/routing/RoutingContext.ts","src/routes/index.tsx","src/pages/home/index.tsx","src/providers/BasicProvider.tsx","src/providers/QueryProvider.tsx","src/providers/Provider.tsx","src/ExportApp.tsx","App.js","index.js"],"names":["initialData","s3credentials","apiKey","undefined","apiSecret","region","endpoint","bucket","backblaze","authorizationToken","downloadUrl","s3ApiUrl","s3client","otherStuff","mutatedAt","ApplicationContext","createContext","Object","create","buildS3Client","initializationData","credentials","client","S3Client","middlewareStack","add","next","context","args","step","name","getAssets","params","command","ListObjectsCommand","response","send","folders","CommonPrefixes","map","item","prefix","Prefix","etag","lastModified","size","key","files","Contents","ETag","Key","LastModified","Size","updateAsset","data","CopyObjectCommand","console","log","err","deleteAsset","DeleteObjectCommand","getAsset","GetObjectCommand","config","request","headers","path","hostname","protocol","fetch","Bucket","then","Promise","_resolve","reject","Error","error","styles","StyleSheet","textInput","marginTop","InputField","control","label","render","field","value","onChange","onBlur","TextInput","onChangeText","text","style","axios","method","url","getBaseUrl","Accept","Authorization","SaveCredentialsForm","useContext","appState","setAppState","useForm","defaultValues","handleSubmit","getValues","reset","useEffect","useState","setSaved","onSubmit","onToggleSnackBar","toLowerCase","includes","setTimeout","s3Client","accessKeyId","secretAccessKey","catch","React","visible","setVisible","container","flex","inner","padding","justifyContent","header","fontSize","marginBottom","height","borderColor","borderBottomWidth","snackBarContainer","KeyboardAvoidingView","behavior","Platform","OS","Card","Content","Text","variant","Actions","Button","onPress","View","Snackbar","onDismiss","action","ApiConfiguration","S3TypeToInternalAdapter","assets","asset","fileName","replace","assetId","fileSize","updatedAt","isFolder","length","useS3Client","useMemo","ContextMenu","fileToIcon","fileExt","dayjs","extend","relativeTime","icon","filename","iconType","internalType","exec","fileExtension","split","pop","Feather","color","DataGridColumns","columnHelper","createColumnHelper","accessor","id","cell","info","row","original","getValue","slice","prettyBytes","fromNow","display","filter","flexBasis","paddingRight","cellFirstChild","title","alignItems","DataTable","isLoading","setData","currentPage","setCurrentPage","table","useReactTable","columns","getCoreRowModel","getPaginationRowModel","setPageSize","Header","getHeaderGroups","headerGroup","index","Title","isPlaceholder","flexRender","column","columnDef","getContext","ScrollView","onScroll","layoutMeasurement","contentOffset","contentSize","y","isCloseToBottom","nativeEvent","ActivityIndicator","animating","getRowModel","rows","Row","getVisibleCells","Cell","Pagination","page","getState","pagination","pageIndex","numberOfPages","getPageCount","onPageChange","setPageIndex","centeredView","modalView","margin","width","backgroundColor","borderRadius","shadowColor","shadowOffset","shadowOpacity","shadowRadius","elevation","button","buttonOpen","buttonClose","textStyle","fontWeight","textAlign","modalText","AppModal","isVisible","onClose","children","Modal","animationType","transparent","onRequestClose","Alert","alert","Pressable","TextLink","isUnderlined","underline","textDecorationLine","getScreenType","px","window","Dimensions","get","screen","screenType","Block","hidden","dimensions","setDimensions","subscription","addEventListener","remove","hideContent","ThemeContextInternal","marginVertical","Preview","theme","isEditing","setIsEditing","setUpdateAsset","setText","handleSave","s3UpdateAsset","CopySource","Date","handleDelete","deleteParams","main","IconButton","closeButton","section2","centered","textCenter","horizontal","flexGrow","flexDirection","minWidth","imageExtensions","GridItemImagePreview","s3Initialized","d","setD","setError","loaded","setLoaded","setShowPreview","isImage","fileIcon","loadImage","stream","Body","Response","blob","blobIn","fileReaderInstance","FileReader","readAsDataURL","onload","base64","result","TouchableOpacity","Image","source","uri","toString","preview","errorIcon","wrapper","bottom","GridItemFilePreview","GridItemPreview","marginHorizontal","overflow","columnWrapperStyle","DataGrid","items","flatRows","FlatList","numColumns","renderItem","keyExtractor","ListAssets","selectedAsset","setSelectedAsset","isExtended","setIsExtended","rerun","setRerun","isTableView","setIsTableView","Delimiter","dataQuery","setDataQuery","clientInitialized","queryResponse","useQuery","enabled","refetchOnWindowFocus","useGetAssets","isError","setPrefix","dirPathArray","dirPath","isLastFragment","newPrefix","join","goToPrefixByIndex","Ionicons","hostName","animated","Math","random","substring","lastIndexOf","goBack","root","section1","actionBarContainer","buttonGroup","ToggleButton","status","FAB","fabStyle","errorMessage","right","position","borderRightWidth","Dashboard","props","Appbar","mode","elevated","MobileNavigation","setIndex","focusedIcon","routes","renderScene","BottomNavigation","SceneMap","api_configuration","navigationState","onIndexChange","storeData","AsyncStorage","setItem","JSON","stringify","e","getData","getItem","parseJson","jsonString","parse","getApplicationStateLS","defaultValue","setApplicationStateLS","Credentials","DefaultTheme","roundness","version","colors","Stack","createNativeStackNavigator","ButtonsWrapper","border","borderStyle","ThemeProvider","App","themeState","isLoaded","setIsLoaded","useGetApplicationStateFromLs","savedApplicationData","applicationState","applicationStateData","setApplicationStateData","navigationButtons","navigation","headerTitle","headerRight","navigate","Provider","NavigationContainer","Navigator","Screen","component","options","MobileView","RoutingContext","internalRoutes","isReady","showInNavigation","BasicProvider","routingState","setRoutingState","queryClient","QueryClient","QueryProvider","ExportApp","registerRootComponent"],"mappings":"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","file":"static/js/app.7e5bc285.chunk.js","sourcesContent":["/**\r\n * This context will hold all of our application data like the current\r\n * user's api Keys, currently viewed directory, etc\r\n */\r\n\r\nimport { S3Client } from '@aws-sdk/client-s3'\r\nimport React, { createContext } from 'react'\r\n\r\nexport interface BackblazeB2Config {\r\n  authorizationToken: string | undefined\r\n  downloadUrl: string | undefined\r\n  s3ApiUrl: string | undefined\r\n}\r\n\r\nexport interface ApplicationState {\r\n  s3credentials: {\r\n    apiKey: string | undefined\r\n    apiSecret: string | undefined\r\n    region: string | undefined\r\n    endpoint: string | undefined\r\n    bucket: string | undefined\r\n  }\r\n  backblaze: BackblazeB2Config | undefined\r\n  otherStuff: string | undefined\r\n  s3client: S3Client | undefined\r\n  mutatedAt: Date | undefined\r\n}\r\n\r\nexport const initialData: ApplicationState = {\r\n  s3credentials: {\r\n    apiKey: undefined,\r\n    apiSecret: undefined,\r\n    region: undefined,\r\n    endpoint: undefined,\r\n    bucket: undefined\r\n  },\r\n  backblaze: {\r\n    authorizationToken: '',\r\n    downloadUrl: '',\r\n    s3ApiUrl: ''\r\n  },\r\n  s3client: undefined,\r\n  otherStuff: '',\r\n  mutatedAt: undefined\r\n}\r\n\r\nexport type ApplicationContextType = [\r\n  ApplicationState,\r\n  React.Dispatch<React.SetStateAction<ApplicationState>>\r\n]\r\n\r\nexport const ApplicationContext = createContext<ApplicationContextType>(\r\n  Object.create(null)\r\n)\r\n","import {\r\n  S3Client,\r\n  ListObjectsCommand,\r\n  GetObjectCommand,\r\n  GetObjectCommandInput,\r\n  GetObjectCommandOutput,\r\n  DeleteObjectCommand,\r\n  DeleteObjectCommandInput,\r\n  CopyObjectCommandInput,\r\n  CopyObjectCommand\r\n} from '@aws-sdk/client-s3'\r\nimport { S3Initializer, GetAssetArgs, Asset } from './types'\r\nimport 'react-native-url-polyfill/auto'\r\nimport 'react-native-get-random-values'\r\n// eslint-disable-next-line\r\nimport { v4 as uuidv4 } from 'uuid'\r\n\r\nexport const buildS3Client = (initializationData: S3Initializer): S3Client => {\r\n  const { credentials, region, endpoint } = initializationData\r\n  const client = new S3Client({\r\n    region,\r\n    credentials,\r\n    endpoint\r\n  })\r\n  client.middlewareStack.add(\r\n    (next, context) => async (args) => {\r\n      // args.request.headers[\"Custom-Header\"] = \"value\";\r\n      // eslint-disable-next-line\r\n      // @ts-ignore\r\n      // delete args.request.headers[\"amz-sdk-request\"];\r\n      // delete args.request.headers[\"amz-sdk-invocation-id\"];//x-amz-content-sha256\r\n      // delete args.request.headers[\"x-amz-content-sha256\"];\r\n      // args.request.headers[\"date\"] = (new Date()).toUTCString();\r\n      // delete args.request.headers[\"x-amz-date\"];\r\n      // delete args.request.headers[\"x-amz-user-agent\"];\r\n      const result = await next(args)\r\n      return result\r\n    },\r\n    {\r\n      step: 'finalizeRequest',\r\n      name: 'removeHeaders'\r\n    }\r\n  )\r\n  return client\r\n}\r\n\r\nexport const getAssets: (\r\n  client: S3Client,\r\n  params: GetAssetArgs\r\n) => Promise<Asset[] | undefined> = async (client, params) => {\r\n  const command = new ListObjectsCommand(params)\r\n\r\n  const response = await client.send(command)\r\n  const folders: Asset[] =\r\n    response.CommonPrefixes?.map((item) => {\r\n      return {\r\n        prefix: item.Prefix,\r\n        etag: undefined,\r\n        name: item.Prefix,\r\n        lastModified: undefined,\r\n        size: 0,\r\n        key: item.Prefix\r\n      }\r\n    }) || []\r\n  const files: Asset[] =\r\n    response.Contents?.map((item) => {\r\n      return {\r\n        prefix: '',\r\n        etag: item.ETag,\r\n        name: item?.Key,\r\n        lastModified: item?.LastModified,\r\n        size: item?.Size,\r\n        key: item.Key\r\n      }\r\n    }) || []\r\n  return [...folders, ...files]\r\n}\r\n\r\nexport const updateAsset: (\r\n  client: S3Client,\r\n  params: CopyObjectCommandInput\r\n) => Promise<any> = async (client, params) => {\r\n  try {\r\n    const data = await client.send(new CopyObjectCommand(params))\r\n    console.log('updated asset', data)\r\n    return data // For unit tests.\r\n  } catch (err) {\r\n    console.log('Error', err)\r\n  }\r\n}\r\n\r\nexport const deleteAsset: (\r\n  client: S3Client,\r\n  params: DeleteObjectCommandInput\r\n) => Promise<any> = async (client, params) => {\r\n  try {\r\n    const data = await client.send(new DeleteObjectCommand(params))\r\n    return data // For unit tests.\r\n  } catch (err) {\r\n    console.log('Error', err)\r\n  }\r\n}\r\n\r\nexport const getAsset: (\r\n  client: S3Client,\r\n  params: GetObjectCommandInput\r\n) => Promise<any> = async (client, params) => {\r\n  const command = new GetObjectCommand(params)\r\n\r\n  const response: GetObjectCommandOutput = await client.send(command)\r\n  return response\r\n}\r\n\r\n/* eslint-disable */\r\nexport const getAssetV2: (\r\n  client: S3Client,\r\n  params: GetObjectCommandInput\r\n) => Promise<any> = async (client, params) => {\r\n  const command = new GetObjectCommand(params)\r\n  const endpoint = await client.config.endpoint()\r\n  command.middlewareStack.add(\r\n    (next) => async (args: any) => {\r\n      // @ts-ignore\r\n      const { headers, path } = args.request\r\n      const { hostname, protocol } = endpoint\r\n      fetch(`${protocol}//${hostname}/${params.Bucket}${path}`, {\r\n        headers: headers,\r\n      }).then((response) => {\r\n        console.log('Response = ', response)\r\n      })\r\n\r\n      return new Promise((_resolve, reject) =>\r\n        reject(new Error('Intentional Failure'))\r\n      )\r\n    },\r\n    {\r\n      step: 'finalizeRequest',\r\n      name: 'rH',\r\n    }\r\n  )\r\n  try {\r\n    await client.send(command)\r\n  } catch (error) {}\r\n  /* eslint-enable */\r\n\r\n  /* return new Promise((resolve, reject) => {\r\n    RNFetchBlob.fetch(\"GET\", \"http://www.example.com/images/img1.png\", {\r\n      Authorization: \"Bearer access-token...\",\r\n      // more headers  ..\r\n    })\r\n      .then((res) => {\r\n        let status = res.info().status;\r\n\r\n        if (status == 200) {\r\n          // the conversion is done in native code\r\n          let base64Str = res.base64();\r\n          // the following conversions are done in js, it's SYNC\r\n          let text = res.text();\r\n          let json = res.json();\r\n        } else {\r\n          // handle other status codes\r\n        }\r\n      })\r\n      // Something went wrong:\r\n      .catch((errorMessage, statusCode) => {\r\n        // error handling\r\n      });\r\n  }) */\r\n}\r\n","import { Controller } from 'react-hook-form'\nimport { StyleSheet } from 'react-native'\nimport { TextInput } from 'react-native-paper'\nimport React from 'react'\n\nconst styles = StyleSheet.create({\n  textInput: {\n    // borderColor: \"#000000\",\n    // borderBottomWidth: 1,\n    marginTop: 20\n  }\n})\n\nexport const InputField: (props: any) => JSX.Element = ({ control, name, label }: any) => {\n  if (control === undefined) {\n    return null\n  }\n  /* const {\n          field: { onChange, onBlur, value, ref },\n          fieldState: { invalid, isTouched, isDirty },\n          formState: { touchedFields, dirtyFields }\n      } = useController({\n          name,\n          control,\n          rules: { required: true },\n          defaultValue: \"\",\n      }); */\n\n  return <>\n        <Controller\n            control={control}\n            name={name}\n            render={({ field: { value, onChange, onBlur } }: any) => {\n              return <>\n                    <TextInput\n                        label={label}\n                        value={value}\n                        onChangeText={(text) => {\n                          console.log('[InputChange] name = ', name, ' value = ', text)\n                          onChange(text)\n                        }}\n                        onBlur={onBlur}\n                        style={styles.textInput}\n                    />\n                </>\n            }}\n        />\n    </>\n}\n","import axios from 'axios'\n\nexport const getBaseUrl = (): string => 'https://api.backblazeb2.com/b2api/v2/'\n\nexport const getAuthorizationToken = (key: string, secret: string): string => {\n  return btoa(`${key}:${secret}`)\n}\n\nexport const authorizeAccount = async (\n  authorizationToken: string\n): Promise<string> => {\n  return await axios({\n    method: 'GET',\n    url: `${getBaseUrl()}b2_authorize_account`,\n    headers: {\n      Accept: 'application/json',\n      Authorization: `Basic ${authorizationToken}`\n    }\n  })\n}\n\nexport const isBackblaze = (endpoint: string): boolean => {\n  return endpoint.toLowerCase().includes('backblazeb2')\n}\n","import React, { useContext, useEffect, useState } from 'react'\nimport { useForm } from 'react-hook-form'\nimport { ApplicationContext } from '../../contexts/application/ApplicationContext'\nimport { buildS3Client, getAssets } from '../../services/s3'\nimport { Text, Card, Snackbar } from 'react-native-paper'\nimport { InputField } from '../Input/InputField'\nimport { Button } from '../Button'\nimport { KeyboardAvoidingView, Platform, StyleSheet, View } from 'react-native'\nimport { S3Client } from '@aws-sdk/client-s3'\nimport { isBackblaze } from '../../services/backblaze/backblaze'\n\nexport const SaveCredentialsForm: React.FC = () => {\n  const [appState, setAppState] = useContext(ApplicationContext)\n  const { s3credentials } = appState\n  const { control, handleSubmit, getValues, reset } = useForm({\n    defaultValues: s3credentials\n  })\n\n  useEffect(() => {\n    reset(s3credentials)\n  }, [s3credentials])\n\n  const [, setSaved] = useState(false)\n\n  const onSubmit = async (): void => {\n    console.log('Submitting form')\n    onToggleSnackBar()\n    const data = getValues()\n\n    if (isBackblaze(data?.endpoint)) {\n      // const token = getAuthorizationToken(data.apiKey, data.apiSecret)\n      // const _backblazeData = await authorizeAccount(token)\n      setAppState({\n        ...appState,\n        s3credentials: data as any,\n        s3client: undefined,\n        backblaze: undefined\n      })\n    } else {\n      setAppState({\n        ...appState,\n        s3credentials: data as any,\n        s3client: undefined\n      })\n    }\n    setSaved(true)\n    setTimeout(() => {\n      setSaved(false)\n    }, 1000)\n    /**\n     * Build the s3 client here\n     */\n    const s3Client: S3Client = buildS3Client({\n      credentials: {\n        accessKeyId: data.apiKey,\n        secretAccessKey: data.apiSecret\n      },\n      region: data.region,\n      endpoint: data.endpoint\n    })\n\n    getAssets(s3Client, { Bucket: 'testinghumza' }).catch(() => {\n      console.log('[SaveCredentialsForm] Promise failure getAssets')\n    })\n  }\n\n  // snackbar\n  const [visible, setVisible] = React.useState<boolean>(false)\n  const onToggleSnackBar: () => void = () => setVisible(!visible)\n  const onDismissSnackBar: () => void = () => setVisible(false)\n\n  const styles = StyleSheet.create({\n    container: {\n      flex: 1\n    },\n    inner: {\n      padding: 24,\n      flex: 1,\n      justifyContent: 'space-around'\n    },\n    header: {\n      fontSize: 36,\n      marginBottom: 48\n    },\n    textInput: {\n      height: 40,\n      borderColor: '#000000',\n      borderBottomWidth: 1,\n      marginBottom: 36\n    },\n    snackBarContainer: {\n      flex: 1,\n      justifyContent: 'space-between'\n    }\n  })\n\n  return (\n    <KeyboardAvoidingView\n      behavior={Platform.OS === 'ios' ? 'padding' : 'height'}\n      style={styles.container}\n    >\n      <Card>\n        <Card.Content>\n          <Text variant=\"headlineSmall\">API Configuration</Text>\n          <InputField control={control} name=\"apiKey\" label=\"API KEY\" />\n\n          <InputField control={control} name=\"apiSecret\" label=\"Api Secret\" />\n\n          <InputField control={control} name=\"endpoint\" label=\"Endpoint\" />\n\n          <InputField control={control} name=\"bucket\" label=\"Bucket\" />\n\n          <InputField control={control} name=\"region\" label=\"Region\" />\n        </Card.Content>\n        <Card.Actions>\n          {/* eslint-disable-next-line */}\n          <Button onPress={handleSubmit(onSubmit)}>Submit</Button>\n        </Card.Actions>\n      </Card>\n      <View style={styles.snackBarContainer}>\n        <Snackbar\n          visible={visible}\n          onDismiss={onDismissSnackBar}\n          action={{\n            label: 'Dismiss',\n            onPress: () => {\n              // Do something\n            }\n          }}\n        >\n          Credentials are saved!\n        </Snackbar>\n      </View>\n    </KeyboardAvoidingView>\n  )\n}\n","import { SaveCredentialsForm } from '../SaveCredentialsForm'\nimport React from 'react'\n\nexport const ApiConfiguration: React.FC = () => {\n  /**\n   **\n   Testing online code editor\n   * **/\n  return <SaveCredentialsForm />\n}\n","import { Asset, GetAssetArgs } from '../services/s3/types'\nimport { Asset as AppAssetType } from '../services/types'\nexport const S3TypeToInternalAdapter = (assets: Asset[], params: GetAssetArgs): AppAssetType[] => {\n  return assets.map((asset: Asset) => {\n    const fileName: string = asset.name.replace(params.Prefix, '')\n    const appAsset: AppAssetType = {\n      assetId: asset.etag,\n      fileName,\n      fileSize: asset.size,\n      updatedAt: asset.lastModified,\n      isFolder: asset.prefix?.length > 0,\n      prefix: asset.prefix,\n      etag: asset.etag,\n      key: asset.key\n    }\n    return appAsset\n  })\n}\n","import { S3Client } from '@aws-sdk/client-s3'\nimport { useMemo } from 'react'\nimport { ApplicationState } from '../contexts/application/ApplicationContext'\nimport { buildS3Client } from '../services/s3'\n\nexport const useS3Client: (\n  appState: ApplicationState\n) => [S3Client | undefined, boolean] = (appState: ApplicationState) => {\n  const { s3credentials } = appState\n  const { apiKey, apiSecret, region, endpoint } = s3credentials\n  const [client, isInitialized] = useMemo(() => {\n    if (apiKey && apiSecret && endpoint) {\n      // console.log('[useS3Client] Building S3 Client region = ', region)\n      // console.log('[useS3Client] Building S3 Client apiKey = ', apiKey)\n\n      return [\n        buildS3Client({\n          region,\n          credentials: {\n            accessKeyId: apiKey,\n            secretAccessKey: apiSecret\n          },\n          endpoint\n        }),\n        true\n      ]\n    }\n    return [undefined, false]\n  }, [apiKey, apiSecret, region, endpoint])\n  return [client, isInitialized]\n}\n","import React from 'react'\n\nexport const ContextMenu: React.FC = () => {\n  /*\n  const [anchorEl] = React.useState<null | HTMLElement>(null)\n  const open = Boolean(anchorEl) */\n  /*\n  const _handleClick = (event: React.MouseEvent<HTMLElement>) => {\n    setAnchorEl(event.currentTarget);\n  };\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n  */\n\n  return (\n    <>\n    </>)\n}\n","export const fileToIcon = (fileExt: string): string => {\n  switch (fileExt) {\n    case 'png':\n    case 'jpeg':\n    case 'jpg':\n      return 'image'\n\n    default:\n      return 'file'\n  }\n}\n","import React from 'react'\nimport { ContextMenu } from '../ContextMenu'\nimport { createColumnHelper } from '@tanstack/react-table'\nimport { Asset } from '../../services/types'\nimport prettyBytes from 'pretty-bytes'\nimport dayjs from 'dayjs'\nimport relativeTime from 'dayjs/plugin/relativeTime'\nimport { Feather } from '@expo/vector-icons'\nimport { Platform, StyleSheet } from 'react-native'\nimport { Text } from 'react-native-paper'\nimport { fileToIcon } from '../../services/file-icon-service'\n\ndayjs.extend(relativeTime)\n\nconst styles = StyleSheet.create({\n  icon: {},\n  filename: {}\n})\n\n// icons for different file types or folders\nconst iconType = (asset: Asset): JSX.Element => {\n  const re = /(?:\\.([^.]+))?$/\n  const internalType = asset.isFolder\n    ? 'folder'\n    : re.exec(asset.fileName)[1] || ''\n  const fileExtension = asset.fileName.split('.').pop()\n\n  switch (internalType) {\n    case 'folder':\n      return (\n        <Feather name=\"folder\" color=\"#ffbd43\" size={22} style={styles.icon} />\n      )\n    default:\n      return (\n        <Feather\n          name={fileToIcon(fileExtension) as any}\n          color=\"#6565d6\"\n          size={22}\n          style={styles.icon}\n        />\n      )\n  }\n}\n\nexport const DataGridColumns: any = () => {\n  const columnHelper = createColumnHelper<Asset>()\n  const columns: any = [\n    // Dispaly file name with icon\n    columnHelper.accessor('fileName', {\n      id: 'fileName',\n      header: 'Name',\n      cell: (info) => {\n        const row = info.row.original\n        const fileName = row.isFolder\n          ? info.getValue().slice(0, -1)\n          : info.getValue()\n        return (\n          <>\n            <Text variant=\"bodyLarge\" style={styles.filename}>\n              {iconType(row)} &nbsp;\n              {fileName}\n            </Text>\n          </>\n        )\n      }\n    }),\n\n    // Display file size\n    columnHelper.accessor('fileSize', {\n      id: 'fileSize',\n      header: 'Size',\n      cell: (info) => (\n        <Text>\n          {!info.row.original.isFolder && prettyBytes(info.getValue())}\n        </Text>\n      )\n    }),\n\n    // Dispaly last modified\n    columnHelper.accessor('updatedAt', {\n      id: 'updatedAt',\n      header: 'Last Modified',\n      cell: (info) => {\n        return (\n          <Text>\n            {!info.row.original.isFolder && dayjs(info.getValue()).fromNow()}\n          </Text>\n        )\n      }\n    }),\n\n    // Display column size\n    columnHelper.display({\n      id: 'actions',\n      cell: () => <ContextMenu />\n    })\n  ].filter((item) => {\n    return Platform.OS !== 'web' ? item.id === 'fileName' : true\n  })\n  return columns\n}\n","import React, { Fragment, useEffect, useState } from 'react'\nimport {\n  flexRender,\n  getCoreRowModel,\n  getPaginationRowModel,\n  useReactTable\n} from '@tanstack/react-table'\nimport {\n  ActivityIndicator,\n  DataTable as ReactPaperDataTable,\n  Text\n} from 'react-native-paper'\nimport { ScrollView, StyleSheet } from 'react-native'\nimport { DataGridColumns } from './dataTableColumns'\nimport { Asset } from '../../services/types'\n\nconst styles = StyleSheet.create({\n  cell: {\n    flexBasis: 'auto',\n    paddingRight: '30px'\n  },\n  cellFirstChild: {\n    flexBasis: '78%'\n  },\n  title: {\n    display: 'flex',\n    alignItems: 'center'\n  }\n})\n\nexport interface DataTableProps {\n  assets: Asset[] | undefined\n  onPress: (asset: Asset) => void\n  isLoading: boolean\n}\n\nexport const DataTable: (props: DataTableProps) => JSX.Element = ({\n  assets,\n  onPress,\n  isLoading\n}: DataTableProps) => {\n  const [data, setData] = React.useState<Asset[]>(() => assets || [])\n  const [currentPage, setCurrentPage] = useState(1)\n  useEffect(() => {\n    setData(assets || [])\n    setCurrentPage(1)\n  }, [assets])\n  const table = useReactTable({\n    data,\n    columns: DataGridColumns(),\n    getCoreRowModel: getCoreRowModel(),\n    getPaginationRowModel: getPaginationRowModel()\n  })\n\n  useEffect(() => {\n    table.setPageSize(20 * currentPage)\n  }, [currentPage])\n\n  const isCloseToBottom = ({\n    layoutMeasurement,\n    contentOffset,\n    contentSize\n  }): boolean => {\n    const paddingToBottom = 20\n    return (\n      /* eslint-disable */\n      layoutMeasurement.height + contentOffset.y >=\n      contentSize.height - paddingToBottom\n      /* eslint-enable */\n    )\n  }\n\n  return (\n    <>\n      <ReactPaperDataTable.Header>\n        {table.getHeaderGroups().map((headerGroup) => (\n          <Fragment key={headerGroup.id}>\n            {headerGroup.headers.map((header, index) => (\n              <ReactPaperDataTable.Title\n                key={header.id}\n                style={index === 0 ? styles.cellFirstChild : styles.cell}\n              >\n                <Text>\n                  {header.isPlaceholder\n                    ? null\n                    : flexRender(\n                      header.column.columnDef.header,\n                      header.getContext()\n                    )}\n                </Text>\n              </ReactPaperDataTable.Title>\n            ))}\n          </Fragment>\n        ))}\n      </ReactPaperDataTable.Header>\n      <ScrollView\n        onScroll={({ nativeEvent }) => {\n          if (isCloseToBottom(nativeEvent)) {\n            console.log('[Scroll] Scroll close to bottom')\n            setCurrentPage(currentPage + 1)\n            // table.setPageSize(20 * 2)\n          }\n        }}\n      >\n        <ReactPaperDataTable>\n          {isLoading && <ActivityIndicator animating />}\n          {table.getRowModel().rows.map((row) => (\n            <ReactPaperDataTable.Row\n              key={row.id}\n              onPress={() => {\n                onPress(row.original)\n              }}\n            >\n              {row.getVisibleCells().map((cell, index) => (\n                <ReactPaperDataTable.Cell\n                  key={cell.id}\n                  style={index === 0 ? styles.cellFirstChild : styles.cell}\n                >\n                  {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                </ReactPaperDataTable.Cell>\n              ))}\n            </ReactPaperDataTable.Row>\n          ))}\n          <ReactPaperDataTable.Pagination\n            page={table.getState().pagination.pageIndex + 1}\n            numberOfPages={table.getPageCount()}\n            onPageChange={(page) => table.setPageIndex(page - 1)}\n            label={`${\n              table.getState().pagination.pageIndex + 1\n            } of ${table.getPageCount()}`}\n          />\n        </ReactPaperDataTable>\n      </ScrollView>\n    </>\n  )\n}\n","import React from 'react'\nimport { Alert, Modal, StyleSheet, Text, Pressable, View } from 'react-native'\n\nexport interface ModalProps {\n  isVisible: boolean\n  onClose: () => void\n}\n\nconst AppModal = ({\n  isVisible,\n  onClose,\n  children\n}: React.PropsWithChildren<ModalProps>): JSX.Element => {\n  if (!isVisible) {\n    return null\n  }\n  return (\n        <View style={styles.centeredView}>\n            <Modal\n                animationType=\"slide\"\n                transparent={true}\n                visible={isVisible}\n                onRequestClose={() => {\n                  Alert.alert('Modal has been closed.')\n                  onClose()\n                }}\n            >\n                <View style={styles.centeredView}>\n                    <View style={styles.modalView}>\n                        {children}\n                        <Pressable\n                            style={[styles.button, styles.buttonClose]}\n                            onPress={() => onClose()}\n                        >\n                            <Text style={styles.textStyle}>Hide Modal</Text>\n                        </Pressable>\n                    </View>\n                </View>\n            </Modal>\n        </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  centeredView: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginTop: 22\n  },\n  modalView: {\n    margin: 20,\n    width: 200,\n    backgroundColor: 'white',\n    borderRadius: 20,\n    padding: 35,\n    alignItems: 'center',\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 2\n    },\n    shadowOpacity: 0.25,\n    shadowRadius: 4,\n    elevation: 5\n  },\n  button: {\n    borderRadius: 20,\n    padding: 10,\n    elevation: 2\n  },\n  buttonOpen: {\n    backgroundColor: '#F194FF'\n  },\n  buttonClose: {\n    backgroundColor: '#2196F3'\n  },\n  textStyle: {\n    color: 'white',\n    fontWeight: 'bold',\n    textAlign: 'center'\n  },\n  modalText: {\n    marginBottom: 15,\n    textAlign: 'center'\n  }\n})\n\nexport default AppModal\n","import React, { PropsWithChildren } from 'react'\nimport { StyleSheet } from 'react-native'\nimport { Text, TextProps } from 'react-native-paper'\n\nexport interface TextLinkProps {\n  isUnderlined: boolean\n}\n\nexport const TextLink = ({\n  children,\n  isUnderlined,\n  ...args\n}: PropsWithChildren<TextLinkProps & TextProps>): JSX.Element => {\n  return (\n        <Text {...args} style={isUnderlined ? [styles.underline] : []}>\n            {children}\n        </Text>\n  )\n}\n\nconst styles = StyleSheet.create({\n  underline: {\n    textDecorationLine: 'underline'\n  }\n})\n","import {\n  View,\n  StyleSheet,\n  Text,\n  Dimensions,\n  EmitterSubscription\n} from 'react-native'\nimport React, { useState, useEffect } from 'react'\n\nexport type ScreenType = 'xs' | 'sm' | 'md' | 'lg' | 'xl' | 'xxl'\n\nexport interface BlockType {\n  hidden?: ScreenType[]\n}\n\nconst getScreenType = (px: number): ScreenType => {\n  if (px < 576) {\n    return 'xs'\n  } else if (px >= 576 && px < 768) {\n    return 'md'\n  } else if (px >= 768 && px < 992) {\n    return 'lg'\n  } else if (px >= 992 && px < 1200) {\n    return 'xl'\n  } else if (px >= 1200) {\n    return 'xxl'\n  }\n}\n\nconst window = Dimensions.get('window')\nconst screen = Dimensions.get('screen')\nconst screenType: ScreenType = getScreenType(window.width)\nexport const Block = ({\n  hidden,\n  children\n}: React.PropsWithChildren<BlockType>): JSX.Element => {\n  const [dimensions, setDimensions] = useState({ window, screen, screenType })\n  useEffect(() => {\n    const subscription: EmitterSubscription = Dimensions.addEventListener(\n      'change',\n      ({ window, screen }) => {\n        const screenType: ScreenType = getScreenType(window.width)\n        setDimensions({ window, screen, screenType })\n      }\n    )\n    return () => subscription?.remove()\n  }, [])\n\n  /**\n   * A simple function to debug the current dimensions\n   * @returns\n   */\n  // eslint-disable-next-line\n  const getDebug: React.FC = () => (\n    <>\n      <Text>Current type: {dimensions.screenType}</Text>\n      <Text style={styles.header}>Window Dimensions</Text>\n      {Object.entries(dimensions.window).map(([key, value]) => (\n        <Text key={key}>\n          {key} - {value}\n        </Text>\n      ))}\n      <Text style={styles.header}>Screen Dimensions</Text>\n      {Object.entries(dimensions.screen).map(([key, value]) => (\n        <Text key={key}>\n          {key} - {value}\n        </Text>\n      ))}\n    </>\n  )\n\n  const hideContent = hidden ? hidden.includes(dimensions.screenType) : false\n\n  return <>{!hideContent && <View>{children}</View>}</>\n}\n\nconst styles = StyleSheet.create({\n  header: {\n    fontSize: 16,\n    marginVertical: 10\n  }\n})\n","/**\n * This context will hold all of our application data like the current\n * user's api Keys, currently viewed directory, etc\n */\n\nimport React, { createContext } from 'react'\n\nexport const initialData: Object = {}\n\nexport type ThemeContextType = [\n  Object,\n  React.Dispatch<React.SetStateAction<Object>>\n]\n\nexport const ThemeContextInternal = createContext<ThemeContextType>(\n  Object.create({})\n)\n","import React, { useState, useContext } from 'react'\nimport { Feather } from '@expo/vector-icons'\nimport { StyleSheet, View } from 'react-native'\nimport { IconButton, Text, TextInput } from 'react-native-paper'\n\nimport { Block } from '../../services/rn-responsive-design'\nimport { Asset } from '../../services/types'\nimport { ThemeContextInternal } from '../../contexts/theme/ThemeContextInternal'\nimport { ApplicationContext } from '../../contexts/application/ApplicationContext'\nimport { updateAsset as s3UpdateAsset, deleteAsset } from '../../services/s3'\nimport { useS3Client } from '../../hooks/useS3Client'\n\nexport interface PreviewPropsType {\n  asset: Asset\n  onClose: () => void\n}\n\nconst Preview = ({ asset, onClose }: PreviewPropsType): JSX.Element => {\n  const [appState, setAppState] = useContext(ApplicationContext)\n  const { s3credentials } = appState\n\n  const [theme] = useContext(ThemeContextInternal)\n  const [isEditing, setIsEditing] = useState(false)\n  const [updateAsset, setUpdateAsset] = useState(asset)\n  const [text, setText] = useState(asset.fileName)\n  const [s3Client] = useS3Client(appState)\n\n  const handleSave = async (): Promise<void> => {\n    setIsEditing(false)\n    setUpdateAsset((asset) => ({\n      ...asset,\n      fileName: text\n    }))\n    await s3UpdateAsset(s3Client, {\n      Bucket: s3credentials.bucket,\n      Key: s3credentials.bucket + '/' + asset.key.replace(asset.fileName, text),\n      CopySource: s3credentials.bucket + '/' + asset.key\n    })\n    setAppState({ ...appState, mutatedAt: new Date() })\n  }\n\n  const handleDelete = async (): Promise<void> => {\n    const deleteParams = {\n      Bucket: s3credentials.bucket,\n      Key: updateAsset.key\n    }\n    await deleteAsset(s3Client, deleteParams)\n    setAppState({ ...appState, mutatedAt: new Date() })\n  }\n\n  /* eslint-disable */\n  return (\n    <>\n      <Block hidden={['xs', 'md']}>\n        <View style={styles.main}>\n          <IconButton\n            theme={theme}\n            icon=\"close\"\n            onPress={onClose}\n            style={styles.closeButton}\n          />\n          <View style={[styles.section2, styles.centered]}>\n            <Text\n              variant=\"headlineSmall\"\n              style={[styles.textCenter, styles.marginBottom]}\n            >\n              <Feather theme={theme} name=\"file\" size={100} />\n            </Text>\n            <Text variant=\"headlineSmall\" style={styles.textCenter}>\n              {isEditing ? (\n                <TextInput\n                  value={isEditing ? text : updateAsset?.fileName}\n                  onChangeText={(text) => setText(text)}\n                />\n              ) : (\n                updateAsset?.fileName\n              )}\n            </Text>\n            <View style={[styles.centered, styles.horizontal]}>\n              {isEditing ? (\n                <IconButton theme={theme} icon=\"check\" onPress={handleSave} />\n              ) : (\n                <IconButton\n                  theme={theme}\n                  icon=\"pencil\"\n                  onPress={() => setIsEditing(true)}\n                />\n              )}\n              <IconButton\n                theme={theme}\n                icon=\"trash-can\"\n                onPress={handleDelete}\n              />\n            </View>\n          </View>\n        </View>\n      </Block>\n    </>\n  )\n}\n/* eslint-enable */\n\nconst styles = StyleSheet.create({\n  main: {\n    display: 'flex',\n    flexGrow: 1\n  },\n  closeButton: {\n    display: 'flex',\n    textAlign: 'right',\n    height: 50\n  },\n  marginBottom: {\n    marginBottom: 10\n  },\n  textCenter: {\n    textAlign: 'center'\n  },\n  centered: {\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  horizontal: {\n    flexDirection: 'row'\n  },\n  section2: {\n    minWidth: '30vw',\n    flex: 1,\n    flexGrow: 1,\n    margin: 20\n  }\n})\n\nexport { Preview }\n","import React, { useEffect, useState } from 'react'\nimport { StyleSheet, Image, TouchableOpacity } from 'react-native'\nimport { Text } from 'react-native-paper'\nimport { Feather } from '@expo/vector-icons'\nimport { Asset } from '../../services/types'\nimport { getAsset } from '../../services/s3'\nimport { GetObjectCommandOutput, S3Client } from '@aws-sdk/client-s3'\nimport { ApplicationState } from '../../contexts/application/ApplicationContext'\nimport { fileToIcon } from '../../services/file-icon-service'\n// import { RNFetchBlob } from 'rn-fetch-blob'\n\nconst imageExtensions = ['png', 'jpeg', 'jpg']\n\n/*\nasync function collectStream(stream: ReadableStream): Promise<Uint8Array> {\n  let res = new Uint8Array(0)\n  const reader = stream.getReader()\n  let isDone = false\n  while (!isDone) {\n    const { done, value } = await reader.read()\n    if (value) {\n      const prior = res\n      res = new Uint8Array(prior.length + value.length)\n      res.set(prior)\n      res.set(value, prior.length)\n    }\n    isDone = done\n  }\n  return res\n}\n*/\n\nexport const mobileResponse = (stream): Response => {\n  return new Response(stream, {})\n}\n\nexport const GridItemImagePreview = ({\n  item,\n  onPress,\n  s3client,\n  s3Initialized,\n  appState\n}: {\n  item: Asset\n  onPress: any\n  s3client: S3Client\n  s3Initialized: boolean\n  appState: ApplicationState\n}): JSX.Element => {\n  const [d, setD] = useState<string | ArrayBuffer>()\n  const [error, setError] = useState<Error | undefined>(undefined)\n\n  const [loaded, setLoaded] = useState(false)\n  const [, setShowPreview] = useState(false)\n  const fileExtension = item.fileName.split('.').pop()\n  const isImage = imageExtensions.includes(fileExtension)\n  const fileIcon = !item.isFolder ? fileToIcon(fileExtension) : 'folder'\n  const loadImage = item.fileSize < 1000000\n  useEffect(() => {\n    if (!item.isFolder) {\n      if (isImage && loadImage) {\n        /* getAssetV2(s3client, {\n          Key: item.key,\n          Bucket: appState.s3credentials.bucket,\n        }) */\n        setShowPreview(true)\n        getAsset(s3client, {\n          Key: item.key,\n          Bucket: appState.s3credentials.bucket\n        })\n          .then((response: GetObjectCommandOutput) => {\n            mobileResponse(response.Body)\n              .blob()\n              .then((blobIn) => {\n                const fileReaderInstance = new FileReader()\n                fileReaderInstance.readAsDataURL(blobIn)\n                fileReaderInstance.onload = () => {\n                  const base64 = fileReaderInstance.result\n                  setD(base64)\n                  setLoaded(true)\n                }\n              })\n              .catch((error: Error) => {\n                setError(error)\n              })\n          })\n          .catch((error: Error) => {\n            setError(error)\n          })\n      }\n    }\n  }, [s3Initialized])\n\n  const onPressPreview = (): void => {\n    onPress(item)\n  }\n  /* eslint-disable */\n  return (\n    <TouchableOpacity onPress={onPressPreview}>\n      {isImage && loadImage ? (\n        loaded && !error ? (\n          <Image source={{ uri: d.toString() }} style={styles.preview} />\n        ) : (\n          <Feather name=\"alert-triangle\" size={100} style={styles.errorIcon} />\n        )\n      ) : (\n        <Feather name={fileIcon as any} size={100} style={styles.icon} />\n      )}\n      <Text\n        style={styles.fileName}\n        onPress={() => {\n          onPress(item)\n        }}\n      >\n        {item.fileName}\n      </Text>\n    </TouchableOpacity>\n  )\n  /** eslint-enable */\n}\n\nconst styles = StyleSheet.create({\n  preview: {\n    width: '100%',\n    height: 200,\n  },\n  icon: {\n    marginTop: 20,\n  },\n  wrapper: {},\n  fileName: {\n    bottom: 0,\n    textAlign: 'center',\n  },\n  errorIcon: {\n    color: 'red',\n  },\n})\n","import React from 'react'\nimport { StyleSheet, TouchableOpacity } from 'react-native'\nimport { Text } from 'react-native-paper'\nimport { Feather } from '@expo/vector-icons'\nimport { Asset } from '../../services/types'\nimport { fileToIcon } from '../../services/file-icon-service'\n// import { RNFetchBlob } from 'rn-fetch-blob'\n\nexport const GridItemFilePreview = ({\n  item,\n  onPress\n}: {\n  item: Asset\n  onPress: any\n}): JSX.Element => {\n  const fileExtension = item.fileName.split('.').pop()\n  const fileIcon = !item.isFolder ? fileToIcon(fileExtension) : 'folder'\n\n  const onPressPreview = (): void => {\n    onPress(item)\n  }\n\n  return (\n    <TouchableOpacity onPress={onPressPreview}>\n      <Feather name={fileIcon as any} size={100} style={styles.icon} />\n      <Text\n        style={styles.fileName}\n        onPress={() => {\n          onPress(item)\n        }}\n      >\n        {item.fileName}\n      </Text>\n    </TouchableOpacity>\n  )\n}\n\nconst styles = StyleSheet.create({\n  icon: {\n    marginTop: 20\n  },\n  wrapper: {},\n  fileName: {\n    bottom: 0,\n    textAlign: 'center'\n  },\n  errorIcon: {\n    color: 'red'\n  }\n})\n","import React from 'react'\nimport { StyleSheet, View } from 'react-native'\nimport { Asset } from '../../services/types'\nimport { S3Client } from '@aws-sdk/client-s3'\nimport { ApplicationState } from '../../contexts/application/ApplicationContext'\nimport { GridItemImagePreview } from './ImagePreview'\nimport { GridItemFilePreview } from './FilePreview'\n// import { RNFetchBlob } from 'rn-fetch-blob'\n\nexport const GridItemPreview = ({\n  item,\n  onPress,\n  s3client,\n  s3Initialized,\n  appState\n}: {\n  item: Asset\n  onPress: any\n  s3client: S3Client\n  s3Initialized: boolean\n  appState: ApplicationState\n}): JSX.Element => {\n  const fileExtension = item.fileName.split('.').pop()\n\n  return (\n    <View style={styles.item}>\n      {(() => {\n        switch (fileExtension) {\n          case 'png':\n          case 'jpeg':\n          case 'jpg':\n            return (\n              <GridItemImagePreview\n                item={item}\n                onPress={onPress}\n                s3client={s3client}\n                s3Initialized={s3Initialized}\n                appState={appState}\n              />\n            )\n          default:\n            return <GridItemFilePreview item={item} onPress={onPress} />\n        }\n      })()}\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  item: {\n    marginVertical: 8,\n    marginHorizontal: 16,\n    height: 200,\n    display: 'flex',\n    flex: 1,\n    overflow: 'hidden',\n    textAlign: 'center'\n  }\n})\n","import React, { useContext, useEffect, useState } from 'react'\nimport {\n  createColumnHelper,\n  getCoreRowModel,\n  getPaginationRowModel,\n  useReactTable\n} from '@tanstack/react-table'\nimport { ActivityIndicator } from 'react-native-paper'\nimport { FlatList, ScrollView, StyleSheet, View } from 'react-native'\n\nimport { Asset } from '../../services/types'\nimport { GridItemPreview } from '../GridItemPreview'\nimport {\n  ApplicationContext,\n  ApplicationContextType\n} from '../../contexts/application/ApplicationContext'\nimport { useS3Client } from '../../hooks/useS3Client'\n\nconst styles = StyleSheet.create({\n  cell: {\n    flexBasis: 'auto',\n    minWidth: '105px',\n    paddingRight: '15px'\n  },\n  cellFirstChild: {\n    flexBasis: '78%'\n  },\n  title: {\n    display: 'flex',\n    alignItems: 'center'\n  },\n  columnWrapperStyle: {\n    display: 'flex'\n  }\n})\n\nexport interface DataTableProps {\n  assets: Asset[] | undefined\n  onPress: (asset: Asset) => void\n  isLoading: boolean\n}\n\nexport const DataGrid: (props: DataTableProps) => JSX.Element = ({\n  assets,\n  onPress,\n  isLoading\n}: DataTableProps) => {\n  const [appState] = useContext<ApplicationContextType>(ApplicationContext)\n  const [s3client, s3Initialized] = useS3Client(appState)\n  const [data, setData] = React.useState<Asset[]>(() => assets || [])\n  const [currentPage, setCurrentPage] = useState(1)\n  useEffect(() => {\n    setData(assets || [])\n    setCurrentPage(1)\n  }, [assets])\n  const table = useReactTable({\n    data,\n    columns: DataGridColumns(),\n    getCoreRowModel: getCoreRowModel(),\n    getPaginationRowModel: getPaginationRowModel()\n  })\n\n  const items = table.getRowModel().flatRows.map((item) => item.original)\n\n  useEffect(() => {\n    table.setPageSize(20 * currentPage)\n  }, [currentPage])\n\n  const isCloseToBottom = ({\n    layoutMeasurement,\n    contentOffset,\n    contentSize\n  }): boolean => {\n    const paddingToBottom = 20\n    return (\n      /* eslint-disable */\n      layoutMeasurement.height + contentOffset.y >=\n      contentSize.height - paddingToBottom\n      /* eslint-enable */\n    )\n  }\n\n  return (\n    <>\n      <ScrollView\n        onScroll={({ nativeEvent }) => {\n          if (isCloseToBottom(nativeEvent)) {\n            console.log('[Scroll] Scroll close to bottom')\n            setCurrentPage(currentPage + 1)\n          }\n        }}\n      >\n        {isLoading && <ActivityIndicator animating />}\n\n        <View>\n          <FlatList\n            columnWrapperStyle={styles.columnWrapperStyle}\n            numColumns={4}\n            data={items}\n            renderItem={({ item }: { item: Asset }) => {\n              return (\n                <GridItemPreview\n                  item={item}\n                  onPress={onPress}\n                  s3client={s3client}\n                  s3Initialized={s3Initialized}\n                  appState={appState}\n                />\n              )\n            }}\n            keyExtractor={(item: Asset) => item.fileName}\n          ></FlatList>\n          <></>\n        </View>\n      </ScrollView>\n    </>\n  )\n}\n\nexport const DataGridColumns: any = () => {\n  const columnHelper = createColumnHelper<Asset>()\n  const columns: any = [\n    columnHelper.accessor('fileName', {\n      id: 'fileName',\n      header: 'Name',\n      cell: (info) => <></>\n    })\n  ]\n  return columns\n}\n","import React, { useContext, useEffect, useState } from 'react'\nimport { StyleSheet, View } from 'react-native'\nimport { Ionicons } from '@expo/vector-icons'\nimport { Text, IconButton, Card, FAB, ToggleButton } from 'react-native-paper'\nimport { Portal } from '@gorhom/portal'\nimport {\n  ApplicationContext,\n  ApplicationContextType\n} from '../../contexts/application/ApplicationContext'\nimport { useGetAssets } from '../../hooks/useGetAssets'\nimport { useS3Client } from '../../hooks/useS3Client'\nimport { DataTable } from '../DataTable'\n\nimport { Asset } from '../../services/types'\nimport { GetAssetArgs } from '../../services/s3/types'\nimport AppModal from '../Modal'\nimport { TextLink } from '../TextLink'\nimport { Preview } from '../Preview'\nimport { DataGrid } from '../DataGrid'\n\nexport const ListAssets: React.FC = () => {\n  const [selectedAsset, setSelectedAsset] = useState<Asset | undefined>(\n    undefined\n  )\n  const [isExtended, setIsExtended] = React.useState(false)\n  const [rerun, setRerun] = useState('')\n  const [appState] = useContext<ApplicationContextType>(ApplicationContext)\n  const [s3client, s3Initialized] = useS3Client(appState)\n  const [isTableView, setIsTableView] = React.useState(true)\n\n  const [dataQuery, setDataQuery] = useState<GetAssetArgs>({\n    Bucket: appState.s3credentials.bucket,\n    Prefix: '',\n    Delimiter: '/'\n  })\n  useEffect(() => {\n    setDataQuery({ ...dataQuery, Bucket: appState.s3credentials.bucket })\n  }, [appState, s3client])\n\n  const { data, isLoading, isError } = useGetAssets(\n    s3client,\n    s3Initialized,\n    dataQuery,\n    rerun,\n    appState.mutatedAt\n  )\n\n  const setPrefix = (prefix: string): void => {\n    setDataQuery({ ...dataQuery, Prefix: prefix })\n  }\n  const onPress = (asset: Asset): void => {\n    if (asset.isFolder) {\n      setPrefix(asset.prefix)\n    } else {\n      setSelectedAsset(asset)\n    }\n  }\n\n  const goBack: () => void = () => {\n    const prefix = dataQuery.Prefix\n    if (prefix !== '') {\n      const newPrefix = prefix.substring(\n        0,\n        prefix.substring(0, prefix.length - 1).lastIndexOf('/') + 1\n      )\n      setPrefix(newPrefix)\n    }\n  }\n\n  const goToPrefixByIndex = (index: number): void => {\n    const dirPathArray = dataQuery.Prefix?.split('/')\n    const newPrefix = `${dirPathArray.slice(0, index).join('/')}/`\n    setPrefix(newPrefix === '/' ? '' : newPrefix)\n  }\n\n  const dirPathArray = ['bucket', ...dataQuery.Prefix?.split('/')]\n  const dirPath = dirPathArray.map((item, index) => {\n    const isLastFragment = index === dirPathArray?.length - 1\n    return (\n      <TextLink\n        key={`dirPath${index}`}\n        isUnderlined={!isLastFragment}\n        onPress={() => {\n          goToPrefixByIndex(index)\n        }}\n      >\n        /\n        {!isLastFragment && (\n          <Ionicons name=\"folder-open-outline\" color=\"#ffbd43\" size={22} />\n        )}\n        {item}\n      </TextLink>\n    )\n  })\n\n  /* eslint-disable */\n  return (\n    <>\n      {s3Initialized ? (\n        <>\n          <Portal hostName=\"Reloader\">\n            <IconButton\n              animated\n              icon=\"reload\"\n              onPress={() => {\n                setRerun(`${Math.random()}`)\n              }}\n            />\n          </Portal>\n          <Portal hostName=\"Back\">\n            {dataQuery.Prefix?.length > 0 && (\n              <IconButton\n                icon=\"arrow-left\"\n                onPress={() => {\n                  goBack()\n                }}\n              />\n            )}\n          </Portal>\n          <View style={styles.root}>\n            <View style={styles.section1}>\n              {isError && <Text variant=\"headlineSmall\">Error </Text>}\n              <View style={styles.actionBarContainer}>\n                <Text variant=\"bodyMedium\" style={styles.path}>\n                  {dirPath}\n                </Text>\n                <View style={styles.buttonGroup}>\n                  <ToggleButton\n                    icon=\"dots-grid\"\n                    value=\"grid\"\n                    status={isTableView === false ? 'checked' : 'unchecked'}\n                    onPress={() => setIsTableView(false)}\n                  />\n                  <ToggleButton\n                    icon=\"table\"\n                    value=\"table\"\n                    status={isTableView === true ? 'checked' : 'unchecked'}\n                    onPress={() => setIsTableView(true)}\n                  />\n                </View>\n              </View>\n\n              <AppModal\n                isVisible={isExtended}\n                onClose={() => {\n                  setIsExtended(false)\n                }}\n              >\n                <Text>Upload files here</Text>\n              </AppModal>\n\n              {isTableView ? (\n                <DataTable\n                  assets={data}\n                  onPress={onPress}\n                  isLoading={isLoading}\n                />\n              ) : (\n                <DataGrid\n                  assets={data}\n                  onPress={onPress}\n                  isLoading={isLoading}\n                />\n              )}\n\n              <FAB\n                icon=\"plus\"\n                onPress={() => setIsExtended(!isExtended)}\n                visible\n                style={[styles.fabStyle]}\n              />\n            </View>\n            {selectedAsset && (\n              <Preview\n                onClose={() => setSelectedAsset(undefined)}\n                asset={selectedAsset}\n              />\n            )}\n          </View>\n        </>\n      ) : (\n        <Card style={styles.errorMessage}>\n          <Text>\n            S3 Client has not been initialized, please update your API\n            Configuration first.\n          </Text>\n        </Card>\n      )}\n    </>\n    /* eslint-enable */\n  )\n}\n\nconst styles = StyleSheet.create({\n  path: {\n    display: 'flex',\n    margin: 10,\n    flex: 1\n  },\n  fabStyle: {\n    bottom: 45,\n    right: 25,\n    position: 'absolute'\n  },\n  errorMessage: {\n    margin: 12,\n    padding: 10\n  },\n  root: {\n    flexDirection: 'row',\n    display: 'flex',\n    flex: 1,\n    flexGrow: 1\n  },\n  section1: {\n    flex: 3,\n    borderColor: 'gray',\n    borderRightWidth: 2,\n    flexDirection: 'column'\n  },\n  buttonGroup: {\n    display: 'flex',\n    flexDirection: 'row'\n  },\n  actionBarContainer: {\n    display: 'flex',\n    flexDirection: 'row'\n  }\n})\n","import { S3Client } from '@aws-sdk/client-s3'\nimport { useQuery, UseQueryResult } from '@tanstack/react-query'\nimport { S3TypeToInternalAdapter } from '../adapters/s3'\nimport { getAssets } from '../services/s3'\nimport { GetAssetArgs } from '../services/s3/types'\nimport { Asset } from '../services/types'\n\nexport const useGetAssets = (\n  client: S3Client,\n  clientInitialized: boolean,\n  params: GetAssetArgs,\n  rerun: string = '',\n  mutatedAt: Date | undefined\n): UseQueryResult<Asset[], unknown> => {\n  const queryResponse = useQuery(\n    [\n      'getAssets',\n      rerun,\n      params.Bucket || '',\n      params.Delimiter || '',\n      params.Prefix || '',\n      mutatedAt || ''\n    ],\n    async () => {\n      try {\n        const data = await getAssets(client, params)\n        const assets = S3TypeToInternalAdapter(data, params)\n        return assets\n      } catch (error) {\n        console.log('[useGetAssets] Error : ', error)\n      }\n      return []\n    },\n    {\n      enabled: clientInitialized,\n      refetchOnWindowFocus: false\n    }\n  )\n  return queryResponse\n}\n","import React from 'react'\r\nimport { ListAssets } from '../../components/ListAssets'\r\n\r\nexport default function Dashboard (): JSX.Element {\r\n  return (\r\n    <ListAssets />\r\n  )\r\n}\r\n","import React from 'react'\nimport { Appbar } from 'react-native-paper'\nimport { PortalHost } from '@gorhom/portal'\nconst Header = (props: any): JSX.Element => (\n  <Appbar.Header mode='center-aligned' elevated={true}>\n    <PortalHost name=\"Back\" />\n    <Appbar.Content title={props.title} />\n    <PortalHost name=\"Reloader\" />\n  </Appbar.Header>\n)\n\nexport default Header\n","import * as React from 'react'\nimport { Platform } from 'react-native'\nimport { BottomNavigation } from 'react-native-paper'\nimport { ApiConfiguration } from '../ApiConfiguration/index'\nimport Dashboard from '../../pages/dashboard'\nimport Header from '../Header'\n\nconst MobileNavigation: React.FC = () => {\n  const [index, setIndex] = React.useState(0)\n  const [routes] = React.useState([\n    { key: 'assets', title: 'Assets', focusedIcon: 'folder' },\n    {\n      key: 'api_configuration',\n      title: 'API Configuration',\n      focusedIcon: 'cogs'\n    }\n  ])\n\n  const renderScene = BottomNavigation.SceneMap({\n    assets: Dashboard,\n    api_configuration: ApiConfiguration\n  })\n\n  if (Platform.OS === 'web') {\n    return null\n  }\n\n  return (\n    <>\n      <Header title=\"BYOS\" />\n      <BottomNavigation\n        navigationState={{ index, routes }}\n        onIndexChange={setIndex}\n        renderScene={renderScene}\n      />\n    </>\n  )\n}\n\nexport default MobileNavigation\n","import AsyncStorage from '@react-native-async-storage/async-storage'\nexport const ApplicationStorageKey = 'byos/application'\nexport const DomainStorageKey = 'byos/domain'\n\nconst storeData: (value: any) => Promise<void> = async (value: any) => {\n  try {\n    await AsyncStorage.setItem(ApplicationStorageKey, JSON.stringify(value))\n  } catch (e) {\n    // saving error\n  }\n}\n\nconst getData: () => Promise<string> = async () => {\n  try {\n    const value = await AsyncStorage.getItem(ApplicationStorageKey)\n    if (value !== null) {\n      // value previously stored\n      return value\n    }\n  } catch (e) {\n    // error reading value\n  }\n  return ''\n}\n\nconst parseJson: (jsonString: string) => any = (jsonString: string) => {\n  try {\n    return JSON.parse(jsonString)\n  } catch (error) {\n    return {}\n  }\n}\n\nexport const getApplicationStateLS: (defaultValue: string) => Promise<any> = async (defaultValue: string = '{}') => {\n  const value = await getData()\n  if (value) {\n    return parseJson(value)\n  }\n  return parseJson(defaultValue)\n}\n\n// eslint-disable-next-line @typescript-eslint/no-misused-promises\nexport const setApplicationStateLS: (value: Object) => void = async (value: any) => {\n  await storeData(value)\n  return null\n}\n","import React from 'react'\r\n// import { useLinkClickHandler } from 'react-router-dom'\r\nimport { SaveCredentialsForm } from '../../components/SaveCredentialsForm'\r\n// import { useNavigate } from 'react-router-dom'\r\n\r\nexport default function Credentials (): JSX.Element {\r\n  // const [isOpen, setIsOpen] = useState(false)\r\n  // const navigate = useNavigate()\r\n  // const onClick = useLinkClickHandler('/credentials')\r\n  // useEffect(() => {\r\n  //     setIsOpen(true)\r\n  // }, [onClick, setIsOpen])\r\n\r\n  // const handleClose = () => {\r\n  //     setIsOpen(false)\r\n  //     navigate('/')\r\n  // }\r\n\r\n  return (\r\n    <>\r\n      <SaveCredentialsForm />\r\n    </>\r\n  )\r\n}\r\n","import { MD3LightTheme as DefaultTheme, MD3Theme } from 'react-native-paper'\n\nexport const theme: MD3Theme = {\n  ...DefaultTheme,\n  roundness: 2,\n  version: 3,\n  colors: {\n    ...DefaultTheme.colors\n  }\n}\n","import React, { useContext, useEffect, useState } from 'react'\r\nimport { Platform, View, StyleSheet } from 'react-native'\r\nimport { NavigationContainer } from '@react-navigation/native'\r\nimport { createNativeStackNavigator } from '@react-navigation/native-stack'\r\nimport { Provider as PaperProvider, Text, IconButton } from 'react-native-paper'\r\nimport { PortalProvider } from '@gorhom/portal'\r\n\r\nimport {\r\n  ApplicationContext,\r\n  initialData\r\n} from './contexts/application/ApplicationContext'\r\nimport MobileView from './components/MobileView'\r\nimport { setApplicationStateLS } from './services/localstorage'\r\nimport { useGetApplicationStateFromLs } from './hooks/useGetApplicationStateFromLS'\r\nimport Dashboard from './pages/dashboard'\r\nimport Credentials from './pages/credentials'\r\nimport { theme } from './theme'\r\nimport { ThemeContextInternal } from './contexts/theme/ThemeContextInternal'\r\n\r\nconst Stack = createNativeStackNavigator()\r\n\r\nconst styles = StyleSheet.create({\r\n  ButtonsWrapper: {\r\n    flexDirection: 'row'\r\n  },\r\n  Button: {\r\n    border: '1px',\r\n    borderStyle: 'solid'\r\n  }\r\n})\r\n\r\nfunction App (): JSX.Element {\r\n  const themeState = useState(theme)\r\n  const { data: savedApplicationData, isLoaded } =\r\n    useGetApplicationStateFromLs(initialData)\r\n\r\n  const applicationState = useState(savedApplicationData)\r\n  const [applicationStateData, setApplicationStateData] = applicationState\r\n\r\n  useEffect(() => {\r\n    setApplicationStateData(savedApplicationData)\r\n  }, [savedApplicationData])\r\n\r\n  useEffect(() => {\r\n    if (isLoaded) {\r\n      setApplicationStateLS({ ...applicationStateData })\r\n    }\r\n  }, [applicationStateData, isLoaded])\r\n\r\n  const navigationButtons = ({ navigation }): any => ({\r\n    headerTitle: (props) => <Text>BYOS</Text>,\r\n    // Add a placeholder button without the `onPress` to avoid flicker\r\n    headerRight: () => (\r\n      <View style={styles.ButtonsWrapper}>\r\n        <IconButton\r\n          style={styles.Button}\r\n          icon=\"home\"\r\n          onPress={() => navigation.navigate('Home')}\r\n        />\r\n        <IconButton\r\n          style={styles.Button}\r\n          icon=\"cogs\"\r\n          onPress={() => navigation.navigate('Credentials')}\r\n        />\r\n      </View>\r\n    )\r\n  })\r\n\r\n  return (\r\n    <ThemeContextInternal.Provider value={themeState}>\r\n      <ThemeProvider>\r\n        <PortalProvider>\r\n          <ApplicationContext.Provider value={applicationState}>\r\n            {Platform.OS === 'web' && (\r\n              <NavigationContainer>\r\n                <Stack.Navigator>\r\n                  <Stack.Screen\r\n                    name=\"Home\"\r\n                    component={Dashboard}\r\n                    options={navigationButtons}\r\n                  />\r\n                  <Stack.Screen\r\n                    name=\"Credentials\"\r\n                    component={Credentials}\r\n                    options={navigationButtons}\r\n                  />\r\n                </Stack.Navigator>\r\n              </NavigationContainer>\r\n            )}\r\n            <MobileView />\r\n          </ApplicationContext.Provider>\r\n        </PortalProvider>\r\n      </ThemeProvider>\r\n    </ThemeContextInternal.Provider>\r\n  )\r\n}\r\n\r\nconst ThemeProvider = ({ children }: React.PropsWithChildren): JSX.Element => {\r\n  const [theme] = useContext(ThemeContextInternal)\r\n  return <PaperProvider theme={theme}>{children}</PaperProvider>\r\n}\r\n\r\nexport default App\r\n","import { useMemo, useState } from 'react'\nimport { ApplicationState } from '../contexts/application/ApplicationContext'\nimport { getApplicationStateLS } from '../services/localstorage'\n\ninterface ApplicationStateHookReturn {\n  data: ApplicationState | undefined\n  isLoaded: boolean\n}\n\nexport const useGetApplicationStateFromLs = (initialData: ApplicationState | undefined): ApplicationStateHookReturn => {\n  const [d, setD] = useState<ApplicationState | undefined>(initialData)\n  const [isLoaded, setIsLoaded] = useState(false)\n  useMemo(() => {\n    getApplicationStateLS(\n      JSON.stringify(initialData)\n    ).then(data => {\n      setD(data)\n      setIsLoaded(true)\n    })\n      .catch(() => {\n        console.log('[useGetApplicationStateFromLs] Promise failure getApplicationStateLS')\n      })\n  }, [initialData])\n\n  return { data: d, isLoaded }\n}\n","import { createContext } from 'react'\r\n\r\nexport const RoutingContext = createContext(Object.create(null))\r\n","import React from 'react'\r\nimport Home from '../pages/home'\r\nimport Credentials from '../pages/credentials'\r\n\r\nexport interface InternalRouteDef {\r\n  path: string\r\n  component: JSX.Element\r\n  showInNavigation: boolean\r\n\r\n}\r\n\r\nexport interface RoutingObjectDef {\r\n  isReady: boolean\r\n  routes: InternalRouteDef\r\n}\r\n\r\nconst routes: InternalRouteDef[] = [\r\n  { path: '/credentials', component: <Credentials />, showInNavigation: true },\r\n  { path: '/', component: <Home />, showInNavigation: true }\r\n]\r\n\r\nconst internalRoutes = {\r\n  isReady: false,\r\n  routes\r\n}\r\n\r\nexport default internalRoutes\n","import React from 'react'\n\nexport default function Home (): JSX.Element {\n  return (\n    <>\n    </>\n  )\n}\n","import React, { useEffect } from 'react'\r\nimport { RoutingContext } from '../contexts/routing/RoutingContext'\r\n\r\nexport const BasicProvider: (children: any) => JSX.Element = ({ children }: React.PropsWithChildren) => {\r\n  const [routingState, setRoutingState] = React.useContext(RoutingContext)\r\n  useEffect(() => {\r\n    if (routingState.isReady === false) {\r\n      setRoutingState({ ...routingState, isReady: true })\r\n    }\r\n    // eslint-disable-next-line\r\n  }, [routingState.isReady, routingState.routes])\r\n  return <>\r\n    {children}\r\n  </>\r\n}\r\n","import React from 'react'\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query'\n\nconst queryClient = new QueryClient()\n\nexport default function QueryProvider ({ children }: React.PropsWithChildren): JSX.Element {\n  return (\n    <QueryClientProvider client={queryClient}>\n      {children}\n    </QueryClientProvider>\n  )\n}\n","import React, { useState } from 'react'\r\nimport { RoutingContext } from '../contexts/routing/RoutingContext'\r\nimport routes from '../routes'\r\nimport { BasicProvider } from './BasicProvider'\r\nimport QueryProvider from './QueryProvider'\r\n\r\nexport const Provider = ({ children }: React.PropsWithChildren): JSX.Element => {\r\n  const routingState = useState(routes)\r\n\r\n  /**\r\n       if (useAzureLogin) {\r\n          return <QueryProvider>\r\n              <RoutingContext.Provider value={routingState}>\r\n                  <AzureAdProvider >\r\n                      {children}\r\n                  </AzureAdProvider>\r\n              </RoutingContext.Provider>\r\n          </QueryProvider>\r\n      }else\r\n      { */\r\n  return (\r\n        <QueryProvider>\r\n            <RoutingContext.Provider value={routingState}>\r\n                <BasicProvider>\r\n                    {children}\r\n                </BasicProvider>\r\n            </RoutingContext.Provider>\r\n        </QueryProvider>)\r\n}\r\n","import React from 'react'\nimport BAap from './App'\nimport { Provider } from './providers/Provider'\n\nconst ExportApp: React.FC = () => {\n  return (\n    <Provider>\n      <BAap />\n    </Provider>\n  )\n}\n\nexport default ExportApp\n","import { StatusBar } from 'expo-status-bar';\nimport { StyleSheet, Text, View } from 'react-native';\nimport BYOSApp from \"./src/ExportApp\";\nimport { registerRootComponent } from 'expo';\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\nexport default function App() {\n  return (\n      <BYOSApp/>\n  );\n}\nregisterRootComponent(App);\n\n\n\n","import { registerRootComponent } from 'expo'\n\nimport App from './App'\n\n// registerRootComponent calls AppRegistry.registerComponent('main', () => App);\n// It also ensures that whether you load the app in Expo Go or in a native build,\n// the environment is set up appropriately\nregisterRootComponent(App)\n"],"sourceRoot":""}