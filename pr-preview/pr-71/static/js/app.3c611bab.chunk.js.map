{"version":3,"sources":["src/contexts/routing/RoutingContext.ts","src/contexts/application/ApplicationContext.ts","src/components/Header/index.tsx","src/services/s3/index.ts","src/components/Input/InputField.tsx","src/components/SaveCredentialsForm/index.tsx","src/components/ApiConfiguration/index.tsx","src/adapters/s3.ts","src/components/ContextMenu/index.tsx","src/components/DataGrid/dataGridColumns.tsx","src/components/DataGrid/index.tsx","src/components/Modal/index.tsx","src/components/TextLink.tsx","src/services/rn-responsive-design/components/Block.tsx","src/contexts/theme/ThemeContextInternal.ts","src/components/Preview/index.tsx","src/components/ListAssets/index.tsx","src/hooks/useS3Client.ts","src/hooks/useGetAssets.ts","src/pages/dashboard/index.tsx","src/components/MobileNavigation/index.tsx","src/services/localstorage/index.ts","src/theme/index.ts","src/App.tsx","src/hooks/useGetApplicationStateFromLS.ts","src/routes/index.tsx","src/pages/credentials/index.tsx","src/pages/home/index.tsx","src/providers/BasicProvider.tsx","src/providers/QueryProvider.tsx","src/providers/Provider.tsx","src/ExportApp.tsx","App.js","index.js"],"names":["RoutingContext","createContext","Object","create","initialData","s3credentials","apiKey","undefined","apiSecret","region","endpoint","bucket","s3client","otherStuff","ApplicationContext","Header","props","Appbar","mode","elevated","name","Content","title","buildS3Client","initializationData","credentials","client","S3Client","middlewareStack","add","next","context","args","step","getAssets","params","command","ListObjectsCommand","response","send","folders","CommonPrefixes","map","item","prefix","Prefix","etag","lastModified","size","files","Contents","ETag","Key","LastModified","Size","styles","StyleSheet","textInput","marginTop","InputField","control","label","render","field","value","onChange","onBlur","TextInput","onChangeText","text","console","log","style","SaveCredentialsForm","useContext","appState","setAppState","useForm","defaultValues","handleSubmit","getValues","reset","useEffect","useState","setSaved","React","visible","setVisible","onToggleSnackBar","container","flex","inner","padding","justifyContent","header","fontSize","marginBottom","height","borderColor","borderBottomWidth","snackBarContainer","KeyboardAvoidingView","behavior","Platform","OS","Card","Text","variant","Actions","Button","onPress","data","setTimeout","s3Client","accessKeyId","secretAccessKey","Bucket","catch","View","Snackbar","onDismiss","action","ApiConfiguration","S3TypeToInternalAdapter","assets","asset","fileName","replace","assetId","fileSize","updatedAt","isFolder","length","ContextMenu","dayjs","extend","relativeTime","icon","filename","iconType","exec","Feather","color","DataGridColumns","columnHelper","createColumnHelper","accessor","id","cell","info","row","original","getValue","slice","prettyBytes","fromNow","display","filter","flexBasis","paddingRight","cellFirstChild","alignItems","DataGrid","isLoading","setData","currentPage","setCurrentPage","table","useReactTable","columns","getCoreRowModel","getPaginationRowModel","setPageSize","DataTable","getHeaderGroups","headerGroup","headers","index","Title","isPlaceholder","flexRender","column","columnDef","getContext","ScrollView","onScroll","layoutMeasurement","contentOffset","contentSize","y","isCloseToBottom","nativeEvent","ActivityIndicator","animating","getRowModel","rows","Row","getVisibleCells","Cell","Pagination","page","getState","pagination","pageIndex","numberOfPages","getPageCount","onPageChange","setPageIndex","centeredView","modalView","margin","width","backgroundColor","borderRadius","shadowColor","shadowOffset","shadowOpacity","shadowRadius","elevation","button","buttonOpen","buttonClose","textStyle","fontWeight","textAlign","modalText","AppModal","isVisible","onClose","children","Modal","animationType","transparent","onRequestClose","Alert","alert","Pressable","TextLink","isUnderlined","underline","textDecorationLine","getScreenType","px","window","Dimensions","get","screen","screenType","Block","hidden","dimensions","setDimensions","subscription","addEventListener","remove","hideContent","includes","ThemeContextInternal","marginVertical","Preview","theme","main","IconButton","closeButton","section2","centered","textCenter","horizontal","flexGrow","flexDirection","minWidth","ListAssets","selectedAsset","setSelectedAsset","isExtended","setIsExtended","rerun","setRerun","useMemo","useS3Client","s3Initialized","Delimiter","dataQuery","setDataQuery","clientInitialized","queryResponse","useQuery","error","enabled","refetchOnWindowFocus","useGetAssets","isError","setPrefix","dirPathArray","split","dirPath","isLastFragment","newPrefix","join","goToPrefixByIndex","Ionicons","hostName","animated","Math","random","substring","lastIndexOf","goBack","root","section1","path","FAB","fabStyle","errorMessage","bottom","right","position","borderRightWidth","Dashboard","MobileNavigation","setIndex","key","focusedIcon","routes","renderScene","BottomNavigation","SceneMap","api_configuration","navigationState","onIndexChange","storeData","AsyncStorage","setItem","JSON","stringify","e","getData","getItem","parseJson","jsonString","parse","getApplicationStateLS","defaultValue","setApplicationStateLS","DefaultTheme","roundness","version","colors","ThemeProvider","App","themeState","routingState","d","setD","isLoaded","setIsLoaded","then","useGetApplicationStateFromLs","savedApplicationData","applicationState","applicationStateData","setApplicationStateData","Provider","isReady","route","internalRoutes","component","showInNavigation","BasicProvider","setRoutingState","queryClient","QueryClient","QueryProvider","ExportApp","registerRootComponent"],"mappings":"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","file":"static/js/app.3c611bab.chunk.js","sourcesContent":["import { createContext } from 'react'\r\n\r\nexport const RoutingContext = createContext(Object.create(null))\r\n","/**\r\n * This context will hold all of our application data like the current\r\n * user's api Keys, currently viewed directory, etc\r\n */\r\n\r\nimport { S3Client } from '@aws-sdk/client-s3'\r\nimport React, { createContext } from 'react'\r\n\r\nexport interface ApplicationState {\r\n  s3credentials: {\r\n    apiKey: string | undefined\r\n    apiSecret: string | undefined\r\n    region: string | undefined\r\n    endpoint: string | undefined\r\n    bucket: string | undefined\r\n  }\r\n  otherStuff: string\r\n  s3client: S3Client | undefined\r\n}\r\n\r\nexport const initialData: ApplicationState = {\r\n  s3credentials: {\r\n    apiKey: undefined,\r\n    apiSecret: undefined,\r\n    region: undefined,\r\n    endpoint: undefined,\r\n    bucket: undefined\r\n  },\r\n  s3client: undefined,\r\n  otherStuff: ''\r\n}\r\n\r\nexport type ApplicationContextType = [\r\n  ApplicationState,\r\n  React.Dispatch<React.SetStateAction<ApplicationState>>\r\n]\r\n\r\nexport const ApplicationContext = createContext<ApplicationContextType>(\r\n  Object.create(null)\r\n)\r\n","import React from 'react'\nimport { Appbar } from 'react-native-paper'\nimport { PortalHost } from '@gorhom/portal'\nconst Header = (props: any): JSX.Element => (\n  <Appbar.Header mode='center-aligned' elevated={true}>\n    <PortalHost name=\"Back\" />\n    <Appbar.Content title={props.title} />\n    <PortalHost name=\"Reloader\" />\n  </Appbar.Header>\n)\n\nexport default Header\n","import { S3Client, ListObjectsCommand } from '@aws-sdk/client-s3'\r\nimport { S3Initializer, GetAssetArgs, Asset } from './types'\r\nimport 'react-native-url-polyfill/auto'\r\nimport 'react-native-get-random-values'\r\n// eslint-disable-next-line\r\nimport { v4 as uuidv4 } from 'uuid'\r\n\r\nexport const buildS3Client = (initializationData: S3Initializer): S3Client => {\r\n  const { credentials, region, endpoint } = initializationData\r\n  const client = new S3Client({\r\n    region,\r\n    credentials,\r\n    endpoint\r\n  })\r\n  client.middlewareStack.add(\r\n    (next, context) => async (args) => {\r\n      // args.request.headers[\"Custom-Header\"] = \"value\";\r\n      // eslint-disable-next-line\r\n            // @ts-ignore\r\n      // delete args.request.headers[\"amz-sdk-request\"];\r\n      // delete args.request.headers[\"amz-sdk-invocation-id\"];//x-amz-content-sha256\r\n      // delete args.request.headers[\"x-amz-content-sha256\"];\r\n      // args.request.headers[\"date\"] = (new Date()).toUTCString();\r\n      // delete args.request.headers[\"x-amz-date\"];\r\n      // delete args.request.headers[\"x-amz-user-agent\"];\r\n      const result = await next(args)\r\n      return result\r\n    },\r\n    {\r\n      step: 'finalizeRequest',\r\n      name: 'removeHeaders'\r\n    }\r\n  )\r\n  return client\r\n}\r\n\r\nexport const getAssets: (\r\n  client: S3Client,\r\n  params: GetAssetArgs\r\n) => Promise<Asset[] | undefined> = async (client, params) => {\r\n  const command = new ListObjectsCommand(params)\r\n\r\n  const response = await client.send(command)\r\n  const folders: Asset[] =\r\n        (((response.CommonPrefixes?.map((item) => {\r\n          return {\r\n            prefix: item.Prefix,\r\n            etag: undefined,\r\n            name: item.Prefix,\r\n            lastModified: undefined,\r\n            size: 0\r\n          }\r\n        })))) || []\r\n  const files: Asset[] =\r\n        (((response.Contents?.map((item) => {\r\n          return {\r\n            prefix: '',\r\n            etag: item.ETag,\r\n            name: item?.Key,\r\n            lastModified: item?.LastModified,\r\n            size: item?.Size\r\n          }\r\n        })))) || []\r\n  return [...folders, ...files]\r\n}\r\n\r\nexport const deleteAsset: (assetId: string) => void = (_assetId) => {\r\n  /**\r\n     * Implementation here\r\n     */\r\n}\r\n","import { Controller } from 'react-hook-form'\nimport { StyleSheet } from 'react-native'\nimport { TextInput } from 'react-native-paper'\nimport React from 'react'\n\nconst styles = StyleSheet.create({\n  textInput: {\n    // borderColor: \"#000000\",\n    // borderBottomWidth: 1,\n    marginTop: 20\n  }\n})\n\nexport const InputField: (props: any) => JSX.Element = ({ control, name, label }: any) => {\n  if (control === undefined) {\n    return null\n  }\n  /* const {\n          field: { onChange, onBlur, value, ref },\n          fieldState: { invalid, isTouched, isDirty },\n          formState: { touchedFields, dirtyFields }\n      } = useController({\n          name,\n          control,\n          rules: { required: true },\n          defaultValue: \"\",\n      }); */\n\n  return <>\n        <Controller\n            control={control}\n            name={name}\n            render={({ field: { value, onChange, onBlur } }: any) => {\n              return <>\n                    <TextInput\n                        label={label}\n                        value={value}\n                        onChangeText={(text) => {\n                          console.log('[InputChange] name = ', name, ' value = ', text)\n                          onChange(text)\n                        }}\n                        onBlur={onBlur}\n                        style={styles.textInput}\n                    />\n                </>\n            }}\n        />\n    </>\n}\n","import React, { useContext, useEffect, useState } from 'react'\nimport { useForm } from 'react-hook-form'\nimport { ApplicationContext } from '../../contexts/application/ApplicationContext'\nimport { buildS3Client, getAssets } from '../../services/s3'\nimport { Text, Card, Snackbar } from 'react-native-paper'\nimport { InputField } from '../Input/InputField'\nimport { Button } from '../Button'\nimport { KeyboardAvoidingView, Platform, StyleSheet, View } from 'react-native'\nimport { S3Client } from '@aws-sdk/client-s3'\n\nexport const SaveCredentialsForm: React.FC = () => {\n  const [appState, setAppState] = useContext(ApplicationContext)\n  const { s3credentials } = appState\n  const { control, handleSubmit, getValues, reset } = useForm({\n    defaultValues: s3credentials\n  })\n\n  useEffect(() => {\n    reset(s3credentials)\n  }, [s3credentials])\n\n  const [, setSaved] = useState(false)\n\n  const onSubmit = (): void => {\n    console.log('Submitting form')\n    onToggleSnackBar()\n    const data = getValues()\n    setAppState({\n      ...appState,\n      s3credentials: data as any,\n      s3client: undefined\n    })\n    setSaved(true)\n    setTimeout(() => {\n      setSaved(false)\n    }, 1000)\n    /**\n         * Build the s3 client here\n         */\n    const s3Client: S3Client = buildS3Client({\n      credentials: {\n        accessKeyId: data.apiKey,\n        secretAccessKey: data.apiSecret\n      },\n      region: data.region,\n      endpoint: data.endpoint\n    })\n\n    getAssets(s3Client, { Bucket: 'testinghumza' }).catch(() => {\n      console.log('[SaveCredentialsForm] Promise failure getAssets')\n    })\n  }\n\n  // snackbar\n  const [visible, setVisible] = React.useState<boolean>(false)\n  const onToggleSnackBar: () => void = () => setVisible(!visible)\n  const onDismissSnackBar: () => void = () => setVisible(false)\n\n  const styles = StyleSheet.create({\n    container: {\n      flex: 1\n    },\n    inner: {\n      padding: 24,\n      flex: 1,\n      justifyContent: 'space-around'\n    },\n    header: {\n      fontSize: 36,\n      marginBottom: 48\n    },\n    textInput: {\n      height: 40,\n      borderColor: '#000000',\n      borderBottomWidth: 1,\n      marginBottom: 36\n    },\n    snackBarContainer: {\n      flex: 1,\n      justifyContent: 'space-between'\n    }\n  })\n\n  return (\n        <KeyboardAvoidingView\n            behavior={Platform.OS === 'ios' ? 'padding' : 'height'}\n            style={styles.container}\n        >\n            <Card>\n                <Card.Content>\n                    <Text variant=\"headlineSmall\">API Configuration</Text>\n                    <InputField\n                        control={control}\n                        name=\"apiKey\"\n                        label=\"API KEY\"\n                    />\n\n                    <InputField\n                        control={control}\n                        name=\"apiSecret\"\n                        label=\"Api Secret\"\n                    />\n\n                    <InputField\n                        control={control}\n                        name=\"endpoint\"\n                        label=\"Endpoint\"\n                    />\n\n                    <InputField\n                        control={control}\n                        name=\"bucket\"\n                        label=\"Bucket\"\n                    />\n\n                    <InputField\n                        control={control}\n                        name=\"region\"\n                        label=\"Region\"\n                    />\n                </Card.Content>\n                <Card.Actions>\n                    {/* eslint-disable-next-line */}\n                    <Button onPress={handleSubmit(onSubmit)}>Submit</Button>\n                </Card.Actions>\n            </Card>\n            <View style={styles.snackBarContainer}>\n                <Snackbar\n                    visible={visible}\n                    onDismiss={onDismissSnackBar}\n                    action={{\n                      label: 'Dismiss',\n                      onPress: () => {\n                        // Do something\n                      }\n                    }}\n                >\n                    Credentials are saved!\n                </Snackbar>\n            </View>\n        </KeyboardAvoidingView>\n  )\n}\n","import { SaveCredentialsForm } from '../SaveCredentialsForm'\nimport React from 'react'\n\nexport const ApiConfiguration: React.FC = () => {\n  /**\n   **\n   Testing online code editor\n   * **/\n  return <SaveCredentialsForm />\n}\n","import { Asset, GetAssetArgs } from '../services/s3/types'\nimport { Asset as AppAssetType } from '../services/types'\nexport const S3TypeToInternalAdapter = (assets: Asset[], params: GetAssetArgs): AppAssetType[] => {\n  return assets.map((asset: Asset) => {\n    const fileName: string = asset.name.replace(params.Prefix, '')\n    const appAsset: AppAssetType = {\n      assetId: asset.etag,\n      fileName,\n      fileSize: asset.size,\n      updatedAt: asset.lastModified,\n      isFolder: asset.prefix?.length > 0,\n      prefix: asset.prefix\n    }\n    return appAsset\n  })\n}\n","import React from 'react'\n\nexport const ContextMenu: React.FC = () => {\n  /*\n  const [anchorEl] = React.useState<null | HTMLElement>(null)\n  const open = Boolean(anchorEl) */\n  /*\n  const _handleClick = (event: React.MouseEvent<HTMLElement>) => {\n    setAnchorEl(event.currentTarget);\n  };\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n  */\n\n  return (\n    <>\n    </>)\n}\n","import React from 'react'\nimport { ContextMenu } from '../ContextMenu'\nimport { createColumnHelper } from '@tanstack/react-table'\nimport { Asset } from '../../services/types'\nimport prettyBytes from 'pretty-bytes'\nimport dayjs from 'dayjs'\nimport relativeTime from 'dayjs/plugin/relativeTime'\nimport { Feather } from '@expo/vector-icons'\nimport { Platform, StyleSheet } from 'react-native'\nimport { Text } from 'react-native-paper'\n\ndayjs.extend(relativeTime)\n\nconst styles = StyleSheet.create({\n  icon: {},\n  filename: {}\n})\n\n// icons for different file types or folders\nconst iconType = (asset: Asset): JSX.Element => {\n  const re = /(?:\\.([^.]+))?$/\n  const internalType = asset.isFolder\n    ? 'folder'\n    : re.exec(asset.fileName)[1] || ''\n\n  switch (internalType) {\n    case 'folder':\n      return (\n                <Feather\n                    name=\"folder\"\n                    color=\"#ffbd43\"\n                    size={22}\n                    style={styles.icon}\n                />\n      )\n    case 'txt':\n      return (\n                <Feather\n                    name=\"file-text\"\n                    color=\"#6565d6\"\n                    size={22}\n                    style={styles.icon}\n                />\n      )\n    default:\n      return (\n                <Feather\n                    name=\"file\"\n                    color=\"#6565d6\"\n                    size={22}\n                    style={styles.icon}\n                />\n      )\n  }\n}\n\nexport const DataGridColumns: any = () => {\n  const columnHelper = createColumnHelper<Asset>()\n  const columns: any = [\n    // Dispaly file name with icon\n    columnHelper.accessor('fileName', {\n      id: 'fileName',\n      header: 'Name',\n      cell: (info) => {\n        const row = info.row.original\n        const fileName = row.isFolder\n          ? info.getValue().slice(0, -1)\n          : info.getValue()\n        return (\n                    <>\n                        <Text variant=\"bodyLarge\" style={styles.filename}>\n                            {iconType(row)} &nbsp;\n                            {fileName}\n                        </Text>\n                    </>\n        )\n      }\n    }),\n\n    // Display file size\n    columnHelper.accessor('fileSize', {\n      id: 'fileSize',\n      header: 'Size',\n      cell: (info) => (\n                <Text>\n                    {!info.row.original.isFolder &&\n                        prettyBytes(info.getValue())}\n                </Text>\n      )\n    }),\n\n    // Dispaly last modified\n    columnHelper.accessor('updatedAt', {\n      id: 'updatedAt',\n      header: 'Last Modified',\n      cell: (info) => {\n        return (\n                    <Text>\n                        {!info.row.original.isFolder &&\n                            dayjs(info.getValue()).fromNow()}\n                    </Text>\n        )\n      }\n    }),\n\n    // Display column size\n    columnHelper.display({\n      id: 'actions',\n      cell: () => <ContextMenu />\n    })\n  ].filter((item) => {\n    return Platform.OS !== 'web' ? item.id === 'fileName' : true\n  })\n  return columns\n}\n","import React, { Fragment, useEffect, useState } from 'react'\nimport {\n  flexRender,\n  getCoreRowModel,\n  getPaginationRowModel,\n  useReactTable\n} from '@tanstack/react-table'\nimport { ActivityIndicator, DataTable, Text } from 'react-native-paper'\nimport { ScrollView, StyleSheet } from 'react-native'\nimport { DataGridColumns } from './dataGridColumns'\nimport { Asset } from '../../services/types'\n\nconst styles = StyleSheet.create({\n  cell: {\n    flexBasis: 'auto',\n    paddingRight: '30px'\n  },\n  cellFirstChild: {\n    flexBasis: '78%'\n  },\n  title: {\n    display: 'flex',\n    alignItems: 'center'\n  }\n})\n\nexport interface DataGridProps {\n  assets: Asset[] | undefined\n  onPress: (asset: Asset) => void\n  isLoading: boolean\n}\n\nexport const DataGrid: (props: DataGridProps) => JSX.Element = ({\n  assets,\n  onPress,\n  isLoading\n}: DataGridProps) => {\n  const [data, setData] = React.useState<Asset[]>(() => assets || [])\n  const [currentPage, setCurrentPage] = useState(1)\n  useEffect(() => {\n    setData(assets || [])\n    setCurrentPage(1)\n  }, [assets])\n  const table = useReactTable({\n    data,\n    columns: DataGridColumns(),\n    getCoreRowModel: getCoreRowModel(),\n    getPaginationRowModel: getPaginationRowModel()\n  })\n\n  useEffect(() => {\n    table.setPageSize(20 * currentPage)\n  }, [currentPage])\n\n  const isCloseToBottom = ({\n    layoutMeasurement,\n    contentOffset,\n    contentSize\n  }): boolean => {\n    const paddingToBottom = 20\n    return (\n      /* eslint-disable */\n      layoutMeasurement.height + contentOffset.y >=\n      contentSize.height - paddingToBottom\n      /* eslint-enable */\n    )\n  }\n\n  return (\n    <>\n      <DataTable.Header>\n        {table.getHeaderGroups().map((headerGroup) => (\n          <Fragment key={headerGroup.id}>\n            {headerGroup.headers.map((header, index) => (\n              <DataTable.Title\n                key={header.id}\n                style={index === 0 ? styles.cellFirstChild : styles.cell}\n              >\n                <Text>\n                  {header.isPlaceholder\n                    ? null\n                    : flexRender(\n                      header.column.columnDef.header,\n                      header.getContext()\n                    )}\n                </Text>\n              </DataTable.Title>\n            ))}\n          </Fragment>\n        ))}\n      </DataTable.Header>\n      <ScrollView\n        onScroll={({ nativeEvent }) => {\n          if (isCloseToBottom(nativeEvent)) {\n            console.log('[Scroll] Scroll close to bottom')\n            setCurrentPage(currentPage + 1)\n            // table.setPageSize(20 * 2)\n          }\n        }}\n      >\n        <DataTable>\n          {isLoading && <ActivityIndicator animating />}\n          {table.getRowModel().rows.map((row) => (\n            <DataTable.Row\n              key={row.id}\n              onPress={() => {\n                onPress(row.original)\n              }}\n            >\n              {row.getVisibleCells().map((cell, index) => (\n                <DataTable.Cell\n                  key={cell.id}\n                  style={index === 0 ? styles.cellFirstChild : styles.cell}\n                >\n                  {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                </DataTable.Cell>\n              ))}\n            </DataTable.Row>\n          ))}\n          <DataTable.Pagination\n            page={table.getState().pagination.pageIndex + 1}\n            numberOfPages={table.getPageCount()}\n            onPageChange={(page) => table.setPageIndex(page - 1)}\n            label={`${\n              table.getState().pagination.pageIndex + 1\n            } of ${table.getPageCount()}`}\n          />\n        </DataTable>\n      </ScrollView>\n    </>\n  )\n}\n","import React from 'react'\nimport { Alert, Modal, StyleSheet, Text, Pressable, View } from 'react-native'\n\nexport interface ModalProps {\n  isVisible: boolean\n  onClose: () => void\n}\n\nconst AppModal = ({\n  isVisible,\n  onClose,\n  children\n}: React.PropsWithChildren<ModalProps>): JSX.Element => {\n  if (!isVisible) {\n    return null\n  }\n  return (\n        <View style={styles.centeredView}>\n            <Modal\n                animationType=\"slide\"\n                transparent={true}\n                visible={isVisible}\n                onRequestClose={() => {\n                  Alert.alert('Modal has been closed.')\n                  onClose()\n                }}\n            >\n                <View style={styles.centeredView}>\n                    <View style={styles.modalView}>\n                        {children}\n                        <Pressable\n                            style={[styles.button, styles.buttonClose]}\n                            onPress={() => onClose()}\n                        >\n                            <Text style={styles.textStyle}>Hide Modal</Text>\n                        </Pressable>\n                    </View>\n                </View>\n            </Modal>\n        </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  centeredView: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginTop: 22\n  },\n  modalView: {\n    margin: 20,\n    width: 200,\n    backgroundColor: 'white',\n    borderRadius: 20,\n    padding: 35,\n    alignItems: 'center',\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 2\n    },\n    shadowOpacity: 0.25,\n    shadowRadius: 4,\n    elevation: 5\n  },\n  button: {\n    borderRadius: 20,\n    padding: 10,\n    elevation: 2\n  },\n  buttonOpen: {\n    backgroundColor: '#F194FF'\n  },\n  buttonClose: {\n    backgroundColor: '#2196F3'\n  },\n  textStyle: {\n    color: 'white',\n    fontWeight: 'bold',\n    textAlign: 'center'\n  },\n  modalText: {\n    marginBottom: 15,\n    textAlign: 'center'\n  }\n})\n\nexport default AppModal\n","import React, { PropsWithChildren } from 'react'\nimport { StyleSheet } from 'react-native'\nimport { Text, TextProps } from 'react-native-paper'\n\nexport interface TextLinkProps {\n  isUnderlined: boolean\n}\n\nexport const TextLink = ({\n  children,\n  isUnderlined,\n  ...args\n}: PropsWithChildren<TextLinkProps & TextProps>): JSX.Element => {\n  return (\n        <Text {...args} style={isUnderlined ? [styles.underline] : []}>\n            {children}\n        </Text>\n  )\n}\n\nconst styles = StyleSheet.create({\n  underline: {\n    textDecorationLine: 'underline'\n  }\n})\n","import {\n  View,\n  StyleSheet,\n  Text,\n  Dimensions,\n  EmitterSubscription\n} from 'react-native'\nimport React, { useState, useEffect } from 'react'\n\nexport type ScreenType = 'xs' | 'sm' | 'md' | 'lg' | 'xl' | 'xxl'\n\nexport interface BlockType {\n  hidden?: ScreenType[]\n}\n\nconst getScreenType = (px: number): ScreenType => {\n  if (px < 576) {\n    return 'xs'\n  } else if (px >= 576 && px < 768) {\n    return 'md'\n  } else if (px >= 768 && px < 992) {\n    return 'lg'\n  } else if (px >= 992 && px < 1200) {\n    return 'xl'\n  } else if (px >= 1200) {\n    return 'xxl'\n  }\n}\n\nconst window = Dimensions.get('window')\nconst screen = Dimensions.get('screen')\nconst screenType: ScreenType = getScreenType(window.width)\nexport const Block = ({\n  hidden,\n  children\n}: React.PropsWithChildren<BlockType>): JSX.Element => {\n  const [dimensions, setDimensions] = useState({ window, screen, screenType })\n  useEffect(() => {\n    const subscription: EmitterSubscription = Dimensions.addEventListener(\n      'change',\n      ({ window, screen }) => {\n        const screenType: ScreenType = getScreenType(window.width)\n        setDimensions({ window, screen, screenType })\n      }\n    )\n    return () => subscription?.remove()\n  }, [])\n\n  /**\n   * A simple function to debug the current dimensions\n   * @returns\n   */\n  // eslint-disable-next-line\n  const getDebug: React.FC = () => (\n    <>\n      <Text>Current type: {dimensions.screenType}</Text>\n      <Text style={styles.header}>Window Dimensions</Text>\n      {Object.entries(dimensions.window).map(([key, value]) => (\n        <Text key={key}>\n          {key} - {value}\n        </Text>\n      ))}\n      <Text style={styles.header}>Screen Dimensions</Text>\n      {Object.entries(dimensions.screen).map(([key, value]) => (\n        <Text key={key}>\n          {key} - {value}\n        </Text>\n      ))}\n    </>\n  )\n\n  const hideContent = hidden ? hidden.includes(dimensions.screenType) : false\n\n  return <>{!hideContent && <View>{children}</View>}</>\n}\n\nconst styles = StyleSheet.create({\n  header: {\n    fontSize: 16,\n    marginVertical: 10\n  }\n})\n","/**\n * This context will hold all of our application data like the current\n * user's api Keys, currently viewed directory, etc\n */\n\nimport React, { createContext } from 'react'\n\nexport const initialData: Object = {\n\n}\n\nexport type ThemeContextType = [\n  Object,\n  React.Dispatch<React.SetStateAction<Object>>\n]\n\nexport const ThemeContextInternal = createContext<ThemeContextType>(\n  Object.create({})\n)\n","import React, { useContext } from 'react'\nimport { Feather } from '@expo/vector-icons'\nimport { StyleSheet, View } from 'react-native'\nimport { IconButton, Text } from 'react-native-paper'\nimport { Block } from '../../services/rn-responsive-design'\nimport { Asset } from '../../services/types'\nimport { ThemeContextInternal } from '../../contexts/theme/ThemeContextInternal'\n\nexport interface PreviewPropsType {\n  asset: Asset\n  onClose: () => void\n}\n\nconst Preview = ({ asset, onClose }: PreviewPropsType): JSX.Element => {\n  const [theme] = useContext(ThemeContextInternal)\n\n  return (\n    <>\n      <Block hidden={['xs', 'md']}>\n        <View style={styles.main}>\n          <IconButton\n            theme={theme}\n            icon=\"close\"\n            onPress={onClose}\n            style={styles.closeButton}\n          />\n          <View style={[styles.section2, styles.centered]}>\n            <Text\n              variant=\"headlineSmall\"\n              style={[styles.textCenter, styles.marginBottom]}\n            >\n              <Feather theme={theme} name=\"file\" size={100} />\n            </Text>\n            <Text variant=\"headlineSmall\" style={styles.textCenter}>\n              {asset?.fileName}\n            </Text>\n            <View style={[styles.centered, styles.horizontal]}>\n              <IconButton theme={theme} icon=\"pencil\" onPress={onClose} />\n              <IconButton theme={theme} icon=\"trash-can\" onPress={onClose} />\n            </View>\n          </View>\n        </View>\n      </Block>\n    </>\n  )\n}\n\nconst styles = StyleSheet.create({\n  main: {\n    display: 'flex',\n    flexGrow: 1\n  },\n  closeButton: {\n    display: 'flex',\n    textAlign: 'right',\n    height: 50\n  },\n  marginBottom: {\n    marginBottom: 10\n  },\n  textCenter: {\n    textAlign: 'center'\n  },\n  centered: {\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  horizontal: {\n    flexDirection: 'row'\n  },\n  section2: {\n    minWidth: '30vw',\n    flex: 1,\n    flexGrow: 1,\n    margin: 20\n  }\n})\n\nexport { Preview }\n","import React, { useContext, useEffect, useState } from 'react'\nimport { StyleSheet, View } from 'react-native'\nimport { Ionicons } from '@expo/vector-icons'\nimport { Text, IconButton, Card, FAB } from 'react-native-paper'\nimport { Portal } from '@gorhom/portal'\nimport {\n  ApplicationContext,\n  ApplicationContextType\n} from '../../contexts/application/ApplicationContext'\nimport { useGetAssets } from '../../hooks/useGetAssets'\nimport { useS3Client } from '../../hooks/useS3Client'\nimport { DataGrid } from '../DataGrid'\n\nimport { Asset } from '../../services/types'\nimport { GetAssetArgs } from '../../services/s3/types'\nimport AppModal from '../Modal'\nimport { TextLink } from '../TextLink'\nimport { Preview } from '../Preview'\n\nexport const ListAssets: React.FC = () => {\n  const [selectedAsset, setSelectedAsset] = useState<Asset | undefined>(\n    undefined\n  )\n  const [isExtended, setIsExtended] = React.useState(false)\n  const [rerun, setRerun] = useState('')\n  const [appState] = useContext<ApplicationContextType>(ApplicationContext)\n  const [s3client, s3Initialized] = useS3Client(appState)\n  const [dataQuery, setDataQuery] = useState<GetAssetArgs>({\n    Bucket: appState.s3credentials.bucket,\n    Prefix: '',\n    Delimiter: '/'\n  })\n  useEffect(() => {\n    setDataQuery({ ...dataQuery, Bucket: appState.s3credentials.bucket })\n  }, [appState, s3client])\n\n  const { data, isLoading, isError } = useGetAssets(\n    s3client,\n    s3Initialized,\n    dataQuery,\n    rerun\n  )\n\n  const setPrefix = (prefix: string): void => {\n    setDataQuery({ ...dataQuery, Prefix: prefix })\n  }\n  const onPress = (asset: Asset): void => {\n    if (asset.isFolder) {\n      setPrefix(asset.prefix)\n    } else {\n      setSelectedAsset(asset)\n    }\n  }\n\n  const goBack: () => void = () => {\n    const prefix = dataQuery.Prefix\n    if (prefix !== '') {\n      const newPrefix = prefix.substring(\n        0,\n        prefix.substring(0, prefix.length - 1).lastIndexOf('/') + 1\n      )\n      setPrefix(newPrefix)\n    }\n  }\n\n  const goToPrefixByIndex = (index: number): void => {\n    const dirPathArray = dataQuery.Prefix?.split('/')\n    const newPrefix = `${dirPathArray.slice(0, index).join('/')}/`\n    setPrefix(newPrefix === '/' ? '' : newPrefix)\n  }\n\n  const dirPathArray = ['bucket', ...dataQuery.Prefix?.split('/')]\n  const dirPath = dirPathArray.map((item, index) => {\n    const isLastFragment = index === dirPathArray?.length - 1\n    return (\n      <TextLink\n        key={`dirPath${index}`}\n        isUnderlined={!isLastFragment}\n        onPress={() => {\n          goToPrefixByIndex(index)\n        }}\n      >\n        /\n        {!isLastFragment && (\n          <Ionicons name=\"folder-open-outline\" color=\"#ffbd43\" size={22} />\n        )}\n        {item}\n      </TextLink>\n    )\n  })\n\n  /* eslint-disable */\n  return (\n    <>\n      {s3Initialized ? (\n        <>\n          <Portal hostName=\"Reloader\">\n            <IconButton\n              animated\n              icon=\"reload\"\n              onPress={() => {\n                setRerun(`${Math.random()}`)\n              }}\n            />\n          </Portal>\n          <Portal hostName=\"Back\">\n            {dataQuery.Prefix?.length > 0 && (\n              <IconButton\n                icon=\"arrow-left\"\n                onPress={() => {\n                  goBack()\n                }}\n              />\n            )}\n          </Portal>\n          <View style={styles.root}>\n            <View style={styles.section1}>\n              {isError && <Text variant=\"headlineSmall\">Error </Text>}\n              <Text variant=\"bodyMedium\" style={styles.path}>\n                {dirPath}\n              </Text>\n              <AppModal\n                isVisible={isExtended}\n                onClose={() => {\n                  setIsExtended(false)\n                }}\n              >\n                <Text>Upload files here</Text>\n              </AppModal>\n\n              <DataGrid assets={data} onPress={onPress} isLoading={isLoading} />\n\n              <FAB\n                icon=\"plus\"\n                onPress={() => setIsExtended(!isExtended)}\n                visible\n                style={[styles.fabStyle]}\n              />\n            </View>\n            {selectedAsset && (\n              <Preview\n                onClose={() => setSelectedAsset(undefined)}\n                asset={selectedAsset}\n              />\n            )}\n          </View>\n        </>\n      ) : (\n        <Card style={styles.errorMessage}>\n          <Text>\n            S3 Client has not been initialized, please update your API\n            Configuration first.\n          </Text>\n        </Card>\n      )}\n    </>\n    /* eslint-enable */\n  )\n}\n\nconst styles = StyleSheet.create({\n  path: {\n    margin: 10\n  },\n  fabStyle: {\n    bottom: 45,\n    right: 25,\n    position: 'absolute'\n  },\n  errorMessage: {\n    margin: 12,\n    padding: 10\n  },\n  root: {\n    flexDirection: 'row',\n    display: 'flex',\n    flex: 1,\n    flexGrow: 1\n  },\n  section1: {\n    flex: 3,\n    borderColor: 'gray',\n    borderRightWidth: 2,\n    flexDirection: 'column'\n  }\n})\n","import { S3Client } from '@aws-sdk/client-s3'\nimport { useMemo } from 'react'\nimport { ApplicationState } from '../contexts/application/ApplicationContext'\nimport { buildS3Client } from '../services/s3'\n\nexport const useS3Client: (appState: ApplicationState) => [S3Client | undefined, boolean] = (appState: ApplicationState) => {\n  const { s3credentials } = appState\n  const { apiKey, apiSecret, region, endpoint } = s3credentials\n  const [client, isInitialized] = useMemo(() => {\n    if (apiKey && apiSecret && endpoint) {\n      console.log('[useS3Client] Building S3 Client region = ', region)\n      console.log('[useS3Client] Building S3 Client apiKey = ', apiKey)\n\n      return [buildS3Client({\n        region,\n        credentials: {\n          accessKeyId: apiKey,\n          secretAccessKey: apiSecret\n        },\n        endpoint\n      }), true]\n    }\n    return [undefined, false]\n  }, [apiKey, apiSecret, region, endpoint])\n  return [client, isInitialized]\n}\n","import { S3Client } from '@aws-sdk/client-s3'\nimport { useQuery, UseQueryResult } from '@tanstack/react-query'\nimport { S3TypeToInternalAdapter } from '../adapters/s3'\nimport { getAssets } from '../services/s3'\nimport { GetAssetArgs } from '../services/s3/types'\nimport { Asset } from '../services/types'\n\nexport const useGetAssets = (client: S3Client, clientInitialized: boolean, params: GetAssetArgs, rerun: string = ''): UseQueryResult<Asset[], unknown> => {\n  const queryResponse = useQuery(['getAssets', rerun, params.Bucket || '', params.Delimiter || '', params.Prefix || ''], async () => {\n    try {\n      const data = await getAssets(client, params)\n      const assets = S3TypeToInternalAdapter(data, params)\n      return assets\n    } catch (error) {\n      console.log('[useGetAssets] Error : ', error)\n    }\n    return []\n  }, {\n    enabled: clientInitialized,\n    refetchOnWindowFocus: false\n  })\n  return queryResponse\n}\n","import React from 'react'\r\nimport { ListAssets } from '../../components/ListAssets'\r\n\r\nexport default function Dashboard (): JSX.Element {\r\n  return (\r\n    <ListAssets />\r\n  )\r\n}\r\n","import * as React from 'react'\nimport { BottomNavigation } from 'react-native-paper'\nimport { ApiConfiguration } from '../ApiConfiguration/index'\nimport Dashboard from '../../pages/dashboard'\n\nconst MobileNavigation: React.FC = () => {\n  const [index, setIndex] = React.useState(0)\n  const [routes] = React.useState([\n    { key: 'assets', title: 'Assets', focusedIcon: 'folder' },\n    { key: 'api_configuration', title: 'API Configuration', focusedIcon: 'cogs' }\n  ])\n\n  const renderScene = BottomNavigation.SceneMap({\n    assets: Dashboard,\n    api_configuration: ApiConfiguration\n  })\n\n  return (\n    <BottomNavigation\n      navigationState={{ index, routes }}\n      onIndexChange={setIndex}\n      renderScene={renderScene}\n    />\n  )\n}\n\nexport default MobileNavigation\n","import AsyncStorage from '@react-native-async-storage/async-storage'\nexport const ApplicationStorageKey = 'byos/application'\nexport const DomainStorageKey = 'byos/domain'\n\nconst storeData: (value: any) => Promise<void> = async (value: any) => {\n  try {\n    await AsyncStorage.setItem(ApplicationStorageKey, JSON.stringify(value))\n  } catch (e) {\n    // saving error\n  }\n}\n\nconst getData: () => Promise<string> = async () => {\n  try {\n    const value = await AsyncStorage.getItem(ApplicationStorageKey)\n    if (value !== null) {\n      // value previously stored\n      return value\n    }\n  } catch (e) {\n    // error reading value\n  }\n  return ''\n}\n\nconst parseJson: (jsonString: string) => any = (jsonString: string) => {\n  try {\n    return JSON.parse(jsonString)\n  } catch (error) {\n    return {}\n  }\n}\n\nexport const getApplicationStateLS: (defaultValue: string) => Promise<any> = async (defaultValue: string = '{}') => {\n  const value = await getData()\n  if (value) {\n    return parseJson(value)\n  }\n  return parseJson(defaultValue)\n}\n\n// eslint-disable-next-line @typescript-eslint/no-misused-promises\nexport const setApplicationStateLS: (value: Object) => void = async (value: any) => {\n  await storeData(value)\n  return null\n}\n","import { MD3LightTheme as DefaultTheme, MD3Theme } from 'react-native-paper'\n\nexport const theme: MD3Theme = {\n  ...DefaultTheme,\n  roundness: 2,\n  version: 3,\n  colors: {\n    ...DefaultTheme.colors\n  }\n}\n","import React, { useContext, useEffect, useState } from 'react'\r\n// import { HashRouter as Router, Routes, Route } from 'react-router-dom'\r\nimport { InternalRouteDef } from './routes'\r\n// import { Link } from 'react-router-dom'\r\nimport { RoutingContext } from './contexts/routing/RoutingContext'\r\nimport {\r\n  ApplicationContext,\r\n  initialData\r\n} from './contexts/application/ApplicationContext'\r\n/* import {\r\n    getApplicationStateLS,\r\n    setApplicationStateLS,\r\n} from './services/localstorage' */\r\nimport { Provider as PaperProvider } from 'react-native-paper'\r\nimport Header from './components/Header'\r\nimport MobileNavigation from './components/MobileNavigation'\r\nimport { setApplicationStateLS } from './services/localstorage'\r\nimport { useGetApplicationStateFromLs } from './hooks/useGetApplicationStateFromLS'\r\nimport { PortalProvider } from '@gorhom/portal'\r\nimport { theme } from './theme'\r\nimport { ThemeContextInternal } from './contexts/theme/ThemeContextInternal'\r\n\r\nfunction App (): JSX.Element {\r\n  const themeState = useState(theme)\r\n  const [routingState] = React.useContext(RoutingContext)\r\n  const { data: savedApplicationData, isLoaded } =\r\n    useGetApplicationStateFromLs(initialData)\r\n\r\n  const applicationState = useState(savedApplicationData)\r\n\r\n  /* useEffect(() => {\r\n        applicationState[1](savedApplicationData);\r\n    }, [savedApplicationData]) */\r\n\r\n  const [applicationStateData, setApplicationStateData] = applicationState\r\n\r\n  useEffect(() => {\r\n    // setApplicationStateLS({ ...applicationStateData })\r\n    setApplicationStateData(savedApplicationData)\r\n  }, [savedApplicationData])\r\n\r\n  useEffect(() => {\r\n    if (isLoaded) {\r\n      console.log(\r\n        '[App] Application state was updated = ',\r\n        applicationStateData\r\n      )\r\n\r\n      setApplicationStateLS({ ...applicationStateData })\r\n    }\r\n  }, [applicationStateData, isLoaded])\r\n\r\n  return (\r\n    <ThemeContextInternal.Provider value={themeState}>\r\n      <ThemeProvider>\r\n        <PortalProvider>\r\n          <ApplicationContext.Provider value={applicationState}>\r\n            {routingState.isReady &&\r\n              routingState.routes.map((route: InternalRouteDef) => {\r\n                return null\r\n              })}\r\n            <Header title=\"BYOS\" />\r\n            <MobileNavigation />\r\n          </ApplicationContext.Provider>\r\n        </PortalProvider>\r\n      </ThemeProvider>\r\n    </ThemeContextInternal.Provider>\r\n  )\r\n}\r\n\r\nconst ThemeProvider = ({ children }: React.PropsWithChildren): JSX.Element => {\r\n  const [theme] = useContext(ThemeContextInternal)\r\n  console.log('Current theme = ', theme)\r\n  return <PaperProvider theme={theme}>{children}</PaperProvider>\r\n}\r\n\r\nexport default App\r\n","import { useMemo, useState } from 'react'\nimport { ApplicationState } from '../contexts/application/ApplicationContext'\nimport { getApplicationStateLS } from '../services/localstorage'\n\ninterface ApplicationStateHookReturn {\n  data: ApplicationState | undefined\n  isLoaded: boolean\n}\n\nexport const useGetApplicationStateFromLs = (initialData: ApplicationState | undefined): ApplicationStateHookReturn => {\n  const [d, setD] = useState<ApplicationState | undefined>(initialData)\n  const [isLoaded, setIsLoaded] = useState(false)\n  useMemo(() => {\n    getApplicationStateLS(\n      JSON.stringify(initialData)\n    ).then(data => {\n      setD(data)\n      setIsLoaded(true)\n    })\n      .catch(() => {\n        console.log('[useGetApplicationStateFromLs] Promise failure getApplicationStateLS')\n      })\n  }, [initialData])\n\n  return { data: d, isLoaded }\n}\n","import React from 'react'\r\nimport Home from '../pages/home'\r\nimport Credentials from '../pages/credentials'\r\n\r\nexport interface InternalRouteDef {\r\n  path: string\r\n  component: JSX.Element\r\n  showInNavigation: boolean\r\n\r\n}\r\n\r\nexport interface RoutingObjectDef {\r\n  isReady: boolean\r\n  routes: InternalRouteDef\r\n}\r\n\r\nconst routes: InternalRouteDef[] = [\r\n  { path: '/credentials', component: <Credentials />, showInNavigation: true },\r\n  { path: '/', component: <Home />, showInNavigation: true }\r\n]\r\n\r\nconst internalRoutes = {\r\n  isReady: false,\r\n  routes\r\n}\r\n\r\nexport default internalRoutes\n","import React from 'react'\r\n// import { useLinkClickHandler } from 'react-router-dom'\r\nimport { SaveCredentialsForm } from '../../components/SaveCredentialsForm'\r\n// import { useNavigate } from 'react-router-dom'\r\n\r\nexport default function Credentials (): JSX.Element {\r\n  // const [isOpen, setIsOpen] = useState(false)\r\n  // const navigate = useNavigate()\r\n  // const onClick = useLinkClickHandler('/credentials')\r\n  // useEffect(() => {\r\n  //     setIsOpen(true)\r\n  // }, [onClick, setIsOpen])\r\n\r\n  // const handleClose = () => {\r\n  //     setIsOpen(false)\r\n  //     navigate('/')\r\n  // }\r\n\r\n  return (\r\n    <>\r\n      <SaveCredentialsForm />\r\n    </>\r\n  )\r\n}\r\n","import React from 'react'\n\nexport default function Home (): JSX.Element {\n  return (\n    <>\n    </>\n  )\n}\n","import React, { useEffect } from 'react'\r\nimport { RoutingContext } from '../contexts/routing/RoutingContext'\r\n\r\nexport const BasicProvider: (children: any) => JSX.Element = ({ children }: React.PropsWithChildren) => {\r\n  const [routingState, setRoutingState] = React.useContext(RoutingContext)\r\n  useEffect(() => {\r\n    if (routingState.isReady === false) {\r\n      setRoutingState({ ...routingState, isReady: true })\r\n    }\r\n    // eslint-disable-next-line\r\n  }, [routingState.isReady, routingState.routes])\r\n  return <>\r\n    {children}\r\n  </>\r\n}\r\n","import React from 'react'\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query'\n\nconst queryClient = new QueryClient()\n\nexport default function QueryProvider ({ children }: React.PropsWithChildren): JSX.Element {\n  return (\n    <QueryClientProvider client={queryClient}>\n      {children}\n    </QueryClientProvider>\n  )\n}\n","import React, { useState } from 'react'\r\nimport { RoutingContext } from '../contexts/routing/RoutingContext'\r\nimport routes from '../routes'\r\nimport { BasicProvider } from './BasicProvider'\r\nimport QueryProvider from './QueryProvider'\r\n\r\nexport const Provider = ({ children }: React.PropsWithChildren): JSX.Element => {\r\n  const routingState = useState(routes)\r\n\r\n  /**\r\n       if (useAzureLogin) {\r\n          return <QueryProvider>\r\n              <RoutingContext.Provider value={routingState}>\r\n                  <AzureAdProvider >\r\n                      {children}\r\n                  </AzureAdProvider>\r\n              </RoutingContext.Provider>\r\n          </QueryProvider>\r\n      }else\r\n      { */\r\n  return (\r\n        <QueryProvider>\r\n            <RoutingContext.Provider value={routingState}>\r\n                <BasicProvider>\r\n                    {children}\r\n                </BasicProvider>\r\n            </RoutingContext.Provider>\r\n        </QueryProvider>)\r\n}\r\n","import React from 'react'\nimport BAap from './App'\nimport { Provider } from './providers/Provider'\n\nconst ExportApp: React.FC = () => {\n  return (\n    <Provider>\n      <BAap />\n    </Provider>\n  )\n}\n\nexport default ExportApp\n","import { StatusBar } from 'expo-status-bar';\nimport { StyleSheet, Text, View } from 'react-native';\nimport BYOSApp from \"./src/ExportApp\";\nimport { registerRootComponent } from 'expo';\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\nexport default function App() {\n  return (\n      <BYOSApp/>\n  );\n}\nregisterRootComponent(App);\n\n\n\n","import { registerRootComponent } from 'expo';\n\nimport App from './App';\n\n// registerRootComponent calls AppRegistry.registerComponent('main', () => App);\n// It also ensures that whether you load the app in Expo Go or in a native build,\n// the environment is set up appropriately\nregisterRootComponent(App);\n"],"sourceRoot":""}