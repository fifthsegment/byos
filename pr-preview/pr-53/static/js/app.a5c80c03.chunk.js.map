{"version":3,"sources":["src/contexts/routing/RoutingContext.ts","src/contexts/application/ApplicationContext.ts","src/components/Header/index.tsx","src/services/s3/index.ts","src/components/Input/InputField.tsx","src/components/Button/index.tsx","src/components/Snackbar/Snackbar.tsx","src/components/SaveCredentialsForm/index.tsx","src/components/ApiConfiguration/index.tsx","src/adapters/s3.ts","src/components/ContextMenu/index.tsx","src/components/DataGrid/dataGridColumns.tsx","src/components/DataGrid/index.tsx","src/components/ListAssets/index.tsx","src/hooks/useS3Client.ts","src/hooks/useGetAssets.ts","src/pages/dashboard/index.tsx","src/components/MobileNavigation/index.tsx","src/services/localstorage/index.ts","src/App.tsx","src/hooks/useGetApplicationStateFromLS.ts","src/components/AppModal/index.tsx","src/routes/index.tsx","src/pages/credentials/index.tsx","src/pages/home/index.tsx","src/providers/BasicProvider.tsx","src/providers/QueryProvider.tsx","src/providers/Provider.tsx","src/ExportApp.tsx","App.js","index.js"],"names":["RoutingContext","createContext","Object","create","initialData","s3credentials","apiKey","undefined","apiSecret","region","endpoint","bucket","s3client","otherStuff","ApplicationContext","Header","props","Appbar","mode","elevated","Content","title","buildS3Client","initializationData","credentials","client","S3Client","middlewareStack","add","next","context","args","step","name","getAssets","params","console","log","command","ListObjectsCommand","response","send","folders","CommonPrefixes","map","item","prefix","Prefix","etag","lastModified","size","files","Contents","ETag","Key","LastModified","Size","splice","StyleSheet","input","height","margin","borderWidth","padding","InternalInputField","TextInput","InputField","control","label","styles","textInput","marginTop","render","field","value","onChange","onBlur","onChangeText","text","style","Button","Snackbar","SaveCredentialsForm","useContext","appState","setAppState","useForm","defaultValues","handleSubmit","getValues","formState","reset","useEffect","useState","setSaved","React","visible","setVisible","onToggleSnackBar","container","flex","inner","justifyContent","header","fontSize","marginBottom","borderColor","borderBottomWidth","snackBarContainer","ScrollView","KeyboardAvoidingView","behavior","Platform","OS","Surface","Card","Text","variant","Actions","onPress","data","setTimeout","s3Client","accessKeyId","secretAccessKey","Bucket","View","onDismiss","action","ApiConfiguration","S3TypeToInternalAdapter","assets","asset","fileName","replace","assetId","fileSize","updatedAt","isFolder","length","ContextMenu","anchorEl","Boolean","dayjs","extend","relativeTime","iconType","exec","AntDesign","Feather","DataGridColumns","columnHelper","createColumnHelper","accessor","cell","info","row","original","getValue","prettyBytes","fromNow","display","id","DataGrid","setData","table","useReactTable","columns","getCoreRowModel","DataTable","getHeaderGroups","headerGroup","headers","Title","isPlaceholder","flexRender","column","columnDef","getContext","getRowModel","rows","Row","getVisibleCells","Cell","ListAssets","rerun","setRerun","useMemo","useS3Client","Delimiter","dataQuery","setDataQuery","queryResponse","useQuery","error","useGetAssets","isLoading","isError","setPrefix","Math","random","newPrefix","substring","lastIndexOf","goBack","ActivityIndicator","animating","Dashboard","MobileNavigation","index","setIndex","key","focusedIcon","routes","renderScene","BottomNavigation","SceneMap","api_configuration","navigationState","onIndexChange","storeData","AsyncStorage","setItem","JSON","stringify","e","getData","getItem","parseJson","jsonString","parse","getApplicationStateLS","defaultValue","App","routingState","d","setD","isLoaded","setIsLoaded","then","useGetApplicationStateFromLs","savedApplicationData","applicationState","applicationStateData","setApplicationStateData","Provider","isReady","route","ViewVirtual","ButtonUntyped","AppModal","children","handleClose","isOpen","internalRoutes","path","component","showInNavigation","BasicProvider","setRoutingState","queryClient","QueryClient","QueryProvider","ExportApp","backgroundColor","alignItems","registerRootComponent"],"mappings":"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","file":"static/js/app.a5c80c03.chunk.js","sourcesContent":["import { createContext } from \"react\";\r\n\r\nexport const RoutingContext = createContext(Object.create(null));\r\n","/**\r\n * This context will hold all of our application data like the current\r\n * user's api Keys, currently viewed directory, etc\r\n */\r\n\r\nimport { S3Client } from '@aws-sdk/client-s3'\r\nimport React, { createContext } from 'react'\r\n\r\nexport type ApplicationState = {\r\n    s3credentials: {\r\n        apiKey: string | undefined\r\n        apiSecret: string | undefined\r\n        region: string | undefined\r\n        endpoint: string | undefined\r\n        bucket: string | undefined\r\n    }\r\n    otherStuff: string\r\n    s3client: S3Client | undefined\r\n}\r\n\r\nexport const initialData: ApplicationState = {\r\n    s3credentials: {\r\n        apiKey: undefined,\r\n        apiSecret: undefined,\r\n        region: undefined,\r\n        endpoint: undefined,\r\n        bucket: undefined,\r\n    },\r\n    s3client: undefined,\r\n    otherStuff: '',\r\n}\r\n\r\nexport type ApplicationContextType = [\r\n    ApplicationState,\r\n    React.Dispatch<React.SetStateAction<ApplicationState>>\r\n]\r\n\r\nexport const ApplicationContext = createContext<ApplicationContextType>(\r\n    Object.create(null)\r\n)\r\n","import { Appbar, Button } from 'react-native-paper';\n\nconst Header = (props: any) => (\n  <Appbar.Header mode='center-aligned' elevated={true}>\n    <Appbar.Content title={props.title} />\n  </Appbar.Header>\n);\n\nexport default Header","import { S3Client, ListObjectsCommand } from \"@aws-sdk/client-s3\";\r\nimport { S3Initializer, GetAssetArgs, Asset } from './types'\r\nimport 'react-native-url-polyfill/auto';\r\nimport 'react-native-get-random-values';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nexport const buildS3Client = (initializationData: S3Initializer) => {\r\n    const { credentials, region, endpoint } = initializationData\r\n    const client = new S3Client({\r\n        region: region,\r\n        credentials: credentials,\r\n        endpoint: endpoint,\r\n    })\r\n    client.middlewareStack.add((next, context) => async (args) => {\r\n        //args.request.headers[\"Custom-Header\"] = \"value\";\r\n        //eslint-disable-next-line\r\n        // @ts-ignore\r\n        //delete args.request.headers[\"amz-sdk-request\"];\r\n        // @ts-ignore\r\n        //delete args.request.headers[\"amz-sdk-invocation-id\"];//x-amz-content-sha256\r\n        // @ts-ignore\r\n        //delete args.request.headers[\"x-amz-content-sha256\"];\r\n        // @ts-ignore\r\n        //args.request.headers[\"date\"] = (new Date()).toUTCString();\r\n        // @ts-ignore\r\n        //delete args.request.headers[\"x-amz-date\"];\r\n        // @ts-ignore\r\n        //delete args.request.headers[\"x-amz-user-agent\"];\r\n        // @ts-ignore\r\n        const result = await next(args);\r\n        return result;\r\n    }, {\r\n        step: \"finalizeRequest\",\r\n        name: \"removeHeaders\",\r\n    })\r\n    return client\r\n}\r\n\r\nexport const getAssets: (\r\n    client: S3Client,\r\n    params: GetAssetArgs\r\n) => Promise<Asset[] | undefined> = async (client, params) => {\r\n    console.log(\"[s3:getAssets] Making a List Objects command\")\r\n    const command = new ListObjectsCommand(params)\r\n    console.log(\"[s3:getAssets] Command \", command)\r\n    console.log(\"[s3:getAssets] Our s3 Client\", client)\r\n    console.log(\"[s3:getAssets] Sending command using client.send\")\r\n\r\n    const response = await client.send(command)\r\n    const folders = response.CommonPrefixes?.map((item) => {\r\n        return {\r\n            prefix: item.Prefix,\r\n            etag: undefined,\r\n            name: item.Prefix,\r\n            lastModified: undefined,\r\n            size: 0\r\n        } as Asset\r\n    }) || []\r\n    const files = response.Contents?.map((item) => {\r\n        return {\r\n            etag: item.ETag,\r\n            name: item?.Key,\r\n            lastModified: item?.LastModified,\r\n            size: item?.Size\r\n        } as Asset\r\n    }) || []\r\n    return [...folders, ...files].splice(0, 30);\r\n}\r\n\r\nexport const deleteAsset: (assetId: string) => void = (_assetId) => {\r\n    /**\r\n     * Implementation here\r\n     */\r\n}\r\n","import { Controller } from 'react-hook-form';\nimport { KeyboardAvoidingView, Platform, StyleSheet, TextInput as Native, View } from 'react-native';\nimport { Surface, TextInput } from 'react-native-paper';\n\n\nconst styles = StyleSheet.create({\n    input: {\n        height: 40,\n        margin: 12,\n        borderWidth: 1,\n        padding: 10,\n    },\n});\n\nexport const InternalInputField = (...args) => {\n    // @ts-ignore\n    return <TextInput\n        {...args[0]}\n    />\n}\n\nexport const InputField = ({ control, name, label }: any) => {\n    if (control === undefined) {\n        return null;\n    }\n    /*const {\n        field: { onChange, onBlur, value, ref },\n        fieldState: { invalid, isTouched, isDirty },\n        formState: { touchedFields, dirtyFields }\n    } = useController({\n        name,\n        control,\n        rules: { required: true },\n        defaultValue: \"\",\n    });*/\n\n    const styles = StyleSheet.create({\n        textInput: {\n          height: 40,\n          //borderColor: \"#000000\",\n          //borderBottomWidth: 1,\n          marginTop: 20\n        }\n      });\n\n\n    return <>   \n        <Controller\n            control={control}\n            name={name}\n            render={({ field: { value, onChange, onBlur } }: any) => {\n                return <>\n                    <InternalInputField\n                        name={name}\n                        label={label}\n                        value={value}\n                        onChangeText={(text) => {\n                            console.log(\"[InputChange] name = \", name, \" value = \", text)\n                            onChange(text)\n                        }}\n                        onBlur={onBlur}\n                        style={styles.textInput}\n                    />\n                </>\n            }}\n        />\n    </>\n}","import { Button as PaperButton } from 'react-native-paper';\n\nexport const Button = (...args) => {\n    // @ts-ignore\n    return <PaperButton\n        {...args[0]}\n    />\n}","import { Snackbar as PaperSnack } from 'react-native-paper';\n\nexport const Snackbar = (...args) => {\n    // @ts-ignore\n    return <PaperSnack\n        {...args[0]}\n    />\n}","import React, { useContext, useEffect, useState } from 'react'\nimport { FieldValues, useForm } from 'react-hook-form'\nimport { ApplicationContext } from '../../contexts/application/ApplicationContext'\nimport { buildS3Client, getAssets } from '../../services/s3'\nimport { Text, Card, Surface, Title } from 'react-native-paper';\nimport { InputField } from '../Input/InputField'\nimport { Button } from '../Button'\nimport { ScrollView, KeyboardAvoidingView, Platform, StyleSheet, View, } from 'react-native';\nimport { Snackbar } from '../Snackbar/Snackbar';\n\nexport const SaveCredentialsForm = () => {\n    const [appState, setAppState] = useContext(ApplicationContext)\n    const { s3credentials } = appState\n    const { control, handleSubmit, formState, getValues, reset } = useForm({\n        defaultValues: s3credentials,\n    })\n\n    useEffect(() => {\n        reset(s3credentials)\n    }, [s3credentials])\n\n\n    const [saved, setSaved] = useState(false)\n\n    const onSubmit = () => {\n        onToggleSnackBar();\n        const data = getValues();\n        console.log(\"[SaveCredentialsForm] Saving data = \", data)\n\n        setAppState({\n            ...appState,\n            s3credentials: data as any,\n            s3client: undefined,\n        })\n        setSaved(true)\n        setTimeout(() => {\n            setSaved(false)\n        }, 1000)\n        /**\n         * Build the s3 client here\n         */\n        const s3Client = buildS3Client({\n            credentials: {\n                accessKeyId: data.apiKey,\n                secretAccessKey: data.apiSecret,\n            },\n            region: data.region,\n            endpoint: data.endpoint,\n        })\n        getAssets(s3Client, { Bucket: \"testinghumza\" })\n    }\n\n    const [text, setText] = React.useState(\"\");\n\n    //snackbar\n    const [visible, setVisible] = React.useState(false);\n    const onToggleSnackBar = () => setVisible(!visible);\n    const onDismissSnackBar = () => setVisible(false);\n\n    const styles = StyleSheet.create({\n        container: {\n          flex: 1\n        },\n        inner: {\n          padding: 24,\n          flex: 1,\n          justifyContent: \"space-around\"\n        },\n        header: {\n          fontSize: 36,\n          marginBottom: 48\n        },\n        textInput: {\n          height: 40,\n          borderColor: \"#000000\",\n          borderBottomWidth: 1,\n          marginBottom: 36\n        },\n        snackBarContainer: {\n            flex: 1,\n            justifyContent: 'space-between',\n        }\n      });\n\n\n    return (\n        <ScrollView>\n             <KeyboardAvoidingView\n                behavior={Platform.OS === \"ios\" ? \"padding\" : \"height\"}\n                style={styles.container}\n                >\n            <Surface style={styles.inner}>\n                <Card>\n                    <Card.Content>\n                        <Text variant=\"headlineSmall\">API Configuration</Text>\n                        <InputField\n                            control={control}\n                            name=\"apiKey\"\n                            label=\"API KEY\"                            \n                        />\n\n                        <InputField\n                            control={control}\n                            name=\"apiSecret\"\n                            label=\"Api Secret\"\n                        />\n\n                        <InputField\n                            control={control}\n                            name=\"endpoint\"\n                            label=\"Endpoint\"\n                        />\n\n                        <InputField\n                            control={control}\n                            name=\"bucket\"\n                            label=\"Bucket\"\n                        />\n\n                        <InputField\n                            control={control}\n                            name=\"region\"\n                            label=\"Region\"\n                        />\n                        \n                    </Card.Content>\n                    <Card.Actions>\n                        <Button onPress={handleSubmit(onSubmit)}>Submit</Button>\n                    </Card.Actions>\n                </Card>\n            </Surface>\n        </KeyboardAvoidingView>\n                \n        <View style={styles.snackBarContainer}>\n            <Snackbar\n                visible={visible}\n                onDismiss={onDismissSnackBar}\n                action={{\n                    label: 'Dismiss',\n                    onPress: () => {\n                        // Do something\n                    },\n                }}\n                >\n\n                Credentials are saved!\n\n                {/* {saved ? <Text>Credentials are saved!</Text> : <Text>Credentials not saved!</Text>} */}\n            </Snackbar>\n        </View>\n                \n            \n        </ScrollView>\n    )\n}\n","import { Text } from 'react-native-paper';\nimport { SaveCredentialsForm } from '../SaveCredentialsForm'\n\nexport const ApiConfiguration = () =>{\n  return(\n    <SaveCredentialsForm/>\n  )\n}","import { Asset, GetAssetArgs } from \"../services/s3/types\";\nimport { Asset as AppAssetType } from \"../services/types\"\nexport const S3TypeToInternalAdapter = (assets: Asset[], params: GetAssetArgs) => {\n    return assets.map((asset: Asset) => {\n        const fileName = asset.name.replace(params.Prefix, \"\");\n        return {\n            assetId: asset.etag,\n            fileName,\n            fileSize: asset.size,\n            updatedAt: asset.lastModified,\n            isFolder: asset.prefix?.length > 0,\n            prefix: asset.prefix\n        } as AppAssetType\n    })\n}","import React from \"react\";\n\nexport const ContextMenu = () => {\n  const [anchorEl] = React.useState<null | HTMLElement>(null);\n  const open = Boolean(anchorEl);\n  /*\n  const _handleClick = (event: React.MouseEvent<HTMLElement>) => {\n    setAnchorEl(event.currentTarget);\n  };\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n  */\n\n  return (\n    <>\n    </>)\n}\n","import { ContextMenu } from '../ContextMenu'\nimport { createColumnHelper } from '@tanstack/react-table'\nimport { Asset } from '../../services/types';\nimport prettyBytes from 'pretty-bytes';\n// @ts-ignore\nimport dayjs from 'dayjs';\nimport relativeTime from 'dayjs/plugin/relativeTime'\nimport { AntDesign, Feather } from '@expo/vector-icons';\n\ndayjs.extend(relativeTime);\n\n//icons for different file types or folders\nconst iconType = (asset: Asset) => {\n    const re = /(?:\\.([^.]+))?$/;\n    const internalType = asset.isFolder ? \"folder\" : (re.exec(asset.fileName)[1] || \"\")\n    switch (internalType) {\n        case \"folder\":\n            return <AntDesign name=\"folder1\" size={24} />\n        case \"txt\":\n            return <Feather name=\"file-text\" size={24} />\n        default:\n            return <Feather name=\"file\" size={24} />\n    }\n};\n\nexport const DataGridColumns = () => {\n    const columnHelper = createColumnHelper<Asset>()\n    const columns = [\n\n        // Dispaly file name with icon\n        columnHelper.accessor('fileName', {\n            header: \"Name\",\n            cell: info => {\n                return (<>{iconType(info.row.original)} {info.getValue()}</>)\n            }\n        }),\n\n        // Display file size\n        columnHelper.accessor('fileSize', {\n            header: 'Size',\n            cell: info => prettyBytes(info.getValue())\n        }),\n\n        //Dispaly last modified\n        columnHelper.accessor('updatedAt', {\n            header: 'Last Modified',\n            cell: info => {\n                return dayjs(info.getValue()).fromNow()\n            }\n        }),\n\n        //Display column size\n        columnHelper.display({\n            id: 'actions',\n            cell: () => <ContextMenu />,\n        }),\n    ]\n    return columns\n}\n","import React, { useEffect } from \"react\";\nimport { flexRender, getCoreRowModel, useReactTable, } from '@tanstack/react-table'\nimport { DataGridColumns } from \"./dataGridColumns\";\nimport { Asset } from \"../../services/types\";\nimport { DataTable, Text } from 'react-native-paper';\nimport { ScrollView } from \"react-native\";\n\nexport type DataGridProps = {\n  assets: Asset[] | undefined,\n  onPress: (asset: Asset) => void\n}\n\nexport const DataGrid = ({ assets, onPress }: DataGridProps) => {\n  const [data, setData] = React.useState(() => assets || [])\n  useEffect(() => {\n    setData(assets || []);\n  }, [assets])\n  const table = useReactTable({\n    data,\n    columns: DataGridColumns(),\n    getCoreRowModel: getCoreRowModel(),\n  })\n\n\n  return (\n    <DataTable >\n      <DataTable.Header>\n        {table.getHeaderGroups().map(headerGroup => (\n          <>\n            {headerGroup.headers.map(header => (\n              <DataTable.Title key={header.id}>\n                {header.isPlaceholder\n                  ? null\n                  : flexRender(\n                    header.column.columnDef.header,\n                    header.getContext()\n                  )}\n              </DataTable.Title>\n            ))}\n          </>\n        ))}\n      </DataTable.Header>\n      <ScrollView>\n        {table.getRowModel().rows.map(row => {\n          return <DataTable.Row key={row.id} onPress={() => { onPress(row.original) }}>\n            {row.getVisibleCells().map(cell => (\n              <DataTable.Cell key={cell.id}>\n                <Text >\n                  {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                </Text>\n              </DataTable.Cell>\n            ))}\n          </DataTable.Row>\n        })}\n      </ScrollView>\n    </DataTable>\n  );\n}","import React, { useContext, useEffect, useState } from 'react'\nimport {\n    ApplicationContext,\n    ApplicationContextType,\n} from '../../contexts/application/ApplicationContext'\nimport { useGetAssets } from '../../hooks/useGetAssets'\nimport { useS3Client } from '../../hooks/useS3Client';\nimport { DataGrid } from '../DataGrid';\nimport { Platform, StyleSheet, View } from 'react-native';\nimport { Text, ActivityIndicator, Surface } from 'react-native-paper';\nimport { Button } from '../Button';\nimport { Asset } from '../../services/types';\nimport { GetAssetArgs } from '../../services/s3/types';\n\nexport const ListAssets = () => {\n    const [search, setSearch] = useState(\"\");\n    const [rerun, setRerun] = useState(\"\");\n    const [appState] = useContext<ApplicationContextType>(ApplicationContext)\n    const s3client = useS3Client(appState);\n    const [dataQuery, setDataQuery] = useState<GetAssetArgs>({\n        Bucket: appState.s3credentials.bucket,\n        //Delimiter: search.length > 0 && \"/\",\n        Prefix: ``,\n        //Prefix: \"\",\n        Delimiter: \"/\"\n    })\n    useEffect(() => {\n        setDataQuery({ ...dataQuery, Bucket: appState.s3credentials.bucket })\n    }, [appState, s3client])\n\n    const { data, isLoading, isError } = useGetAssets(s3client, dataQuery, rerun);\n\n    const setPrefix = (prefix: string) => {\n        setDataQuery({ ...dataQuery, Prefix: prefix })\n\n    }\n    const onPress = (asset: Asset) => {\n        if (asset.isFolder) {\n            setPrefix(asset.prefix)\n        }\n    }\n\n    const goBack = () => {\n        const prefix = dataQuery.Prefix;\n        if (prefix !== \"\") {\n            const newPrefix = prefix.substring(0, prefix.substring(0, prefix.length - 1).lastIndexOf(\"/\") + 1);\n            setPrefix(newPrefix)\n        }\n    }\n\n    return <>\n        <Text>Prefix : {dataQuery.Prefix}</Text>\n        <Button onPress={() => { setRerun(`${(Math.random())}`) }} mode='outlined'>Reload</Button>\n        {dataQuery.Prefix?.length > 0 && <Button onPress={() => { goBack() }} mode='outlined'>Go back</Button>}\n        {isLoading && <ActivityIndicator animating={true} />}\n        {isError && <Text variant=\"headlineSmall\">Error </Text>}\n        {data && isLoading === false && <DataGrid assets={data} onPress={onPress} />}\n    </>\n}\n","import { S3Client } from \"@aws-sdk/client-s3\";\nimport { useMemo } from \"react\"\nimport { ApplicationState } from \"../contexts/application/ApplicationContext\";\nimport { buildS3Client } from \"../services/s3\";\n\nexport const useS3Client: (appState: ApplicationState) => S3Client | undefined = (appState: ApplicationState) => {\n    const { s3credentials } = appState;\n    const { apiKey, apiSecret, region, endpoint } = s3credentials;\n    const client = useMemo(() => {\n        if (apiKey && apiSecret && endpoint) {\n            console.log(\"[useS3Client] Building S3 Client region = \", region)\n            console.log(\"[useS3Client] Building S3 Client apiKey = \", apiKey)\n\n            return buildS3Client({\n                region,\n                credentials: {\n                    accessKeyId: apiKey,\n                    secretAccessKey: apiSecret\n                },\n                endpoint\n            })\n        }\n    }, [apiKey, apiSecret, region, endpoint])\n    return client;\n}","import { S3Client } from '@aws-sdk/client-s3';\nimport { useQuery } from '@tanstack/react-query'\nimport { S3TypeToInternalAdapter } from '../adapters/s3';\nimport { getAssets } from '../services/s3';\nimport { GetAssetArgs } from '../services/s3/types';\n\nexport const useGetAssets = (client: S3Client, params: GetAssetArgs, rerun: string = \"\") => {\n    const queryResponse = useQuery(['getAssets', rerun, params.Bucket || \"\", params.Delimiter || \"\", params.Prefix || \"\"], async () => {\n        try {\n            console.log(\"[useGetAssets] Getting data \")\n            const data = await getAssets(client, params)\n            const assets = S3TypeToInternalAdapter(data, params);\n            return assets;\n        } catch (error) {\n            console.log(\"[useGetAssets] Error : \", error)\n        }\n        return []\n    })\n    return queryResponse;\n}\n","import React from 'react'\r\nimport { ListAssets } from '../../components/ListAssets'\r\n\r\nexport default function Dashboard() {\r\n    return (           \r\n            <ListAssets />\r\n    )\r\n}\r\n","import * as React from 'react';\nimport { BottomNavigation } from 'react-native-paper';\nimport { ApiConfiguration } from '../ApiConfiguration/index'\nimport Dashboard from '../../pages/dashboard';\n\nconst MobileNavigation = () => {\n  const [index, setIndex] = React.useState(0);\n  const [routes] = React.useState([\n    { key: 'assets', title: 'Assets', focusedIcon: 'folder'},\n    { key: 'api_configuration', title: 'API Configuration', focusedIcon: 'cogs' }\n  ]);\n\n  const renderScene = BottomNavigation.SceneMap({\n    assets: Dashboard,\n    api_configuration: ApiConfiguration    \n  });\n\n  return (\n    <BottomNavigation\n      navigationState={{ index, routes }}\n      onIndexChange={setIndex}\n      renderScene={renderScene}\n    />\n  );\n};\n\nexport default MobileNavigation;","export const ApplicationStorageKey = 'byos/application'\nexport const DomainStorageKey = 'byos/domain'\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n\nconst storeData = async (value: any) => {\n    try {\n        await AsyncStorage.setItem(ApplicationStorageKey, JSON.stringify(value))\n    } catch (e) {\n        // saving error\n    }\n}\n\nconst getData = async () => {\n    try {\n        const value = await AsyncStorage.getItem(ApplicationStorageKey)\n        if (value !== null) {\n            // value previously stored\n            return value;\n        }\n    } catch (e) {\n        // error reading value\n    }\n    return \"\"\n}\n\nconst parseJson = (jsonString: string) => {\n    try {\n        return JSON.parse(jsonString)\n    } catch (error) {\n        return {}\n    }\n}\n\nexport const getApplicationStateLS = async (defaultValue: string = '{}') => {\n    const value = await getData();\n    if (value) {\n        return parseJson(value)\n    }\n    return parseJson(defaultValue)\n}\n\nexport const setApplicationStateLS = (value: any) => {\n    storeData(value);\n}\n","import React, { useEffect, useState } from 'react'\r\n\r\n//import { HashRouter as Router, Routes, Route } from 'react-router-dom'\r\nimport { InternalRouteDef } from './routes'\r\n//import { Link } from 'react-router-dom'\r\nimport { RoutingContext } from './contexts/routing/RoutingContext'\r\nimport {\r\n    ApplicationContext,\r\n    ApplicationState,\r\n    initialData,\r\n} from './contexts/application/ApplicationContext'\r\n/*import {\r\n    getApplicationStateLS,\r\n    setApplicationStateLS,\r\n} from './services/localstorage'*/\r\n\r\nimport { MD3LightTheme as DefaultTheme, Provider as PaperProvider } from 'react-native-paper';\r\nimport Header from './components/Header'\r\nimport MobileNavigation from './components/MobileNavigation'\r\nimport { getApplicationStateLS, setApplicationStateLS } from './services/localstorage'\r\nimport { useGetApplicationStateFromLs } from './hooks/useGetApplicationStateFromLS'\r\n\r\nfunction App() {\r\n    const [routingState] = React.useContext(RoutingContext)\r\n    const { data: savedApplicationData, isLoaded } = useGetApplicationStateFromLs(initialData);\r\n\r\n    const applicationState = useState(savedApplicationData as ApplicationState)\r\n\r\n    /*useEffect(() => {\r\n        applicationState[1](savedApplicationData);\r\n    }, [savedApplicationData])*/\r\n\r\n    const [applicationStateData, setApplicationStateData] = applicationState\r\n\r\n    useEffect(() => {\r\n        //setApplicationStateLS({ ...applicationStateData })\r\n        setApplicationStateData(savedApplicationData);\r\n    }, [savedApplicationData])\r\n\r\n    useEffect(() => {\r\n        if (isLoaded) {\r\n            console.log(\"[App] Application state was updated = \", applicationStateData)\r\n\r\n            setApplicationStateLS({ ...applicationStateData })\r\n        }\r\n    }, [applicationStateData, isLoaded])\r\n\r\n    return (\r\n        <PaperProvider>\r\n            <ApplicationContext.Provider value={applicationState}>\r\n                {routingState.isReady &&\r\n                    routingState.routes.map((route: InternalRouteDef) => {\r\n                        return (\r\n                            null\r\n                        )\r\n                    })}\r\n\r\n                <Header title=\"BYOS\" />\r\n                <MobileNavigation />\r\n\r\n            </ApplicationContext.Provider>\r\n        </PaperProvider>\r\n    )\r\n}\r\n\r\nexport default App\r\n\r\n","import { useMemo, useState } from \"react\"\nimport { ApplicationState } from \"../contexts/application/ApplicationContext\";\nimport { getApplicationStateLS } from \"../services/localstorage\";\n\nexport const useGetApplicationStateFromLs = (initialData: ApplicationState | undefined) => {\n    const [d, setD] = useState<ApplicationState | undefined>(initialData);\n    const [isLoaded, setIsLoaded] = useState(false);\n    useMemo(() => {\n        getApplicationStateLS(\n            JSON.stringify(initialData)\n        ).then(data => {\n            setD(data);\n            setIsLoaded(true);\n        })\n    }, [initialData])\n\n\n    return { data: d, isLoaded };\n}","import React, { PropsWithChildren } from 'react'\nimport { Button } from 'react-native-paper';\nimport { View } from 'react-native';\n\nconst style = {\n    position: 'absolute' as 'absolute',\n    top: '50%',\n    left: '50%',\n    transform: 'translate(-50%, -50%)',\n    width: 400,\n    bgcolor: 'background.paper',\n    boxShadow: 24,\n    p: 4,\n}\n\nexport type AppModalProps = {\n    isOpen: boolean\n    handleClose: () => void\n}\n\n// @ts-ignore\nconst ViewVirtual = (...args) => <View {...args[0]} />\n\n// @ts-ignore\nconst ButtonUntyped = (...args) => <Button {...args[0]} />\n\nexport function AppModal({ children, isOpen, handleClose }: PropsWithChildren<AppModalProps>) {\n    const containerStyle = { backgroundColor: 'white', padding: 20 };\n    return (\n        <ViewVirtual style={{ marginTop: 100 }}>\n            <ButtonUntyped onPress={() => handleClose()}>Close</ButtonUntyped>\n            {children}\n        </ViewVirtual>\n    )\n}\n","import React from \"react\";\r\nimport Home from \"../pages/home\";\r\nimport Credentials from \"../pages/credentials\";\r\n\r\nexport type InternalRouteDef = {\r\n    path: string;\r\n    component: JSX.Element;\r\n    showInNavigation: boolean;\r\n\r\n};\r\n\r\nexport type RoutingObjectDef = {\r\n    isReady: boolean;\r\n    routes: InternalRouteDef;\r\n}\r\n\r\nconst routes: InternalRouteDef[] = [\r\n    { path: \"/credentials\", component: <Credentials />, showInNavigation: true },\r\n    { path: \"/\", component: <Home />, showInNavigation: true }\r\n]\r\n\r\nconst internalRoutes = {\r\n    isReady: false,\r\n    routes: routes\r\n};\r\n\r\nexport default internalRoutes","import React, { useEffect, useState } from 'react'\r\n//import { useLinkClickHandler } from 'react-router-dom'\r\nimport { AppModal } from '../../components/AppModal'\r\nimport { SaveCredentialsForm } from '../../components/SaveCredentialsForm'\r\n//import { useNavigate } from 'react-router-dom'\r\n\r\nexport default function Credentials() {\r\n    // const [isOpen, setIsOpen] = useState(false)\r\n    // const navigate = useNavigate()\r\n    // const onClick = useLinkClickHandler('/credentials')\r\n    // useEffect(() => {\r\n    //     setIsOpen(true)\r\n    // }, [onClick, setIsOpen])\r\n\r\n    // const handleClose = () => {\r\n    //     setIsOpen(false)\r\n    //     navigate('/')\r\n    // }\r\n\r\n    return (\r\n        <>\r\n            <AppModal isOpen={false} handleClose={()=>{}}>\r\n                <SaveCredentialsForm />\r\n            </AppModal>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\n\nexport default function Home() {\n    return (\n        <>\n        </>\n    )\n}\n","import React, { useEffect } from \"react\";\r\nimport { RoutingContext } from \"../contexts/routing/RoutingContext\";\r\n\r\nexport const BasicProvider = ({children} : React.PropsWithChildren) => {\r\n    const [routingState, setRoutingState] = React.useContext(RoutingContext);  \r\n    useEffect(() => {\r\n        if (routingState.isReady === false) {\r\n            setRoutingState({...routingState, isReady: true});\r\n        }\r\n        // eslint-disable-next-line\r\n    }, [routingState.isReady, routingState.routes])\r\n    return <>\r\n        {children}\r\n    </>\r\n}","import { QueryClient, QueryClientProvider } from '@tanstack/react-query'\n\nconst queryClient = new QueryClient()\n\nexport default function QueryProvider({ children }: React.PropsWithChildren) {\n    return (\n        <QueryClientProvider client={queryClient}>\n            {children}\n        </QueryClientProvider>\n    )\n}\n\n","import React, { useState } from \"react\"\r\nimport config from '../client-config'\r\nimport { RoutingContext } from \"../contexts/routing/RoutingContext\";\r\nimport routes from \"../routes\";\r\nimport { AzureAdProvider } from \"./AzureAd\";\r\nimport { BasicProvider } from \"./BasicProvider\";\r\nimport QueryProvider from \"./QueryProvider\";\r\nimport { Platform } from \"react-native\";\r\n\r\nexport const Provider = ({ children }: React.PropsWithChildren) => {\r\n    const { useAzureLogin } = config;\r\n    const routingState = useState(routes);\r\n    \r\n    /**\r\n     if (useAzureLogin) {\r\n        return <QueryProvider>\r\n            <RoutingContext.Provider value={routingState}>\r\n                <AzureAdProvider >\r\n                    {children}\r\n                </AzureAdProvider>\r\n            </RoutingContext.Provider>\r\n        </QueryProvider>\r\n    }else\r\n    { */\r\n    return (\r\n         <QueryProvider>\r\n        <RoutingContext.Provider value={routingState}>\r\n            <BasicProvider>\r\n                {children}\r\n            </BasicProvider>\r\n        </RoutingContext.Provider>\r\n    </QueryProvider>)\r\n     \r\n      \r\n}","import React from 'react';\nimport { Text } from 'react-native-paper';\nimport BAap from './App'\nimport { Provider } from './providers/Provider';\n\nconst ExportApp = () => {\n    return (\n    <Provider>\n        <BAap />\n    </Provider>    \n    )\n}\n\nexport default ExportApp","import { StatusBar } from 'expo-status-bar';\nimport { StyleSheet, Text, View } from 'react-native';\nimport BYOSApp from \"./src/ExportApp\";\nimport { registerRootComponent } from 'expo';\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\nexport default function App() {\n  return (\n      <BYOSApp/>\n  );\n}\nregisterRootComponent(App);\n\n\n\n","import { registerRootComponent } from 'expo';\n\nimport App from './App';\n\n// registerRootComponent calls AppRegistry.registerComponent('main', () => App);\n// It also ensures that whether you load the app in Expo Go or in a native build,\n// the environment is set up appropriately\nregisterRootComponent(App);\n"],"sourceRoot":""}